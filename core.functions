#!/bin/bash

check_core_functions () {
	is_core_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Core functions not loaded"
		exit 1
	fi
}

param2value () {
	
	# Requires at least one OPTS or OPTS_WITH_VALUE to run
	# OPTS="-a -b -c" OPTS_WITH_VALUE="-d" param2value "${@}"

	local OPTS+=" -v"
	local NUM=0

	unset $( ( set -o posix ; set ) | grep ^_param_ | sed 's/=.*$//g' | xargs )

	while(($#)) ; do
		if [ "${1}" == "$(echo ${OPTS} ${OPTS_WITH_VALUE} | grep -o -- "${1}\b")" ]
			then
				local OPTION=${1}
				local PARAMETER=$(echo ${1} | sed -e 's/^--\?//')
				if [ "${1}" == "$(echo ${OPTS_WITH_VALUE} | grep -o -- "${1}\b")" ]
				then
					shift
					if [ ! "x${1}" == "x" ]
					then 
						eval "_param_${PARAMETER}='${1}'"
					else
						echo "${OPTION} unset, no assigned value."
						return 1
					fi
				else
					eval "_param_${PARAMETER}=1"
				fi
		else
			if [[ ${1} == -* ]]
			then
				echo "Unrecognized option: ${1}"
				return 1
			else
				local NUM=$((NUM+1))
				eval "_param_${NUM}='${1}'"
				local PARAMETER=${NUM}
			fi
		fi
		[ ${_param_v:-0} -eq 1 ] && eval echo "_param_${PARAMETER}=\$_param_${PARAMETER}" || true
		shift
	done
}

download_uncompress () {
	## download_uncompress <URLs> <destination> [files_to_extract]
	## STRIPCOMPONENTS=<num>: Add strip --strip-components=<n> to tar command
	## ARCHIVEDIRS=<str>: Specify what directories to extract
	## NODELETEDESTDIR=<num>: if 1 don't delete ${DEST_DIR}

	trap 'STATUS=${?}; \
		echo "Fail."; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR
	set -x
	local URL=${1}
	local URL_HASH=$(echo -n "${URL}" | md5sum -t | awk '{print $1}')
	local DEST_DIR=${2}
	shift 2
	local FILES2EXTRACT="${@}"
	local STRIPCOMPONENTS=${STRIPCOMPONENTS:-1}
	local NODELETEDESTDIR=${NODELETEDESTDIR:-0}
	if [ ${STRIPCOMPONENTS} -gt 0 ]
	then
		local TARFLAGS="--strip-components=${STRIPCOMPONENTS}"
	fi
	if [ ! -d ${DOWNLOAD_PATH} ]
	then
		mkdir -p ${DOWNLOAD_PATH}
	fi
	if [ -f "${DOWNLOAD_PATH}/url2file.map" ]
	then
		touch "${DOWNLOAD_PATH}/url2file.map"
	fi
	local HASH_ROW=$(grep ${URL_HASH} "${DOWNLOAD_PATH}/url2file.map")
	# if download file does not exists in database download package
	if [ -z "${HASH_ROW}" ]
	then
		local DOWNLOAD_FILE="$(curl -vLsI -o /dev/null "${URL}" 2>&1 | egrep -i '^< content-disposition:' | tr -d "\n\r" | sed -e 's/^.*filename="\?//;s/"\?$//')"
		if [ -z ${DOWNLOAD_FILE} ]
		then
			local DOWNLOAD_FILE="$(basename ${URL})"
		else
			local DOWNLOAD_FILE="$(basename ${DOWNLOAD_FILE})"
		fi
		local DOWNLOAD_HASH_FILE="${URL_HASH}_$(basename ${DOWNLOAD_FILE})"
		echo "${URL_HASH} ${DOWNLOAD_FILE}" >> ${DOWNLOAD_PATH}/url2file.map
	else
	local DOWNLOAD_HASH_FILE=$(echo ${HASH_ROW} | awk '{print $1 "_" $2}')
	local DOWNLOAD_FILE=$(echo ${HASH_ROW} | awk '{print $2}')
	fi
	# if download file does not exists in filesystem
	if [ ! -f "${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE}" ]
	then
		echo -n "downloading..."
		curl -LsR -o ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} ${URL}
	fi
	if [ -d ${DEST_DIR} ] && [ ${NODELETEDESTDIR} -eq 0 ]
	then
		rm -rf ${DEST_DIR}
	fi
	local FILE_ENCODING=$(file -iz ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE})
	local DOWNLOAD_FILE_TYPE=$(echo ${FILE_ENCODING} | egrep -o "compressed-encoding=[^;]*" | sed 's/compressed-encoding=//')
	local UNCOMPRESSED_FILE_TYPE=$(echo ${FILE_ENCODING} | awk '{print $2}' | sed 's/;$//')
	if [ ! -d ${DEST_DIR} ] ; then mkdir -p ${DEST_DIR} ; fi
	echo -n "uncompressing..."
	case ${UNCOMPRESSED_FILE_TYPE} in
		application/x-tar)
			tar xf ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} ${TARFLAGS} -C ${DEST_DIR} ${ARCHIVE_DIRS}
			;;
		*)
			case ${DOWNLOAD_FILE_TYPE} in
				application/x-xz)
					cp ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} ${DEST_DIR}/${DOWNLOAD_FILE}
					xz --uncompress ${DEST_DIR}/${DOWNLOAD_FILE}
					;;
				application/zip)
					if [ -z "${FILES2EXTRACT}" ]
					then
						unzip -n ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} -d ${DEST_DIR}
					else
						unzip -j -n ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} "${FILES2EXTRACT}" -d ${DEST_DIR}
					fi
					;;
				*)
					cp ${DOWNLOAD_PATH}/${DOWNLOAD_HASH_FILE} ${DEST_DIR}/${DOWNLOAD_FILE}
					;;
			esac
			;;
	esac
	set +x
	trap ERR
}

test_version () {
	test -z ${3} && echo "I need 2 arguments to compare and an operator." && return 255

	local SORTED="$(echo -e "${1}\n${3}" | sort -Vru -)"
	local BIGGEST="$(echo -e "${SORTED}" | head -n1)"
	local NO=$(echo -e "${SORTED}" | wc -l)

	case ${2} in
		-gt)
			if [ "${BIGGEST}" == "${1}" ] && [ ${NO} -gt 1 ]
			then
					return 0
			else
					return 1
			fi
		;;
		-ge)
			if [ "${BIGGEST}" == "${1}" ]
			then
					return 0
			else
					return 1
			fi
		;;
		-lt)
			if [ "${BIGGEST}" != "${1}" ] && [ ${NO} -gt 1 ]
			then
					return 0
			else
					return 1
			fi
		;;
		-le)
			if [ "${BIGGEST}" != "${1}" ] || [ ${NO} -eq 1 ]
			then
					return 0
			else
					return 1
			fi
		;;
		-eq)
			if [ ${NO} -eq 1 ]
			then
					return 0
			else
					return 1
			fi
		;;
		-ne)
			if [ ${NO} -eq 2 ]
			then
					return 0
			else
					return 1
			fi
		;;
		*)
			echo "No valid operator specified!"
			return 255
		;;
	esac	
}

BB_HOME=$(dirname $(realpath ${0}))
NPROCS=$(echo $(nproc)/2+1 | bc)

umask 0022

if [ -f ${BB_HOME}/bbxb.conf ] ; then source ${BB_HOME}/bbxb.conf ; fi

# Check platform consistency
PLATFORM=${BB_HOME}/${PLATFORM_DIR:-platforms}/${PLATFORM_NAME}.conf
if [ -f ${PLATFORM} ]
then
	. ${PLATFORM}
	HARCH=${HM}-${HOS}-${HLIBC}
else
	echo "Platform file ${PLATFORM} does not exists!!! Proceeding as no platform specified."
	PLATFORM=native
	HARCH=$(${TOOLCHAIN_CC:-gcc} -dumpmachine)
	HMARCH=native
fi

DATA_PATH=${DATA_PATH:-${HOME}/.bbxb}

GLOBAL_SRC_PATH=${DATA_PATH}/${SRC_DIR:-sources}
GLOBAL_BLD_PATH=${DATA_PATH}/${BLD_DIR:-builds}
GLOBAL_LOG_PATH=${DATA_PATH}/${LOG_DIR:-logs}
GLOBAL_TOOLCHAIN_PATH=${DATA_PATH}/${TOOLCHAIN_DIR:-toolchain}
DOWNLOAD_PATH=${DATA_PATH}/${DOWNLOAD_DIR:-downloads}

if [ ! -d ${GLOBAL_LOG_PATH} ]
then
	mkdir -p ${GLOBAL_LOG_PATH}
fi

PROJECT_PATH=${DATA_PATH}/${PRJ_NAME}
PLATFORM_PATH=${PROJECT_PATH}/${PLATFORM_NAME}
DISTOS_PATH=${PLATFORM_PATH}/${DISTOS_DIR:-distos}
SRC_PATH=${PROJECT_PATH}/${SRC_DIR:-sources}
BLD_PATH=${PLATFORM_PATH}/${BLD_DIR:-builds}
test -z ${BIN_DIR} && BIN_DIR="binaries"
BIN_PATH=${PLATFORM_PATH}/${BIN_DIR}
LOG_PATH=${PLATFORM_PATH}/${LOG_DIR:-logs}
STATUS_PATH=${PLATFORM_PATH}/${STATUS_DIR:-status}
TOOLCHAIN_PATH=${PLATFORM_PATH}/${TOOLCHAIN_DIR:-toolchain}
DISKIMAGES_PATH=${PLATFORM_PATH}/${DISKIMAGES_DIR:-diskimages}
USERDATA_PATH=${PROJECT_PATH}/${USERDATA_DIR:-data}

if [ ! -d ${LOG_PATH} ]
then
	mkdir -p ${LOG_PATH}
fi

if [ ! -d ${USERDATA_PATH} ]
then
	mkdir -p ${USERDATA_PATH}
fi

export PATH=${GLOBAL_TOOLCHAIN_PATH}/bin:${TOOLCHAIN_PATH}/bin:${PATH}
export LD_LIBRARY_PATH=$(gcc -m64 -Xlinker --verbose  2>/dev/null | grep SEARCH | sed 's/SEARCH_DIR("=\?\([^"]\+\)"); */\1\n/g'  | grep -vE '^$' | tr '\n' ':')${TOOLCHAIN_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

PRJ_PATH=${BB_HOME}/${PRJ_DIR:-projects}
PKG_PATH=${BB_HOME}/${PKG_DIR:-packages}
PATCH_PATH=${BB_HOME}/${PATCH_DIR:-patches}
IMG_PATH=${BB_HOME}/${IMG_DIR:-images}

is_core_functions () {
	return 0
}
