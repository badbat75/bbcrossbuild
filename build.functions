#!/bin/bash

check_core_functions

function check_build_functions () {
	is_core_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Core functions not loaded"
		exit 1
	fi
}

function settoolflags () {
	if [ ${HARCH} != ${BARCH} ]
	then
		export CROSS_COMPILING=yes
		export PKG_CONFIG_ALLOW_CROSS=1
	fi
	MULTI_ARCH=${MULTIARCH:-1}
	BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
	BUILD_EXECPREFIX="${BUILD_EXECPREFIX:-${BUILD_PREFIX}}"
	BUILD_INCLUDEDIR="${BUILD_INCLUDEDIR:-$(readlink -m ${BUILD_PREFIX}/include)}"
	BUILD_LIBDIR="${BUILD_LIBDIR:-$(readlink -m ${BUILD_EXECPREFIX}/lib)}"
	BUILD_SYSCONFDIR="${BUILD_SYSCONFDIR:-/etc}"
	BUILD_LOCALSTATEDIR="${BUILD_LOCALSTATEDIR:-/var}"
	export BUILD_PREFIX BUILD_EXECPREFIX BUILD_INCLUDEDIR BUILD_LIBDIR BUILD_SYSCONFDIR BUILD_LOCALSTATEDIR
	export QEMU_LD_PREFIX="${BIN_PATH}"
	if [ ${MULTI_ARCH} -eq 1 ]
	then
		export BUILD_LIBSUFFIX="/${HARCH}"
	fi
	BUILD_LIBSHARED=${BUILD_LIBSHARED:-1}
	BUILD_LIBSTATIC=${BUILD_LIBSTATIC:-1}

	PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
	PLATFORM_RUSTFLAGS="${HMARCH_RUST:+-C target-feature=${HMARCH_RUST} }${HMCPU:+-C target-cpu=${HMCPU}}"
	COMMON_CFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CXXFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_FCFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CPPFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_LDFLAGS="-Wl,-rpath-link,${BIN_PATH}/lib${BUILD_LIBSUFFIX} -L${BIN_PATH}/lib${BUILD_LIBSUFFIX}"
	COMMON_LDFLAGS+=" -Wl,-rpath-link,${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -L${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}"
	COMMON_PKG_CONFIG_LIBDIR="${BIN_PATH}/lib${BUILD_LIBSUFFIX}/pkgconfig"
	COMMON_PKG_CONFIG_LIBDIR+=":${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig:${BIN_PATH}${BUILD_PREFIX}/share/pkgconfig"
	COMMON_PKG_CONFIG_SYSROOT="${BIN_PATH}"
	# Construct build tools flags
	# Build Include search paths
	if [ -d ${DISTOS_PATH}/usr/include ]
	then
		COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CXXFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_FCFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CXXFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CPPFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_LDFLAGS+=" ${STD_LDFLAGS}"
		COMMON_PKG_CONFIG_LIBDIR+=":${DISTOS_PATH}/usr/lib${BUILD_LIBSUFFIX}/pkgconfig:${DISTOS_PATH}/usr/share/pkgconfig"
		COMMON_PKG_CONFIG_SYSROOT="${DISTOS_PATH}"
		SYSROOT_CFLAGS="${DISTOS_PATH:+--sysroot=${DISTOS_PATH}}"
		SYSROOT_LDFLAGS="${DISTOS_PATH:+-Wl,--sysroot=${DISTOS_PATH}}"
		export QEMU_LD_PREFIX="${DISTOS_PATH}"
	else
		SYSROOT_CFLAGS="${BIN_PATH:+--sysroot=${BIN_PATH}}"
		SYSROOT_LDFLAGS="${BIN_PATH:+-Wl,--sysroot=${BIN_PATH}}"
	fi
	# Build LDFLAGS search paths
	if [ -d ${DISTOS_PATH}/etc/ld.so.conf.d ]
	then
		for entry in ${GCCSEARCHLIBS}
		do
			COMMON_LDFLAGS+=" -L$entry -Wl,-rpath-link,$entry"
		done
		for entry in $(cat ${DISTOS_PATH}/etc/ld.so.conf.d/* | grep -v '#' | sort)
		do
			COMMON_LDFLAGS+=" -L${DISTOS_PATH}$entry -Wl,-rpath-link,${DISTOS_PATH}$entry"
		done
	fi
}

function build () (
	function downloadsources () {
		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR SIGINT; \
			return ${STATUS};' ERR	
		trap 'set +x; \
			trap - ERR SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		set -x
		if [ ! -z ${PKG_URL} ]
		then
			if [ ${MAKEDIR:-0} -eq 1 ]
			then
				STRIPCOMPONENTS=0 download_uncompress "${PKG_URL}" ${PKG_SRCPATH}
			else
				download_uncompress "${PKG_URL}" ${PKG_SRCPATH}
			fi
		else
			if [ ! -z ${GIT_URL} ]
			then
				if [ ! -d ${PKG_SRCPATH} ]
				then
					git clone --recursive ${GIT_URL} ${PKG_SRCPATH}
					if  [ ! -z ${GIT_COMMIT} ]
					then
						git -C ${PKG_SRCPATH} checkout ${GIT_COMMIT}
					fi
					#git -C ${PKG_SRCPATH} submodule update --init --recursive
				fi
			fi
		fi
		set +x
		trap - ERR
		trap - SIGINT
	}

	function preparesources () {
		trap 'STATUS=${?}; \
			echo "Fail."; \
			set +x; \
			trap - ERR SIGINT; \
			#[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true; \
			return ${STATUS};' ERR

		trap 'set +x; \
			trap - ERR SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		cd ${PKG_SRCPATH}
		if [ "x${PATCHDEB}" != "x" ]
		then
			echo -n "${SPACES}Retrieve DEB patch info..."
			[ ! -d ${PKG_SRCPATH}/debian ] && mkdir -p ${PKG_SRCPATH}/debian
			ARCHIVEDIRS="debian" download_uncompress "${PATCHDEB}" ${PKG_SRCPATH}/debian >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			if [ -f ${PKG_SRCPATH}/debian/patches/series ]
			then
				while read patch
				do
					if [[ ! "${patch}" =~ ^\#.*|^//.* ]]
					then
						local PATCHARRAY=(${patch})
						if [ ! -z ${PATCHARRAY[0]} ]
						then
							echo -n "${SPACES}Applying ${PATCHARRAY[0]} patch..."
							patch ${PATCHARRAY[1]:--p1} < ${PKG_SRCPATH}/debian/patches/${PATCHARRAY[0]} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
							echo "Done."
						fi
					fi
				done <${PKG_SRCPATH}/debian/patches/series
			else
				echo "${SPACES}\"series\" patch list file does not exist."
			fi
		fi
		for scanpatch in ${PATCHES:-}
		do
			if [[ ${scanpatch} =~ ^https?://|^ftp:// ]]
			then
				echo -n "${SPACES}Downloading $scanpatch patch[set]..."	
				download_uncompress ${scanpatch} ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			else
				echo -n "${SPACES}Copying $scanpatch patch..."
				cp -v ${PATCH_PATH}/$scanpatch ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			fi
			find ${PKG_SRCPATH}/bbxb_patches -type f | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
				echo -n 'Applying {} patch...'
				patch -f -p1 < \"{}\" >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
				echo "Done."
			"
		done
		if [ -f "${PKG_SRCPATH}/${CONF_CMD}" ] && [ ! -x "${PKG_SRCPATH}/${CONF_CMD}" ]
		then
			chmod +x ${PKG_SRCPATH}/${CONF_CMD}
		fi
		echo -n "${SPACES}"
		cd ${BB_HOME}
		trap - ERR
		trap - SIGINT
	}

	function downloadonly () {
		return 0
	}

	function configmake () {
		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR; \
			return ${STATUS};' ERR
		set -x
		cd ${PKG_SRCPATH}
		if [ ${AUTOCONF:-1} -eq 1 ]
		then
			echo -n "${SPACES}AutoReconf ${PKG_NAME}..."
			[ ! -z ${AUTOCONF_PATH} ] && cd ${AUTOCONF_PATH}
			mkdir -p m4
			autoreconf -fi -Im4 >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			local STATUS=${?}
			if [ ${STATUS} -ne 0 ]
			then
				echo "Fail."
				set +x
				return ${STATUS}
			fi
			echo "Done." || echo "Fail."
		fi
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
		then
			CONF_FLAGS="--prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --libexecdir=${BUILD_LIBDIR} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR} ${CONF_FLAGS}"
			CONF_FLAGS="--build=${BARCH} --host=${HARCH} --with-sysroot=${BIN_PATH} ${CONF_FLAGS}"
			if [ ${BUILD_LIBSHARED} -eq 1 ]
			then
				CONF_FLAGS=" --enable-shared ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-shared ${CONF_FLAGS}"
			fi
			if [ ${BUILD_LIBSTATIC} -eq 1 ]
			then
				CONF_FLAGS=" --enable-static ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-static ${CONF_FLAGS}"
			fi
		fi
		#export PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR}
		#export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}
		export PATH=${PATH}:${BIN_PATH}${BUILD_EXECPREFIX}/bin${DISTOS_PATH:+:${DISTOS_PATH}/usr/bin}
		cat > ${HARCH}-pkg-config <<-EOF
			#!/bin/sh
			set -e -o pipefail
			export PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR}
			export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}
			echo $(which pkg-config) \$@ >> ${PWD}/${HARCH}-pkg-config.log
			$(which pkg-config) \$@ | tee -a ${PWD}/${HARCH}-pkg-config.log
			set +e +o pipefail
		EOF
		chmod +x ${HARCH}-pkg-config
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
			CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc ${SYSROOT_CFLAGS} ${PKG_CFLAGS}" \
			CFLAGS="${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
			CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS} ${PKG_CXXFLAGS}" \
			CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
			CPP="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-cpp ${SYSROOT_CFLAGS}" \
			CPPFLAGS="${SYSROOT_CFLAGS} ${COMMON_CPPFLAGS}" \
			LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
			AR=${HARCH}-gcc-ar \
			AS=${HARCH}-as \
			NM=${HARCH}-gcc-nm \
			RANLIB=${HARCH}-gcc-ranlib \
			STRIP=${HARCH}-strip \
			OBJDUMP=${HARCH}-objdump \
			PKG_CONFIG=${PWD}/${HARCH}-pkg-config \
			eval "${PKG_SRCPATH}${CONF_PATH:+/${CONF_PATH}}/${CONF_CMD:-configure} ${CONF_FLAGS}"
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				eval "make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}"
			done
		fi
		make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${INST_CMD:-}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function simplemake () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				echo "Making ${target}..."
				CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc ${SYSROOT_CFLAGS}" \
				CFLAGS="${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
				CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS}" \
				CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
				FC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gfortran ${SYSROOT_CFLAGS}" \
				FFLAGS="${COMMON_FFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FFLAGS}" \
				CPP="${HARCH}-cpp ${SYSROOT_CFLAGS}" \
				CPPFLAGS="${COMMON_CPPFLAGS}" \
				LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
				AR=${HARCH}-gcc-ar \
				AS=${HARCH}-as \
				NM=${HARCH}-gcc-nm \
				RANLIB=${HARCH}-gcc-ranlib \
				STRIP=${HARCH}-strip \
				OBJDUMP=${HARCH}-objdump \
				PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR} \
				PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}} \
					eval "make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}"
			done
		fi
		CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc ${SYSROOT_CFLAGS}" \
		CFLAGS="${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
		CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS}" \
		CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
		FC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gfortran ${SYSROOT_CFLAGS}" \
		FFLAGS="${COMMON_FFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FFLAGS}" \
		CPP="${HARCH}-cpp ${SYSROOT_CFLAGS}" \
		CPPFLAGS="${COMMON_CPPFLAGS}" \
		LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
		AR=${HARCH}-gcc-ar \
		AS=${HARCH}-as \
		NM=${HARCH}-gcc-nm \
		RANLIB=${HARCH}-gcc-ranlib \
		STRIP=${HARCH}-strip \
		OBJDUMP=${HARCH}-objdump \
		PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR} \
		PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${DISTOS_PATH}} \
			eval "make ${PKG_MAKEVARS} PREFIX=${BUILD_PREFIX} LIBSUFFIX=${BUILD_LIBSUFFIX} DESTDIR=${PKG_PKGPATH} V=${MAKEVERBOSE:-0} ${INST_CMD:-install}"
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cmakemake () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=OFF"
		fi
		if [ ${BUILD_LIBSTATIC} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=OFF"
		fi
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
		#export PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR}
		#export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}
		export PATH=${PATH}:${BIN_PATH}${BUILD_EXECPREFIX}/bin${DISTOS_PATH:+:${DISTOS_PATH}/usr/bin}
		cat > ${HARCH}-pkg-config <<-EOF
			#!/bin/sh
			set -e -o pipefail
			export PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR}
			export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}
			echo $(which pkg-config) \$@ >> ${PWD}/${HARCH}-pkg-config.log
			$(which pkg-config) \$@ | tee -a ${PWD}/${HARCH}-pkg-config.log
			set +e +o pipefail
		EOF
		chmod +x ${HARCH}-pkg-config
		PKG_CONFIG=${PWD}/${HARCH}-pkg-config \
		cmake ${PKG_SRCPATH} \
			-DCMAKE_BUILD_TYPE="Release" \
			-DTOOLCHAIN_PREFIX=${HARCH}- \
			-DCMAKE_CROSSCOMPILING="TRUE" \
			-DCMAKE_C_COMPILER_LAUNCHER=${CCWRAPPER} \
			-DCMAKE_C_COMPILER="${HARCH}-gcc" \
			-DCMAKE_C_FLAGS="${SYSROOT_CFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
			-DCMAKE_CXX_COMPILER_LAUNCHER=${CCWRAPPER} \
			-DCMAKE_CXX_COMPILER="${HARCH}-g++" \
			-DCMAKE_CXX_FLAGS="${SYSROOT_CFLAGS} ${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
			-DCMAKE_CPP_COMPILER="${HARCH}-cpp" \
			-DCMAKE_CPP_FLAGS="${SYSROOT_CFLAGS} ${COMMON_CPPFLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
			-DCMAKE_AR=${TOOLCHAIN_PATH}/bin/${HARCH}-gcc-ar \
			-DCMAKE_NM=${HARCH}-gcc-nm \
			-DCMAKE_CC_COMPILER_RANLIB=${HARCH}-gcc-ranlib \
			-DCMAKE_CXX_COMPILER_RANLIB=${HARCH}-gcc-ranlib \
			-DCMAKE_STRIP=${HARCH}-strip \
			-DCMAKE_INSTALL_PREFIX=${BUILD_PREFIX} \
			-D${VAR_INSTALL_LIBDIR:-"LIB_INSTALL_DIR"}=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_LIBSUFFIX:-"LIB_SUFFIX"}=${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_INCDIR:-"INCLUDE_INSTALL_DIR"}=${BUILD_INCLUDEDIR} \
			-D${VAR_INSTALL_CONFDIR:-"SYSCONF_INSTALL_DIR"}=${BUILD_SYSCONFDIR} \
			${CONF_FLAGS}
		make ${PKG_MAKEVARS} VERBOSE=${MAKEVERBOSE:-0}
		make ${PKG_MAKEVARS} VERBOSE=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${INST_CMD}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function mesonninja () {
		function createmesoncross () {	
			function buildmesonargs () {
				local FIRST=1
				for flag in ${1}
				do
					if [ ${FIRST} -ne 1 ]
					then
						echo -n ", "
					fi
					echo -n "'${flag}'"
				local FIRST=0
				done
				echo
			}
			set +x
			OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
			if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
			then
				CONF_FLAGS+=" --prefix=${BUILD_PREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR}"
				if [ ${BUILD_LIBSHARED} -eq 0 ] && [ ${BUILD_LIBSTATIC} -eq 1 ]
				then
					CONF_FLAGS+=" --default-library=static"
				fi
				if [ ${BUILD_LIBSHARED} -eq 1 ] && [ ${BUILD_LIBSTATIC} -eq 0 ]
				then
					CONF_FLAGS+=" --default-library=shared"
				fi
			fi
			[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
			local CC="${HARCH}-gcc"
			local CFLAGS="${SYSROOT_CFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}"
			local CXX="${HARCH}-g++"
			local CXXFLAGS="${SYSROOT_CFLAGS} ${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
			local FC=${HARCH}-gfortran
			local FFLAGS="${SYSROOT_CFLAGS} ${COMMON_FFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FFLAGS}"
			local CPP=${HARCH}-cpp
			local CPPFLAGS="${COMMON_CPPFLAGS}"
			local LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}"
			local AR=${HARCH}-gcc-ar
			local NM=${HARCH}-gcc-nm
			local RANLIB=${HARCH}-gcc-ranlib
			local STRIP=${HARCH}-strip
			local C_ARGS=$(buildmesonargs "${CFLAGS}")
			local CPP_ARGS=$(buildmesonargs "${CXXFLAGS}")
			local FORTRAN_ARGS=$(buildmesonargs "${FFLAGS}")
			local C_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local CPP_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local FORTRAN_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			cat > cross-${PLATFORM_NAME} <<-EOF
				[binaries]
				c = '${CC}'
				cpp = '${CXX}'
				fortran = '${FC}'
				ar = '${AR}'
				strip = '${STRIP}'
				nm = '${NM}'
				ranlib = '${RANLIB}'
				pkgconfig = 'pkg-config'

				[host_machine]
				system = '${HOS}'
				cpu_family = '${HM}'
				cpu = '${HMCPU}'
				endian = '${HMENDIAN}'

				[properties]
				c_args = [${C_ARGS}]
				cpp_args = [${CPP_ARGS}]
				fortran_args= [${FORTRAN_ARGS}]
				c_link_args = [${C_LINK_ARGS}]
				cpp_link_args = [${CPP_LINK_ARGS}]
				fortran_link_args = [${FORTRAN_LINK_ARGS}]
			EOF
			set -x
		}

		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x

		mkdir -p ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local NINJA_FLAGS="$([ $MAKEVERBOSE -eq 1 ] && echo -n '-v')"
		createmesoncross
		CMAKE=cmake \
		PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR} \
		PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}} \
		meson ${PKG_SRCPATH} ${PKG_BLDPATH} --buildtype=release --strip -Db_ndebug=true --cross-file cross-${PLATFORM_NAME} \
			--prefix=${BUILD_PREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			--includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR} \
			${CONF_FLAGS}
		ninja ${NINJA_FLAGS} -C ${PKG_BLDPATH}
		DESTDIR=${PKG_PKGPATH} ninja ${NINJA_FLAGS} -C ${PKG_BLDPATH} install
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cargobuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
	
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -C opt-level=${OPTLEVEL}}"
		local CARGO_BIN=${CARGO_BIN:-${BUILD_EXECPREFIX}/bin}
		local CARGO_LIB=${CARGO_LIB:-${BUILD_LIBDIR}${BUILD_LIBSUFFIX}}
		[ ${CARGO_STRIP:-0} -eq 1 ] && local STRIP_FLAG=-s
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_RUSTFLAGS+=" -C lto"
		cat > ${HARCH}-gcc <<-EOF
			#!/bin/bash
			echo "$(which ${HARCH}-gcc) \${@} ${STRIP_FLAG} ${SYSROOT_CFLAGS} ${OPTLINK_FLAGS} ${COMMON_LDFLAGS}" >> ${LOG_PATH}/${PKG_NAME}.log
			exec $(which ${HARCH}-gcc) \${@} ${STRIP_FLAG} ${SYSROOT_CFLAGS} ${OPTLINK_FLAGS} ${COMMON_LDFLAGS}
			return \${?}
		EOF
		chmod +x ${HARCH}-gcc
		local CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
		PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR} \
		PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${DISTOS_PATH}} \
		RUSTFLAGS="${PLATFORM_RUSTSYSROOT} ${PLATFORM_RUSTFLAGS} ${OPTCOMP_RUSTFLAGS} \
			-C linker=${PKG_BLDPATH}/${HARCH}-gcc ${PKG_RUSTFLAGS}" \
			cargo build --verbose --release ${CONF_FLAGS} --target=${CARGO_TARGET}
		for file in ${CARGO_BINLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_BIN} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_BIN}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_BIN}/${file}
		done
		for file in ${CARGO_LIBLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_LIB} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_LIB}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_LIB}/${file}
		done
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function kernelbuild () {
		function make4kern () {
			if [ ${KERN_LTOENABLE:-0} -eq 1 ] 
			then
				KERN_OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
				KBUILD_BUILD_TIMESTAMP='' make V=${MAKEVERBOSE:-0} \
				CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc" \
				LD="scripts/gcc-ld" \
				AR="${HARCH}-gcc-ar" \
				RANLIB="${HARCH}-gcc-ranlib" \
				KCFLAGS="${PKG_CFLAGS}" \
				KBUILD_LDFLAGS="${KERN_OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
				LDFLAGS_MODULE="${KERN_OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
				ARCH=${KERN_ARCH} \
				CROSS_COMPILE=${HARCH}- \
				EXTRAVERSION=${KERN_EXTRAVERSION} \
				${EXTRA_PARMS} \
				DISABLE_LTO=-fno-lto \
				${@} ${PKG_MAKEVARS}
				local STATUS=${?}
			else
				KBUILD_BUILD_TIMESTAMP='' make V=${MAKEVERBOSE:-0} \
				CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc" \
				KCFLAGS="${PKG_CFLAGS}" \
				KBUILD_LDFLAGS="${KERN_OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
				LDFLAGS_MODULE="${KERN_OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
				ARCH=${KERN_ARCH} \
				CROSS_COMPILE=${HARCH}- \
				EXTRAVERSION=${KERN_EXTRAVERSION} \
				${EXTRA_PARMS} \
				${@} ${PKG_MAKEVARS}
				local STATUS=${?}
			fi
			return ${STATUS}
		}
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		KERN_VER=$(make kernelversion)

		# Config kernel build
		make V=${MAKEVERBOSE:-0} ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} ${KERN_DEFCONFIG} .config

		case ${KERN_OPTLEVEL:-null} in
			s|S)	scripts/config -e CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			2)	scripts/config -d CC_OPTIMIZE_FOR_SIZE -e CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			3)	# Patch kernel to build with -O3 flag
				sed -i '/depends on ARC$/d' init/Kconfig
				scripts/config -d CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
		esac

		if [ "x${CONF_FLAGS}" != "x" ]
		then
			scripts/config ${CONF_FLAGS}
		fi

		make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} oldconfig
	
		if [ ! -d ${PKG_PKGPATH}/boot ]
		then
			mkdir -p ${PKG_PKGPATH}/boot
		fi

		# Install headers
		make V=${MAKEVERBOSE:-0} ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_HDR_PATH=${PKG_PKGPATH}${BUILD_PREFIX} headers_install 

		# Break if only headers installation required
		if [ ${KERN_HDRS_ONLY:-0} -eq 1 ]
		then
			set +x
			return ${STATUS}
		fi

		# Build and install kernel
		make4kern ${KERN_IMAGE}
		case ${KERN_NAME}
		in
			kernel*)
				cp arch/${KERN_ARCH}/boot/${KERN_IMAGE} ${PKG_PKGPATH}/boot/${KERN_NAME}
				local STATUS=${?}
				;;
			*)
				[ ! -d ${PKG_PKGPATH}/boot ] && mkdir ${PKG_PKGPATH}/boot
				make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_PATH=${PKG_PKGPATH}/boot ${INST_CMD} install
				;;
		esac

		# Build and install modules
		make4kern modules
		make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_MOD_PATH=${PKG_PKGPATH} ${INST_CMD} modules_install
		local KERNELRELEASE=$(cat include/config/kernel.release)
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/build
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/source

		# Build and install DTBS
		if [ ${KERN_DTBS:-0} -eq 1 ] && [ ${STATUS} -eq 0 ]
		then
			if [ ! -d ${PKG_PKGPATH}/boot/overlays ]
			then
				mkdir -p ${PKG_PKGPATH}/boot/overlays
			fi
			make4kern dtbs
			make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_DTBS_PATH=${PKG_PKGPATH}/boot ${INST_CMD} dtbs_install
		fi
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		local INSTALL_TARGET="--install-lib=${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		PYTHONPATH=${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=:${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}
			fi
			export PYTHONPATH
		done
		cross-python -m site
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
		CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc ${SYSROOT_CFLAGS}" \
		CFLAGS="${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
		CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS}" \
		CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
		CPP="${HARCH}-cpp ${SYSROOT_CFLAGS}" \
		CPPFLAGS="${COMMON_CPPFLAGS} ${PKG_CFLAGS}" \
		FC=${HARCH}-gfortran \
		FFLAGS="${SYSROOT_CFLAGS} ${COMMON_FCFLAGS} ${PKG_FCFLAGS}" \
		F90=${HARCH}-gfortran \
		F90FLAGS="${SYSROOT_CFLAGS} ${COMMON_FCFLAGS} ${PKG_FCFLAGS}" \
		LD="${HARCH}-ld.gold ${PKG_LDFLAGS}" \
		LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
		AR=${HARCH}-gcc-ar \
		AS=${HARCH}-as \
		NM=${HARCH}-gcc-nm \
		RANLIB=${HARCH}-gcc-ranlib \
		STRIP=${HARCH}-strip \
		OBJDUMP=${HARCH}-objdump \
			eval '${PKG_BUILDVARS} cross-python setup.py build -j${NPROCS} ${CONF_FLAGS}'
		eval '${PKG_BUILDVARS} cross-python setup.py install --root=${PKG_PKGPATH} --prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} \
			${INSTALL_TARGET}'
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonpip () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		PYTHONPATH="${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=":${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}"
			fi
		done
		#PYTHONUSERBASE="${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		export PYTHONPATH
		#export PYTHONUSERBASE
		cross-python -m site
		if [ ${PKG_PYTHONBUILD:-1} -eq 1 ]
		then
			local PYTHONBUILD="--no-binary :all:"
		fi
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
		#build-python -m pip ${VERBOSE} install --upgrade ${PKG_NAME}
		CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc ${SYSROOT_CFLAGS}" \
		CFLAGS="${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}" \
		CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS}" \
		CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}" \
		CPP="${HARCH}-cpp ${SYSROOT_CFLAGS}" \
		CPPFLAGS="${COMMON_CPPFLAGS} ${PKG_CFLAGS}" \
		FC=${HARCH}-gfortran \
		FFLAGS="${SYSROOT_CFLAGS} ${COMMON_FCFLAGS} ${PKG_FCFLAGS}" \
		F90=${HARCH}-gfortran \
		F90FLAGS="${SYSROOT_CFLAGS} ${COMMON_FCFLAGS} ${PKG_FCFLAGS}" \
		LD="${HARCH}-ld.gold ${PKG_LDFLAGS}" \
		LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}" \
		AR=${HARCH}-gcc-ar \
		AS=${HARCH}-as \
		NM=${HARCH}-gcc-nm \
		RANLIB=${HARCH}-gcc-ranlib \
		STRIP=${HARCH}-strip \
		OBJDUMP=${HARCH}-objdump \
			cross-python -m pip ${VERBOSE} install ${PYTHONBUILD} --root ${PKG_PKGPATH} --prefix=${BUILD_PREFIX} ${PKG_NAME}
		if [ ${PYTHON_PKGDIR} == dist-packages ]
		then
			mv ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/site-packages ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/dist-packages
		fi
		set +x
		trap - ERR
	}
	
	function boostbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE} -eq 1 ]
		then
			local B2_FLAGS="-d+2"
		else
			local B2_FLAGS="-d+1"
		fi
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			local B2_FLAGS="${B2_FLAGS} link=shared runtime-link=shared"
		else
			local B2_FLAGS="${B2_FLAGS} link=static runtime-link=static"
		fi
		case ${HM} in
			arm)
				local HMABI=aapcs
				local HMADDRMOD=32
				;;
			aarch64)
				local HMABI=aapcs
				local HMADDRMOD=64
				;;
			i386|ppc32)
				local HMABI=sysv
				local HMADDRMOD=32
				;;
			x86_64|ppc64)
				local HMABI=sysv
				local HMADDRMOD=64
				;;
			mips1)
				local HMABI=o32
				local HMADDRMOD=32
				;;
		esac
		case ${HOS} in
			linux|android) local HMBINFMT=elf;;
			windows) local HMBINFMT=pe;;
			macosx|ios) local HMBINFMT=mach-o;;
		esac
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"

		local PLATFORM_CFLAGS=$(echo ${PLATFORM_CFLAGS} | sed 's/-mtls-dialect=gnu2//g')
		local CXX="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++ ${SYSROOT_CFLAGS} ${PKG_CXXFLAGS}"
		local CXXFLAGS="${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}"
		local LDFLAGS="${SYSROOT_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}"
		./bootstrap.sh --prefix=${PKG_PKGPATH}${BUILD_PREFIX} --exec-prefix=${PKG_PKGPATH}${BUILD_EXECPREFIX} --libdir=${PKG_PKGPATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --includedir=${PKG_PKGPATH}${BUILD_INCLUDEDIR} --with-python-version=${PYTHONBIN_VER} &&
		sed -i "s|using gcc ;|using gcc : : ${CXX} ;|" project-config.jam &&
		PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR} \
		PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}} \
		./b2 -j${NPROCS} -q ${B2_FLAGS} \
			architecture=${HM} address-model=${HMADDRMOD} binary-format=${HMBINFMT} abi=${HMABI} target-os=${HOS} \
			toolset=gcc threading=multi cxxflags="-fPIC ${CXXFLAGS}" linkflags="${LDFLAGS}" install
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/${PKG_NAME}.log ]; \
		then \
			echo "Log ${LOG_PATH}/${PKG_NAME}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/${PKG_NAME}.log; \
		fi; \
		trap - ERR; \
		return ${STATUS}' ERR

	unset PKG_URL \
		GIT_URL \
		GIT_COMMIT \
		BUILD_PROCESS \
		STD_CONF_FLAGS \
		CONF_CMD \
		CONF_FLAGS \
		CONF_PATH \
		INST_CMD \
		MAKEDIR \
		AUTOCONF \
		AUTOCONF_PATH \
		PATCHDEB \
		PATCHES \
		PKG_NAME \
		PKG_SUFFIX \
		PKG_SRCDIR \
		PKG_DEPS \
		PKG_COPYSRC \
		PKG_CFLAGS \
		PKG_CXXFLAGS \
		PKG_FCFLAGS \
		PKG_LDFLAGS \
		PKG_RUSTFLAGS \
		PKG_MAKETARGETS \
		PKG_MAKEVARS \
		PKG_PREBUILD \
		PKG_POSTBUILD \
		PKG_TWOSTEPSBUILD \
		VAR_INSTALL_LIBDIR \
		VAR_INSTALL_LIBSUFFIX \
		VAR_INSTALL_INCDIR \
		VAR_INSTALL_CONFDIR \
		CARGO_BIN \
		CARGO_LIB \
		CARGO_BINLIST \
		CARGO_LIBLIST \
		CARGO_STRIP

	if [ -z "${NUMSPACES}" ]
	then
		local NUMSPACES=0
	fi
	
	if [ ! -f ${PKG_PATH}/${1}.pkg ]
	then
		echo "Package ${1} does not exists."
		echo
		return 1
	fi

	settoolflags
	
	local PKG_NAME=$(basename ${1})\${PKG_SUFFIX}
	local PKG_SRCDIR=${PKG_SRCDIR:-${PKG_NAME}}
	local PKG_BLDPATH=${BLD_PATH}/${PKG_NAME}
	local PKG_PKGPATH=${PACKAGES_PATH}/${PKG_NAME}

	source ${PKG_PATH}/${1}.pkg

	eval local PKG_NAME=${PKG_NAME}
	eval local PKG_SRCPATH=${SRC_PATH}/${PKG_SRCDIR}
	eval local PKG_BLDPATH=${PKG_BLDPATH}
	eval local PKG_PKGPATH=${PKG_PKGPATH}

	echo "Package ${PKG_NAME}"

	if [ ${DEBUG:-0} -gt 0 ]
	then
		echo
		echo "PKG_SRCPATH: ${PKG_SRCPATH}"
		echo "PKG_BLDPATH: ${PKG_BLDPATH}"
		echo "PKG_PKGPATH: ${PKG_PKGPATH}"
		echo
	fi

	for deps in ${PKG_DEPS}
	do
		local NUMSPACES=$((NUMSPACES+1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
		echo -n "${SPACES}Requires "
		#echo "Called from ${1}"
		build ${deps}
		local NUMSPACES=$((NUMSPACES-1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
	done


	if [ -f ${STATUS_PATH}/${PKG_NAME} ]
	then
		if [ "$(md5sum ${PKG_PATH}/${1}.pkg)" == "$(cat ${STATUS_PATH}/${PKG_NAME})" ]
		then
			echo "${SPACES}Package ${PKG_NAME} already built."
			echo
			return 0
		else
			rm -f ${STATUS_PATH}/${PKG_NAME}
			if [ -d ${PKG_SRCPATH} ]
			then
				rm -rf ${PKG_SRCPATH}
			fi
		fi
	fi

	if [ ${OVERRIDE_TARGET_GCC_CHECK:-0} -eq 0 ] && [ "${BUILD_PROCESS}" != "none" ] && [ "${BUILD_PROCESS}" != "downloadonly" ]
	then
		check_target_gcc
	fi
	echo -n "${SPACES}"
	# Build defaults
	if [ ! -d ${BLD_PATH} ]
	then
		mkdir -p ${BLD_PATH}
	fi
	if [ ! -d ${BIN_PATH} ]
	then
		mkdir -p ${BIN_PATH}
	fi
	> ${LOG_PATH}/${PKG_NAME}.log
	case x${BUILD_PROCESS} in
	xpythonpip)
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			(eval "trap 'exit 1' ERR; set -x && ${PKG_PREBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME}..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! -z "${PKG_POSTBUILD}" ]
		then
			(eval "trap 'exit 1' ERR; set -x && ${PKG_POSTBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	x*)
		if [ ! -z ${PKG_URL} ] || [ ! -z ${GIT_URL} ]
		then
			echo -n "Downloading ${PKG_NAME}..."
			downloadsources >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			preparesources
		fi
		if [ -d ${PKG_BLDPATH} ]
		then
			rm -rf ${PKG_BLDPATH}
		fi
		if [ -d ${PKG_PKGPATH} ]
		then
			sudo rm -rf ${PKG_PKGPATH}
		fi
		mkdir -p ${PKG_PKGPATH}
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			cd ${PKG_SRCPATH}
			(eval "trap 'exit 1' ERR; set -x && ${PKG_PREBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ${PKG_COPYSRC:-0} -eq 1 ] 
		then
			cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME}..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! -z "${PKG_POSTBUILD}" ]
		then
			if [ ! -d ${PKG_BLDPATH} ]
			then
				mkdir -p ${PKG_BLDPATH}
			fi
			cd ${PKG_BLDPATH}
			(eval "trap 'exit 1' ERR; set -x && ${PKG_POSTBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	esac
	if [ ! -d ${STATUS_PATH} ]
	then
		mkdir -p ${STATUS_PATH}
	fi
	#rm -rf ${PKG_SRCPATH} &&
	case x${BUILD_PROCESS} in
		*)
			(
				set -ex
				pwd
				if [ ${PKG_SAVE_STATUS:-1} -eq 1 ]
				then
					tar cJfp ${PKG_PKGPATH}.tar.xz --owner=0 --group=0 -C ${PKG_PKGPATH} .
				fi
				rsync -aKv ${PKG_PKGPATH}/ ${BIN_PATH}
				sudo rm -rf ${PKG_PKGPATH}
				set +ex
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			if [ ${KEEP_BUILDDIR:-0} -eq 0 ]
			then
				rm -rf ${PKG_BLDPATH}
			fi
		;;
	esac
	if [ ${PKG_SAVE_STATUS:-1} -eq 1 ]
	then
		md5sum ${PKG_PATH}/${1}.pkg > ${STATUS_PATH}/${PKG_NAME}
	fi
	echo "Done."
	echo
	trap - ERR
)

function is_build_functions () {
	return 0
}
