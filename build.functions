#!/bin/bash

check_core_functions

function check_build_functions () {
	is_core_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Core functions not loaded"
		exit 1
	fi
}

function setbuildenv () {
	if [ ${HARCH} != ${BARCH} ]
	then
		export CROSS_COMPILING=yes
		export PKG_CONFIG_ALLOW_CROSS=1
	fi
	MULTI_ARCH=${MULTIARCH:-1}
	BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
	BUILD_EXECPREFIX="${BUILD_EXECPREFIX:-${BUILD_PREFIX}}"
	BUILD_INCLUDEDIR="${BUILD_INCLUDEDIR:-$(readlink -m ${BUILD_PREFIX}/include)}"
	BUILD_LIBDIR="${BUILD_LIBDIR:-$(readlink -m ${BUILD_EXECPREFIX}/lib)}"
	BUILD_SYSCONFDIR="${BUILD_SYSCONFDIR:-/etc}"
	BUILD_LOCALSTATEDIR="${BUILD_LOCALSTATEDIR:-/var}"
	BUILD_SYSTEMDDIR="${BUILD_SYSTEMDDIR:-/lib/systemd/system}"
	BUILD_USERSYSTEMDDIR="${BUILD_USERSYSTEMDDIR:-${BUILD_PREFIX}/lib/systemd/system}"
	export BUILD_PREFIX BUILD_EXECPREFIX BUILD_INCLUDEDIR BUILD_LIBDIR BUILD_SYSCONFDIR BUILD_LOCALSTATEDIR
	export QEMU_LD_PREFIX="${BIN_PATH}"
	if [ ${MULTI_ARCH} -eq 1 ]
	then
		export BUILD_LIBSUFFIX="/${HARCH}"
	fi
	BUILD_LIBSHARED=${BUILD_LIBSHARED:-1}
	BUILD_LIBSTATIC=${BUILD_LIBSTATIC:-1}
	PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
	PLATFORM_RUSTFLAGS="${HMCPU:+-C target-cpu=${HMCPU}}${HMARCH_RUST:+ -C target-feature=${HMARCH_RUST} }"
	COMMON_CFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CXXFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_FCFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CPPFLAGS="-I${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_LDFLAGS="-Wl,-rpath-link,${BIN_PATH}/lib${BUILD_LIBSUFFIX} -L${BIN_PATH}/lib${BUILD_LIBSUFFIX}"
	COMMON_LDFLAGS+=" -Wl,-rpath-link,${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -L${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}"
	COMMON_PKG_CONFIG_LIBDIR="${BIN_PATH}/lib${BUILD_LIBSUFFIX}/pkgconfig"
	COMMON_PKG_CONFIG_LIBDIR+=":${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig:${BIN_PATH}${BUILD_PREFIX}/share/pkgconfig"
	COMMON_PKG_CONFIG_SYSROOT="${BIN_PATH}"
	# Construct build tools flags
	# Build Include search paths
	if [ -d ${DISTOS_PATH}/usr/include ]
	then
		COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CXXFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_FCFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CXXFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include ${STD_CPPFLAGS} ${HARCH:+-I${DISTOS_PATH}/usr/include${BUILD_LIBSUFFIX}}"
		COMMON_LDFLAGS+=" ${STD_LDFLAGS}"
		COMMON_PKG_CONFIG_LIBDIR+=":${DISTOS_PATH}/usr/lib${BUILD_LIBSUFFIX}/pkgconfig:${DISTOS_PATH}/usr/share/pkgconfig"
		COMMON_PKG_CONFIG_SYSROOT="${DISTOS_PATH}"
		SYSROOT_FLAGS="${DISTOS_PATH:+--sysroot=${DISTOS_PATH}}"
		export QEMU_LD_PREFIX="${DISTOS_PATH}"
	else
		SYSROOT_FLAGS="${BIN_PATH:+--sysroot=${BIN_PATH}}"
	fi
	# Build LDFLAGS search paths
	if [ -d ${DISTOS_PATH}/etc/ld.so.conf.d ]
	then
		for entry in ${GCCSEARCHLIBS}
		do
			COMMON_LDFLAGS+=" -L$entry -Wl,-rpath-link,$entry"
		done
		for entry in $(cat ${DISTOS_PATH}/etc/ld.so.conf.d/* | grep -v '#' | sort)
		do
			COMMON_LDFLAGS+=" -L${DISTOS_PATH}$entry -Wl,-rpath-link,${DISTOS_PATH}$entry"
		done
	fi
	### Search of crtbeginS.o and crtendS.o under /usr/lib/gcc...
}

function setllvmpollyenv () {
	unset LLVM_EXTRAPOLLYFLAGS
	unset LLVM_KERNELPOLLYFLAGS
	unset LLVM_EXTRAPOLLYFLAGSLIBS
	unset LLVM_KERNELPOLLYFLAGSLIBS

	local OPTIONS="${@}"

	local LIBCLANG_RTBUILTINS="${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
	#if [ ! -z "${OPTIONS}" ] && [ -f ${LIBCLANG_RTBUILTINS} ]

	case x${HMARCH} in
		xarmv*)
				if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
				then
					unset OPTIONS
				fi
			;;
	esac

	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*) local LLVM_ARCH=${HM}
			;;
	esac

	if [ ! -z "${OPTIONS}" ]
	then
		LLVM_EXTRAPOLLYFLAGS="-mllvm -polly"
		#### Missing _mulodi4 symbol, skip polly build for kernel 
		case ${HM} in
			arm)
				# Need to add static rtbuiltins libraries to arm link to avoid missing _mulodi4 symbol
				# but this is not supported in kernel building so we can't set polly for kernel build
				#LLVM_EXTRAPOLLYFLAGSLIBS="-Wl,${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
				LLVM_KERNELPOLLYFLAGS=
				;;
			*)
				# Normal behaviour
				LLVM_KERNELPOLLYFLAGS="-mllvm -polly"
				;;
		esac

		if [ "$( echo ${OPTIONS} | grep -o "all" )" == "all" ]
		then
			local OPTIONS="polly vectorizer parallel"
		fi 
		
		for option in ${OPTIONS}
		do
			case ${option} in
				polly)
					;;
				vectorizer)
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					if [ "${HM}" != "arm" ]
					then
						LLVM_KERNELPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					fi
					;;
				parallel)
					# polly-parallel not supported in kernel build because libgomp cannot be statically linked to kernel
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-parallel"
					;;
				*)
					echo "Error: ${option} not recognized"
					return 1
					;;
			esac
		done
	fi
}

function settcenv () {
	case ${TOOLCHAIN} in
		llvm)
			TOOLCHAIN_CC=clang
			TOOLCHAIN_CXX=clang++
			TOOLCHAIN_CPP="clang -E"
			TOOLCHAIN_FC=flang
			TOOLCHAIN_F90=flang
			TOOLCHAIN_AR=llvm-ar
			TOOLCHAIN_AS=llvm-as
			TOOLCHAIN_NM=llvm-nm
			TOOLCHAIN_RANLIB=llvm-ranlib
			TOOLCHAIN_STRIP=llvm-strip
			TOOLCHAIN_OBJCOPY=llvm-objcopy
			TOOLCHAIN_OBJDUMP=llvm-objdump
			TOOLCHAIN_READELF=llvm-readelf
			TOOLCHAIN_LD=${TOOLCHAIN_LD:-ld.lld}
			if [ ${PKG_FAULTYCFLAGS:-0} -eq 1 ]
			then
				TOOLCHAIN_COMPFLAGS="${LLVM_EXTRACLANGFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH} ${SYSROOT_FLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
			else
				TOOLCHAIN_COMPFLAGS="${SYSROOT_FLAGS} ${LLVM_EXTRACLANGFLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH}"
			fi
			TOOLCHAIN_LDFLAGS="${SYSROOT_FLAGS} -fuse-ld=$(echo ${TOOLCHAIN_LD} | cut -d. -f2) -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS}"
			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|fat)
					OPTCOMP_FLAGS+=" -flto=full"
					OPTLINK_FLAGS+=""
					;;
				2|thin)
					OPTCOMP_FLAGS+=" -flto=thin"
					OPTLINK_FLAGS+=" -Wl,--thinlto-jobs=${NPROCS}"
					;;
			esac
			;;
		*|gnu)
			TOOLCHAIN_CC=${HARCH}-gcc
			TOOLCHAIN_CXX=${HARCH}-g++
			TOOLCHAIN_CPP=${HARCH}-cpp
			TOOLCHAIN_FC=${HARCH}-gfortran
			TOOLCHAIN_F90=${HARCH}-gfortran
			TOOLCHAIN_AR=${HARCH}-gcc-ar
			TOOLCHAIN_AS=${HARCH}-as
			TOOLCHAIN_NM=${HARCH}-gcc-nm
			TOOLCHAIN_RANLIB=${HARCH}-gcc-ranlib
			TOOLCHAIN_STRIP=${HARCH}-strip
			TOOLCHAIN_OBJCOPY=${HARCH}-objcopy
			TOOLCHAIN_OBJDUMP=${HARCH}-objdump
			TOOLCHAIN_READELF=${HARCH}-readelf
			TOOLCHAIN_LD=${HARCH}-${TOOLCHAIN_LD:-ld.gold}
			if [ ${PKG_FAULTYCFLAGS:-0} -eq 1 ]
			then
				TOOLCHAIN_COMPFLAGS="${GNU_EXTRAGCCFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="${SYSROOT_FLAGS}"
		
			else
				TOOLCHAIN_COMPFLAGS="${SYSROOT_FLAGS} ${GNU_EXTRAGCCFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD=""
			fi
			TOOLCHAIN_LDFLAGS="${SYSROOT_FLAGS} -fuse-ld=$(echo ${TOOLCHAIN_LD} | cut -d. -f2) ${GNU_EXTRALDFLAGS}"
			[ ${TOOLCHAIN_LD} == ld.gold ] && TOOLCHAIN_LDFLAGS+=" -Wl,--threads -Wl,--thread-count,${NPROCS}" || true
			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|fat)
					OPTCOMP_FLAGS+=" -flto=${NPROCS}"
					OPTLINK_FLAGS+=" -fuse-linker-plugin"
					;;
				2|thin)
					OPTCOMP_FLAGS+=" -flto=${NPROCS}"
					OPTLINK_FLAGS+=" -fuse-linker-plugin"
					;;
			esac
			;;
	esac
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
}

function create_environment_source () {
	settcenv
	cat <<-EOF > environment.source
		#################################################################################
		###### ${PKG_NAME}
		### Source file with all the environment specified
		### Tool chain: ${TOOLCHAIN}
		### C Wrapper: ${CCWRAPPER}
		### Build type: ${BUILD_PROCESS}
		###### Other environment variables:
		### DISTOS_PATH=${DISTOS_PATH}
		### BIN_PATH=${BIN_PATH}
		### PKG_SRCDIR=${PKG_SRCDIR}
		### PKG_BLDDIR=${PKG_BLDDIR}
		#################################################################################

		export CC='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CXX='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CXX}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CPP='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CPP}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export FC='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_FC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export F90='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_F90}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export AR='${TOOLCHAIN_AR}'
		export AS='${TOOLCHAIN_AS}'
		export NM='${TOOLCHAIN_NM}'
		export RANLIB='${TOOLCHAIN_RANLIB}'
		export STRIP='${TOOLCHAIN_STRIP}'
		export OBJCOPY='${TOOLCHAIN_OBJCOPY}'
		export OBJDUMP='${TOOLCHAIN_OBJDUMP}'
		export READELF='${TOOLCHAIN_READELF}'
		export LD='${TOOLCHAIN_LD}'
		export CFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}'
		export CXXFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}'
		export CPPFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CPPFLAGS} ${PKG_CPPFLAGS}'
		export FFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
		export F90FLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
		export LDFLAGS='${TOOLCHAIN_LDFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}'
		export PKG_CONFIG=${HARCH}-pkg-config
		export PKG_CONFIG_LIBDIR=${PKG_CONFIG_LIBDIR}
		export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR}
		export PKG_CONFIG_ALLOW_CROSS=${PKG_CONFIG_ALLOW_CROSS}
		export LD_LIBRARY_PATH+=:${LD_LIBRARY_PATH}
		export PATH='${PATH}'
	EOF
}

function crossapt () {
	if [ ! -d ${CACHE_PATH}/apt/state ]
	then
		mkdir -pv ${CACHE_PATH}/apt/state
	fi
	if [ ! -d ${CACHE_PATH}/dpkg ]
	then
		mkdir -pv ${CACHE_PATH}/dpkg
	fi
	if [ ! -f ${CACHE_PATH}/status ]
	then
		touch -v ${CACHE_PATH}/status
	fi
	echo "Updating apt..."
	apt \
		-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
		-o Dir::Cache="${CACHE_PATH}/apt" \
		-o Dir::State="${CACHE_PATH}/apt/state" \
		-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
		-o APT::Sandbox::User="$(whoami)" \
		update
	echo "Done"
	echo running "apt ${@}"
	apt \
		-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
		-o Dir::Cache="${CACHE_PATH}/apt" \
		-o Dir::State="${CACHE_PATH}/apt/state" \
		-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
		-o APT::Sandbox::User="$(whoami)" \
		${@}
	echo "Done"
	echo
}

function build () (
	function downloadsources () {
		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR SIGINT; \
			return ${STATUS};' ERR	
		trap 'set +x; \
			trap - ERR SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		set -x
		if [ ! -z ${PKG_URL} ]
		then
			if [ ${MAKEDIR:-0} -eq 1 ]
			then
				STRIPCOMPONENTS=0 download_uncompress "${PKG_URL}" ${PKG_SRCPATH}
			else
				download_uncompress "${PKG_URL}" ${PKG_SRCPATH}
			fi
		else
			if [ ! -z ${GIT_URL} ]
			then
				if [ ! -d ${PKG_SRCPATH} ]
				then
					git clone --recursive ${GIT_URL} ${PKG_SRCPATH}
					if  [ ! -z ${GIT_COMMIT} ]
					then
						git -C ${PKG_SRCPATH} checkout ${GIT_COMMIT}
					fi
					#git -C ${PKG_SRCPATH} submodule update --init --recursive
				fi
			fi
		fi
		set +x
		trap - ERR
		trap - SIGINT
	}

	function preparesources () {
		trap 'STATUS=${?}; \
			echo "Fail."; \
			set +x; \
			trap - ERR SIGINT; \
			#[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true; \
			return ${STATUS};' ERR

		trap 'set +x; \
			trap - ERR SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		cd ${PKG_SRCPATH}
		if [ "x${PATCHDEB}" != "x" ]
		then
			echo -n "${SPACES}Retrieve DEB patch info..."
			[ ! -d ${PKG_SRCPATH}/debian ] && mkdir -p ${PKG_SRCPATH}/debian
			ARCHIVEDIRS="debian" download_uncompress "${PATCHDEB}" ${PKG_SRCPATH}/debian >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			if [ -f ${PKG_SRCPATH}/debian/patches/series ]
			then
				while read patch
				do
					if [[ ! "${patch}" =~ ^\#.*|^//.* ]]
					then
						local PATCHARRAY=(${patch})
						if [ ! -z ${PATCHARRAY[0]} ]
						then
							echo -n "${SPACES}Applying ${PATCHARRAY[0]} patch..."
							patch ${PATCHARRAY[1]:--p1} < ${PKG_SRCPATH}/debian/patches/${PATCHARRAY[0]} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
							echo "Done."
						fi
					fi
				done <${PKG_SRCPATH}/debian/patches/series
			else
				echo "${SPACES}\"series\" patch list file does not exist."
			fi
		fi
		for scanpatch in ${PATCHES:-}
		do
			if [[ ${scanpatch} =~ ^https?://|^ftp:// ]]
			then
				echo -n "${SPACES}Downloading $scanpatch patch[set]..."	
				download_uncompress ${scanpatch} ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			else
				echo -n "${SPACES}Copying $scanpatch patch..."
				cp -v ${PATCH_PATH}/$scanpatch ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			fi
			find ${PKG_SRCPATH}/bbxb_patches -type f | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
				echo -n 'Applying {} patch...'
				patch -f -p1 < \"{}\" >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
				echo "Done."
			"
		done
		if [ -f "${PKG_SRCPATH}/${CONF_CMD}" ] && [ ! -x "${PKG_SRCPATH}/${CONF_CMD}" ]
		then
			chmod +x ${PKG_SRCPATH}/${CONF_CMD}
		fi
		echo -n "${SPACES}"
		cd ${BB_HOME}
		trap - ERR
		trap - SIGINT
	}

	function downloadonly () {
		return 0
	}

	function configmake () {
		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR; \
			return ${STATUS};' ERR
		set -x
		if [ ${AUTOCONF:-1} -eq 1 ]
		then
			echo -n "${SPACES}AutoReconf ${PKG_NAME}..."
			cd ${PKG_SRCPATH}/${AUTOCONF_PATH}
			[ -d m4 ] && local ACINCLUDE="-Im4" || mkdir m4
			[ -d ${DISTOS_PATH}${BUILD_PREFIX}/share/aclocal ] && local ACINCLUDE+=" -I${DISTOS_PATH}${BUILD_PREFIX}/share/aclocal"
			[ -d ${BIN_PATH}${BUILD_PREFIX}/share/aclocal ] && local ACINCLUDE+=" -I${BIN_PATH}${BUILD_PREFIX}/share/aclocal"
			autoreconf -fi ${ACINCLUDE} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			local STATUS=${?}
			if [ ${STATUS} -ne 0 ]
			then
				echo "Fail."
				set +x
				return ${STATUS}
			fi
			echo "Done." || echo "Fail."
		fi
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		echo -e "${CONF_CONFIGPARMS}" > configparms
		if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
		then
			CONF_FLAGS="--prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --libexecdir=${BUILD_LIBDIR} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} \
				--with-systemdsystemunitdir=${BUILD_SYSTEMDDIR} --with-systemduserunitdir=${BUILD_USERSYSTEMDDIR} --localstatedir=${BUILD_LOCALSTATEDIR} ${CONF_FLAGS}"
			CONF_FLAGS="--build=${BARCH} --host=${HARCH} --with-sysroot=${BIN_PATH} ${CONF_FLAGS}"
			if [ ${BUILD_LIBSHARED} -eq 1 ]
			then
				CONF_FLAGS=" --enable-shared ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-shared ${CONF_FLAGS}"
			fi
			if [ ${BUILD_LIBSTATIC} -eq 1 ]
			then
				CONF_FLAGS=" --enable-static ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-static ${CONF_FLAGS}"
			fi
		fi
		create_environment_source
		source environment.source

		eval "${PKG_SRCPATH}${CONF_PATH:+/${CONF_PATH}}/${CONF_CMD:-configure} ${CONF_FLAGS}"
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}
			done
		fi
		make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${INST_CMD:-}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function simplemake () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		create_environment_source
		source environment.source
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				echo "Making ${target}..."
				eval "make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}"
			done
		fi
		eval "make ${PKG_MAKEVARS} PREFIX=${BUILD_PREFIX} LIBSUFFIX=${BUILD_LIBSUFFIX} DESTDIR=${PKG_PKGPATH} V=${MAKEVERBOSE:-0} ${INST_CMD:-install}"
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cmakebuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=OFF"
		fi
		if [ ${BUILD_LIBSTATIC} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=OFF"
		fi
		create_environment_source
		source environment.source
		cmake ${PKG_SRCPATH} \
			-G Ninja \
			-DCMAKE_BUILD_TYPE="Release" \
			-DTOOLCHAIN_PREFIX=${HARCH}- \
			-DCMAKE_CROSSCOMPILING="TRUE" \
			-DCMAKE_INSTALL_PREFIX=${BUILD_PREFIX} \
			-D${VAR_INSTALL_LIBDIR:-"LIB_INSTALL_DIR"}=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_LIBSUFFIX:-"LIB_SUFFIX"}=${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_INCDIR:-"INCLUDE_INSTALL_DIR"}=${BUILD_INCLUDEDIR} \
			-D${VAR_INSTALL_CONFDIR:-"SYSCONF_INSTALL_DIR"}=${BUILD_SYSCONFDIR} \
			${CONF_FLAGS}
		local NINJA_FLAGS="-j${NPROCS}$([ $MAKEVERBOSE -eq 1 ] && echo -n ' -v')"
		ninja ${NINJA_FLAGS} ${PKG_MAKEVARS}
		DESTDIR=${PKG_PKGPATH} ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} ${INST_CMD:-install}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function mesonninja () {
		function createmesoncross () {	
			function buildmesonargs () {
				local FIRST=1
				for flag in ${1}
				do
					if [ ${FIRST} -ne 1 ]
					then
						echo -n ", "
					fi
					echo -n "'${flag}'"
				local FIRST=0
				done
				echo
			}
			set +x
			if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
			then
				CONF_FLAGS+=" --prefix=${BUILD_PREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR}"
				if [ ${BUILD_LIBSHARED} -eq 0 ] && [ ${BUILD_LIBSTATIC} -eq 1 ]
				then
					CONF_FLAGS+=" --default-library=static"
				fi
				if [ ${BUILD_LIBSHARED} -eq 1 ] && [ ${BUILD_LIBSTATIC} -eq 0 ]
				then
					CONF_FLAGS+=" --default-library=shared"
				fi
			fi
			local C=$(buildmesonargs "${CC}")
			local C_ARGS=$(buildmesonargs "${CFLAGS}")
			local CPP=$(buildmesonargs "${CXX}")
			local CPP_ARGS=$(buildmesonargs "${CXXFLAGS}")
			local FORTRAN=$(buildmesonargs "${FC}")
			local FORTRAN_ARGS=$(buildmesonargs "${FFLAGS}")
			local C_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local CPP_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local FORTRAN_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			cat > cross-${PLATFORM_NAME} <<-EOF
				[binaries]
				c = [${C}]
				c_ld = '$(echo ${LD} | sed "s/ld.//;s/${HARCH}-//" )'
				cpp = [${CPP}]
				cpp_ld = '$(echo ${LD} | sed "s/ld.//;s/${HARCH}-//" )'
				fortran = [${FORTRAN}]
				ar = '${AR}'
				strip = '${STRIP}'
				nm = '${NM}'
				ranlib = '${RANLIB}'
				pkgconfig = '${PKG_CONFIG}'

				[host_machine]
				system = '${HOS}'
				cpu_family = '${HM}'
				cpu = '${HMCPU}'
				endian = '${HMENDIAN}'

				[properties]
				c_args = [${C_ARGS}]
				cpp_args = [${CPP_ARGS}]
				fortran_args= [${FORTRAN_ARGS}]
				c_link_args = [${C_LINK_ARGS}]
				cpp_link_args = [${CPP_LINK_ARGS}]
				fortran_link_args = [${FORTRAN_LINK_ARGS}]
			EOF
			set -x
		}

		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x

		mkdir -p ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		create_environment_source
		source environment.source
		createmesoncross
		meson ${PKG_SRCPATH} ${PKG_BLDPATH} -Dbuildtype=release -Db_ndebug=true --cross-file cross-${PLATFORM_NAME} \
			--prefix=${BUILD_PREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			--includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR} \
			${CONF_FLAGS}
		local NINJA_FLAGS="-j${NPROCS}$([ $MAKEVERBOSE -eq 1 ] && echo -n ' -v')"
		ninja ${NINJA_FLAGS} ${PKG_MAKEVARS}
		DESTDIR=${PKG_PKGPATH} ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} ${INST_CMD:-install}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cargobuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
	
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		settcenv
		local CARGO_BIN=${CARGO_BIN:-${BUILD_EXECPREFIX}/bin}
		local CARGO_LIB=${CARGO_LIB:-${BUILD_LIBDIR}${BUILD_LIBSUFFIX}}
		local CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
		export CARGO_PROFILE_RELEASE_OPT_LEVEL=${OPTLEVEL}
		case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
			1|fat) export CARGO_PROFILE_RELEASE_LTO=fat
				;;
			2|thin)	export CARGO_PROFILE_RELEASE_LTO=thin
				;;
		esac
		for param in $(echo ${TOOLCHAIN_EXTRA_C_CMD} ${SYSROOT_FLAGS} ${STRIP_FLAG} ${OPTLINK_FLAGS} ${COMMON_LDFLAGS} ${TOOLCHAIN_LDFLAGS} ${PKG_LDFLAGS})
		do
			export RUSTFLAGS+=" -C link-arg=${param}"
		done
		export RUSTFLAGS+=" ${PLATFORM_RUSTSYSROOT} ${PLATFORM_RUSTFLAGS} ${OPTCOMP_RUSTFLAGS} -C linker=${TOOLCHAIN_CC}"
		echo ${RUSTFLAGS}
		PKG_CONFIG=${HARCH}-pkg-config \
			cargo build --verbose --release ${CONF_FLAGS} --target=${CARGO_TARGET}
		for file in ${CARGO_BINLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_BIN} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_BIN}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_BIN}/${file}
		done
		for file in ${CARGO_LIBLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_LIB} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_LIB}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_LIB}/${file}
		done
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function kernelbuild () {
		function make4kern () {
			env
			set -x
			case ${TOOLCHAIN} in
				gnu)
					local HOSTCC=gcc
					local HOSTCXX=g++
					local HOSTAR=gcc-ar
					local HOSTLD=ld.bfd
					;;
				llvm)
					if clang -v 2>&1 > /dev/null && ld.lld -v 2>&1
					then
						local HOSTCC=clang
						local HOSTCXX=clang++
						local HOSTAR=llvm-ar
						local HOSTLD=ld.lld
					else
						local HOSTCC=gcc
						local HOSTCXX=g++
						local HOSTAR=gcc-ar
						local HOSTLD=ld.bfd
					fi
					;;
			esac
			KBUILD_BUILD_TIMESTAMP='' make V=${MAKEVERBOSE:-0} \
			CC="${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CC}" \
			LD="$([ ${TOOLCHAIN_LD} == ${HARCH}-ld.gold ] && echo ${HARCH}-ld.bfd || echo ${TOOLCHAIN_LD})" \
			AS="${TOOLCHAIN_AS}" \
			NM="${TOOLCHAIN_NM}" \
			AR="${TOOLCHAIN_AR}" \
			OBJCOPY="${TOOLCHAIN_OBJCOPY}" \
			OBJDUMP="${TOOLCHAIN_OBJDUMP}" \
			READELF="${TOOLCHAIN_READELF}" \
			STRIP="${TOOLCHAIN_STRIP}" \
			KCFLAGS="${LLVM_KERNELPOLLYFLAGS}${PKG_CFLAGS:+ ${PKG_CFLAGS}}" \
			KBUILD_LDFLAGS="${KERN_OPTLINK_FLAGS}${PKG_LDFLAGS:+ ${PKG_LDFLAGS}}" \
			ARCH=${KERN_ARCH} \
			CROSS_COMPILE=${HARCH}- \
			HOSTCC="${CCWRAPPER:+${CCWRAPPER} }${HOSTCC}" \
			HOSTCXX="${CCWRAPPER:+${CCWRAPPER} }${HOSTCXX}" \
			HOSTAR=${HOSTAR} \
			HOSTLD=${HOSTLD} \
			LLVM_IAS=0 \
			EXTRAVERSION=${KERN_EXTRAVERSION} \
			${EXTRA_PARMS} \
			${@} ${PKG_MAKEVARS}
			local STATUS=${?}
			set x
			return ${STATUS}
		}
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		unset PKG_CONFIG_LIBDIR
		unset PKG_CONFIG_SYSROOT_DIR
		echo "Kernel headers only: ${KERN_HDRS_ONLY:-1}"
		if [ ${KERN_HDRS_ONLY:-0} -eq 1 ]
		then
			TOOLCHAIN_CC=gcc
			TOOLCHAIN_AR=ar
			TOOLCHAIN_AS=as
			TOOLCHAIN_NM=nm
			TOOLCHAIN_RANLIB=ranlib
			TOOLCHAIN_STRIP=strip
			TOOLCHAIN_OBJCOPY=objcopy
			TOOLCHAIN_OBJDUMP=objdump
			TOOLCHAIN_READELF=readelf
			TOOLCHAIN_LD=ld.bfd
		else
			settcenv
		fi

		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		KERN_VER=$(make kernelversion)

		# Config kernel build
		make4kern ${KERN_DEFCONFIG} .config

		case ${KERN_OPTLEVEL:-null} in
			s|S)	scripts/config -e CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			2)	scripts/config -d CC_OPTIMIZE_FOR_SIZE -e CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			3)	# Patch kernel to build with -O3 flag
				sed -i '/depends on ARC$/d' init/Kconfig
				scripts/config -d CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
		esac

		if [ "x${CONF_FLAGS}" != "x" ]
		then
			scripts/config ${CONF_FLAGS}
		fi

		if [ ${TOOLCHAIN} == llvm ]
		then
			echo "LTO type: ${KERN_LTOENABLE}"
			case x${KERN_LTOENABLE} in
				x1|xlto)
					scripts/config -d FTRACE -d KASAN -d GCOV_KERNEL
					scripts/config -e LTO_CLANG
					;;
				x2|xthin)
					scripts/config -d FTRACE -d KASAN -d GCOV_KERNEL
					scripts/config -e LTO_CLANG_THIN
					;;
			esac
		fi

		make4kern olddefconfig
	
		if [ ! -d ${PKG_PKGPATH}/boot ]
		then
			mkdir -p ${PKG_PKGPATH}/boot
		fi

		# Install headers
		make4kern INSTALL_HDR_PATH=${PKG_PKGPATH}${BUILD_PREFIX} headers_install 

		# Break if only headers installation required
		if [ ${KERN_HDRS_ONLY:-0} -eq 1 ]
		then
			set +x
			trap - ERR
			return
		fi

		# Build and install kernel
		make4kern ${KERN_IMAGE}
		case ${KERN_NAME}
		in
			kernel*)
				cp arch/${KERN_ARCH}/boot/${KERN_IMAGE} ${PKG_PKGPATH}/boot/${KERN_NAME}
				local STATUS=${?}
				;;
			*)
				[ ! -d ${PKG_PKGPATH}/boot ] && mkdir ${PKG_PKGPATH}/boot
				make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_PATH=${PKG_PKGPATH}/boot ${INST_CMD} install
				;;
		esac

		# Build and install modules
		make4kern modules
		make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_MOD_PATH=${PKG_PKGPATH} ${INST_CMD} modules_install
		local KERNELRELEASE=$(cat include/config/kernel.release)
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/build
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/source

		# Build and install DTBS
		if [ ${KERN_DTBS:-0} -eq 1 ] && [ ${STATUS} -eq 0 ]
		then
			if [ ! -d ${PKG_PKGPATH}/boot/overlays ]
			then
				mkdir -p ${PKG_PKGPATH}/boot/overlays
			fi
			make4kern dtbs
			make ${KERN_ARCH:+ARCH=${KERN_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_DTBS_PATH=${PKG_PKGPATH}/boot ${INST_CMD} dtbs_install
		fi
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		local INSTALL_TARGET="--install-lib=${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		PYTHONPATH=${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=:${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}
			fi
			export PYTHONPATH
		done
		create_environment_source
		source environment.source
		cross-python -m site
		eval '${PKG_BUILDVARS} cross-python setup.py build -j${NPROCS} ${CONF_FLAGS}'
		eval '${PKG_BUILDVARS} cross-python setup.py install --root=${PKG_PKGPATH} --prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} \
			${INSTALL_TARGET}'
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonpip () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		mkdir -pv ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		PYTHONPATH="${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=":${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}"
			fi
		done
		#PYTHONUSERBASE="${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		#export PYTHONUSERBASE
		export PYTHONPATH
		create_environment_source
		source environment.source
		cross-python -m site
		if [ ${PKG_PYTHONBUILD:-1} -eq 1 ]
		then
			local PYTHONBUILD="--no-binary :all:"
		fi
		#build-python -m pip ${VERBOSE} install --upgrade ${PKG_NAME}
		cross-python -m pip ${VERBOSE} install -I ${PYTHONBUILD} --root ${PKG_PKGPATH} --prefix=${BUILD_PREFIX} ${PKG_NAME}
		if [ ${PYTHON_PKGDIR} == dist-packages ]
		then
			mv ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/site-packages ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/dist-packages
		fi
		cd ${BB_HOME}
		set +x
		trap - ERR
	}
	
	function boostbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE} -eq 1 ]
		then
			local B2_FLAGS="-d+2"
		else
			local B2_FLAGS="-d+1"
		fi
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			local B2_FLAGS="${B2_FLAGS} link=shared runtime-link=shared"
		else
			local B2_FLAGS="${B2_FLAGS} link=static runtime-link=static"
		fi
		case ${HM} in
			arm)
				local HMABI=aapcs
				local HMADDRMOD=32
				;;
			aarch64)
				local HMABI=aapcs
				local HMADDRMOD=64
				;;
			i386|ppc32)
				local HMABI=sysv
				local HMADDRMOD=32
				;;
			x86_64|ppc64)
				local HMABI=sysv
				local HMADDRMOD=64
				;;
			mips1)
				local HMABI=o32
				local HMADDRMOD=32
				;;
		esac
		case ${HOS} in
			linux|android) local HMBINFMT=elf;;
			windows) local HMBINFMT=pe;;
			macosx|ios) local HMBINFMT=mach-o;;
		esac
		case ${TOOLCHAIN} in
			llvm) local BBTC=clang;;
			gnu) local BBTC=gcc;;
		esac
		create_environment_source
		source environment.source
		
		./bootstrap.sh \
			--prefix=${PKG_PKGPATH}${BUILD_PREFIX} \
			--exec-prefix=${PKG_PKGPATH}${BUILD_EXECPREFIX} \
			--libdir=${PKG_PKGPATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			--includedir=${PKG_PKGPATH}${BUILD_INCLUDEDIR} \
			--with-python-version=${PYTHONBIN_VER} \
			--with-toolset=${BBTC}
		sed -i "s|using ${BBTC} ;|using ${BBTC} : : ${CXX} ;|" project-config.jam &&
		./b2 -j${NPROCS} -q ${B2_FLAGS} \
			architecture=${HM} binary-format=${HMBINFMT} abi=${HMABI} target-os=${HOS} \
			variant=release address-model=${HMADDRMOD} threading=multi \
			toolset=${BBTC} cflags="${CFLAGS}" cxxflags="-fPIC ${CXXFLAGS}" linkflags="${LDFLAGS}" install
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function builddebpkg () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		cd $(find ${PKG_BLDPATH} -mindepth 1 -maxdepth 1 -type d)
		run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get update"
		run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get -y build-dep ${PKG_NAME}"
		set -x
		case ${HM} in
			arm) [ "${HMFLOATABI}" == "hard" ] && local DEBARCH=armhf || local DEBARCH=arm
			;;
			aarch64) DEBARCH=arm64
			;;
			*) local DEBARCH=${HM}
			;;
		esac
		create_environment_source
		source environment.source
		DPKG_ROOT=${DISTOS_PATH} \
		CONFIG_SITE=${DISTOS_PATH}/etc/dpkg \
		LD_LIBRARY_PATH+=:${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
		DEB_BUILD_OPTIONS="nocheck noddebs" \
		DH_OPTIONS="-v --dpkg-shlibdeps-params=--ignore-missing-info" \
		dpkg-buildpackage \
			--host-arch=${DEBARCH} \
			--host-type=${HARCH} \
			--target-arch=${DEBARCH} \
			--target-type=${HARCH} \
			-d -b -uc -us \
			-Pcross,nocheck \
			--admindir=${DISTOS_PATH}/var/lib/dpkg
		cd ..
		cp -v *.deb ${PKG_PKGPATH}
		set +x
		echo "Done"
		trap - ERR
	}


	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/${PKG_NAME}.log ]; \
		then \
			echo "Log ${LOG_PATH}/${PKG_NAME}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/${PKG_NAME}.log; \
		fi; \
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	unset PKG_URL \
		GIT_URL \
		GIT_COMMIT \
		BUILD_PROCESS \
		STD_CONF_FLAGS \
		CONF_CMD \
		CONF_FLAGS \
		CONF_PATH \
		CONF_CONFIGPARMS \
		INST_CMD \
		MAKEDIR \
		AUTOCONF \
		AUTOCONF_PATH \
		PATCHDEB \
		PATCHES \
		PKG_NAME \
		PKG_SUFFIX \
		PKG_SRCDIR \
		PKG_DEPS \
		PKG_COPYSRC \
		PKG_FAULTYCFLAGS \
		PKG_CFLAGS \
		PKG_CXXFLAGS \
		PKG_FCFLAGS \
		PKG_LDFLAGS \
		PKG_RUSTFLAGS \
		PKG_LLVMPOLLYFEATURES \
		PKG_MAKETARGETS \
		PKG_MAKEVARS \
		PKG_OVERRIDELTO \
		PKG_PREBUILD \
		PKG_POSTBUILD \
		PKG_TWOSTEPSBUILD \
		VAR_INSTALL_LIBDIR \
		VAR_INSTALL_LIBSUFFIX \
		VAR_INSTALL_INCDIR \
		VAR_INSTALL_CONFDIR \
		CARGO_BIN \
		CARGO_LIB \
		CARGO_BINLIST \
		CARGO_LIBLIST

	OPTS="--force --no_gcc_check --no_save_status" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	if [ -z "${NUMSPACES}" ]
	then
		local NUMSPACES=0
	fi
	
	if [ ! -f ${PKG_PATH}/${_param_1}.pkg ]
	then
		echo "Package ${_param_1} does not exists."
		echo
		return 1
	fi
	
	local PKG_NAME=$(basename ${_param_1})\${PKG_SUFFIX}
	local PKG_SRCDIR=${PKG_SRCDIR:-${PKG_NAME}}
	local PKG_BLDPATH=${BLD_PATH}/${PKG_NAME}
	local PKG_PKGPATH=${PACKAGES_PATH}/${PKG_NAME}

	source ${PKG_PATH}/${_param_1}.pkg

	setbuildenv

	eval local PKG_NAME=${PKG_NAME}
	eval local PKG_SRCPATH=${SRC_PATH}/${PKG_SRCDIR}
	eval local PKG_BLDPATH=${PKG_BLDPATH}
	eval local PKG_PKGPATH=${PKG_PKGPATH}

	export PKG_CONFIG_LIBDIR=${COMMON_PKG_CONFIG_LIBDIR}
	export PKG_CONFIG_SYSROOT_DIR=${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}

	echo "Package ${PKG_NAME}"

	if [ ${DEBUG:-0} -gt 0 ]
	then
		echo
		echo "PKG_SRCPATH: ${PKG_SRCPATH}"
		echo "PKG_BLDPATH: ${PKG_BLDPATH}"
		echo "PKG_PKGPATH: ${PKG_PKGPATH}"
		echo
	fi

	for deps in ${PKG_DEPS}
	do
		local NUMSPACES=$((NUMSPACES+1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
		echo -n "${SPACES}Requires "
		#echo "Called from ${_param_1}"
		build ${deps}
		local NUMSPACES=$((NUMSPACES-1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
	done


	if [ -f ${STATUS_PATH}/${PKG_NAME} ] && [ ${_param_force:-0} -eq 0 ]
	then
		if [ "$(md5sum ${PKG_PATH}/${_param_1}.pkg)" == "$(cat ${STATUS_PATH}/${PKG_NAME})" ]
		then
			echo "${SPACES}Package ${PKG_NAME} already built."
			echo
			return 0
		else
			rm -f ${STATUS_PATH}/${PKG_NAME}
		fi
	fi

	eval "> ${LOG_PATH}/${PKG_NAME}.log"
	
	if [ ${_param_no_gcc_check:-0} -eq 0 ] && [ "${BUILD_PROCESS}" != "none" ] && [ "${BUILD_PROCESS}" != "downloadonly" ]
	then
		check_${TOOLCHAIN}_c
	fi

	if [ ${TOOLCHAIN} == llvm ]
	then
		if [ -z "${PKG_LLVMPOLLYFEATURES}" ]
		then
			setllvmpollyenv ${LLVM_POLLY_FEATURES}
		else
			eval "echo 'Override LLVM Polly features: ${PKG_LLVMPOLLYFEATURES}' >> ${LOG_PATH}/${PKG_NAME}.log"
			setllvmpollyenv ${PKG_LLVMPOLLYFEATURES}
		fi
	fi

	echo -n "${SPACES}"
	# Build defaults
	### To manage source path removal at beginning or at the end...
	#if [ -d ${PKG_SRCPATH} ]
	#then
	#	rm -rf ${PKG_SRCPATH}
	#fi
	if [ ! -d ${BLD_PATH} ]
	then
		mkdir -p ${BLD_PATH}
	fi
	if [ ! -d ${BIN_PATH} ]
	then
		mkdir -p ${BIN_PATH}
	fi
	case x${BUILD_PROCESS} in
	xpythonpip)
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			(eval "trap 'exit 1' ERR; set -x && ${PKG_PREBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME}..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! -z "${PKG_POSTBUILD}" ]
		then
			(eval "trap 'exit 1' ERR; set -x && ${PKG_POSTBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	xbuilddebpkg)
		if [ ! -d ${CACHE_PATH}/apt/state ]
		then
			mkdir -pv ${CACHE_PATH}/apt/state
		fi
		if [ ! -d ${CACHE_PATH}/dpkg ]
		then
			mkdir -pv ${CACHE_PATH}/dpkg
		fi
		if [ ! -f ${CACHE_PATH}/dpkg/status ]
		then
			touch ${CACHE_PATH}/dpkg/status
		fi
		if [ ! -d ${CACHE_PATH}/apt/conf ]
		then
			mkdir -pv ${CACHE_PATH}/apt/conf
		fi
		mkdir -p ${PKG_SRCPATH}
		cd ${PKG_SRCPATH}
		echo -n "Downloading ${PKG_NAME}..."
		(
		run_on_root_dir distos root "for file in $( find /etc/apt/sources.list.d -type f ) /etc/apt/sources.list; do \
			sed -i 's/^#deb-src/deb-src/g' \${file}; done"
		apt-get \
			-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
			-o Dir::Cache="${CACHE_PATH}/apt" \
			-o Dir::State="${CACHE_PATH}/apt/state" \
			-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
			-o APT::Sandbox::User="$(whoami)" \
			update
		apt-get \
			-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
			-o Dir::Cache="${CACHE_PATH}/apt" \
			-o Dir::State="${CACHE_PATH}/apt/state" \
			-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
			-o APT::Sandbox::User="$(whoami)" \
			-o Binary::apt::APT::Keep-Downloaded-Packages="1" \
			source ${PKG_NAME}
		) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		mkdir -pv ${PKG_PKGPATH}
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			(
			trap 'exit 1' ERR
			set -x
			cd $(find ${PKG_SRCPATH} -mindepth 1 -maxdepth 1 -type d)
			eval "${PKG_PREBUILD}" 2>&1
			set +x
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ -d ${PKG_BLDPATH} ]
		then
			rm -rf ${PKG_BLDPATH}
		fi
		cp -R ${PKG_SRCPATH} ${PKG_BLDPATH} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		echo -n "Building ${PKG_NAME}..."
		${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		;;
	x*)
		if [ ! -z ${PKG_URL} ] || [ ! -z ${GIT_URL} ]
		then
			echo -n "Downloading ${PKG_NAME}..."
			downloadsources >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			preparesources
		fi
		if [ -d ${PKG_BLDPATH} ]
		then
			rm -rf ${PKG_BLDPATH}
		fi
		if [ -d ${PKG_PKGPATH} ]
		then
			sudo rm -rf ${PKG_PKGPATH}
		fi
		mkdir -p ${PKG_PKGPATH}
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			cd ${PKG_SRCPATH}
			(eval "trap 'exit 1' ERR; set -x && ${PKG_PREBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ${PKG_COPYSRC:-0} -eq 1 ] 
		then
			cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME}..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! -z "${PKG_POSTBUILD}" ]
		then
			if [ ! -d ${PKG_BLDPATH} ]
			then
				mkdir -p ${PKG_BLDPATH}
			fi
			cd ${PKG_BLDPATH}
			(eval "trap 'exit 1' ERR; set -x && ${PKG_POSTBUILD} 2>&1 && set +x") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	esac
	if [ ! -d ${STATUS_PATH} ]
	then
		mkdir -p ${STATUS_PATH}
	fi
	#rm -rf ${PKG_SRCPATH} &&
	case x${BUILD_PROCESS} in
	xbuilddebpkg)
			(
				set -ex
				pwd
				if [ ${_param_no_save_status:-0} -eq 0 ]
				then
					tar cJfp ${PKG_PKGPATH}.tar.xz --owner=0 --group=0 -C ${PKG_PKGPATH} .
				fi
				sudo rm -rf ${PKG_PKGPATH}
				set +ex
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			if [ ${KEEP_BUILDDIR:-0} -eq 0 ]
			then
				rm -rf ${PKG_BLDPATH}
			fi
		;;
		*)
			(
				set -ex
				pwd
				if [ ${_param_no_save_status:-0} -eq 0 ]
				then
					tar cJfp ${PKG_PKGPATH}.tar.xz --owner=0 --group=0 -C ${PKG_PKGPATH} .
				fi
				rsync -aKv ${PKG_PKGPATH}/ ${BIN_PATH}
				sudo rm -rf ${PKG_PKGPATH}
				set +ex
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			if [ ${KEEP_BUILDDIR:-0} -eq 0 ]
			then
				rm -rf ${PKG_BLDPATH}
			fi
		;;
	esac
	if [ ${_param_no_save_status:-0} -eq 0 ]
	then
		md5sum ${PKG_PATH}/${_param_1}.pkg > ${STATUS_PATH}/${PKG_NAME}
	fi
	set +x
	echo "Done."
	echo
	trap - ERR
)

function is_build_functions () {
	return 0
}
