#!/bin/bash

check_core_functions

function check_build_functions () {
	is_core_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Core functions not loaded"
		exit 1
	fi
}

function setbuildenv () {
	if [ ${HARCH} != ${BARCH} ]
	then
		export CROSS_COMPILING=yes
		export PKG_CONFIG_ALLOW_CROSS=1
	fi
	MULTI_ARCH=${MULTIARCH:-1}
	BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
	BUILD_EXECPREFIX="${BUILD_EXECPREFIX:-${BUILD_PREFIX}}"
	BUILD_INCLUDEDIR="${BUILD_INCLUDEDIR:-$(readlink -m ${BUILD_PREFIX}/include)}"
	BUILD_LIBDIR="${BUILD_LIBDIR:-$(readlink -m ${BUILD_EXECPREFIX}/lib)}"
	BUILD_SYSCONFDIR="${BUILD_SYSCONFDIR:-/etc}"
	BUILD_LOCALSTATEDIR="${BUILD_LOCALSTATEDIR:-/var}"
	BUILD_SYSTEMDDIR="${BUILD_SYSTEMDDIR:-/lib/systemd/system}"
	BUILD_USERSYSTEMDDIR="${BUILD_USERSYSTEMDDIR:-${BUILD_PREFIX}/lib/systemd/system}"
	export BUILD_PREFIX BUILD_EXECPREFIX BUILD_INCLUDEDIR BUILD_LIBDIR BUILD_SYSCONFDIR BUILD_LOCALSTATEDIR
	export QEMU_LD_PREFIX="${BIN_PATH}"
	if [ ${MULTI_ARCH} -eq 1 ]
	then
		BUILD_LIBSUFFIX="/${HARCH}"
	fi
	BUILD_LIBSHARED=${BUILD_LIBSHARED:-1}
	BUILD_LIBSTATIC=${BUILD_LIBSTATIC:-1}
	PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
	PLATFORM_RUSTFLAGS="${HMCPU:+-C target-cpu=${HMCPU}}${HMARCH_RUST:+ -C target-feature=${HMARCH_RUST} }"

	case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
#		gnu) local SYSINCLUDE_OPT="-isystem";;
		llvm|*) local SYSINCLUDE_OPT="-I";;
	esac

	COMMON_CFLAGS="${SYSINCLUDE_OPT}${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CXXFLAGS="${SYSINCLUDE_OPT}${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_FCFLAGS="${SYSINCLUDE_OPT}${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_CPPFLAGS="${SYSINCLUDE_OPT}${BIN_PATH}${BUILD_INCLUDEDIR}"
	COMMON_LDFLAGS="-Wl,-rpath-link,${BIN_PATH}/lib${BUILD_LIBSUFFIX} -L${BIN_PATH}/lib${BUILD_LIBSUFFIX}"
	COMMON_LDFLAGS+=" -Wl,-rpath-link,${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -L${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}"
	COMMON_PKG_CONFIG_LIBDIR="${BIN_PATH}/lib${BUILD_LIBSUFFIX}/pkgconfig"
	COMMON_PKG_CONFIG_LIBDIR+=":${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig:${BIN_PATH}${BUILD_PREFIX}/share/pkgconfig"
	COMMON_PKG_CONFIG_SYSROOT="${BIN_PATH}"
	local SYSROOT_GCCVER=
	# Construct build tools flags
	# Build Include search paths
	if [ -d ${DISTOS_PATH}${BUILD_INCLUDEDIR} ]
	then
		COMMON_CFLAGS+=" ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR} ${STD_CFLAGS} ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR}${BUILD_LIBSUFFIX}"
		COMMON_CXXFLAGS+=" ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR} ${STD_CXXFLAGS} ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR}${BUILD_LIBSUFFIX}"
		COMMON_FCFLAGS+=" ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR} ${STD_CXXFLAGS} ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR}${BUILD_LIBSUFFIX}"
		COMMON_CPPFLAGS+=" ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR} ${STD_CPPFLAGS} ${SYSINCLUDE_OPT}${DISTOS_PATH}${BUILD_INCLUDEDIR}${BUILD_LIBSUFFIX}"
		COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}/lib${BUILD_LIBSUFFIX} -L${DISTOS_PATH}/lib${BUILD_LIBSUFFIX}"
		COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -L${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}"
		COMMON_PKG_CONFIG_LIBDIR+=":${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig:${DISTOS_PATH}/usr/share/pkgconfig"
		COMMON_PKG_CONFIG_SYSROOT="${DISTOS_PATH}"
		# Try to find if gcc libraries are installed and not yet defined in binary dir, if so set search path on that path
		if [ "${GCC_SYSROOT}" != "${BIN_PATH}" ]
		then
			local SYSROOT_GCCVER="$(find ${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/ -mindepth 1 -maxdepth 1 -type d -printf '%P\n' | sort -hr | head -n1)"
			if [ -n "${SYSROOT_GCCVER}" ]
			then
				COMMON_CXXFLAGS+=" -I${DISTOS_PATH}${BUILD_INCLUDEDIR}/c++/${SYSROOT_GCCVER} -I${DISTOS_PATH}${BUILD_INCLUDEDIR}/${HARCH}/c++/${SYSROOT_GCCVER}"
				COMMON_CPPFLAGS+=" -I${DISTOS_PATH}${BUILD_INCLUDEDIR}/c++/${SYSROOT_GCCVER} -I${DISTOS_PATH}${BUILD_INCLUDEDIR}/${HARCH}/c++/${SYSROOT_GCCVER}"
				COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER} -L${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
				case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
					gnu)
						local GCC_BINS="$(${HARCH}-gcc -print-search-dirs | grep "^programs" | cut -d '=' -f2 | cut -d ':' -f1)"
						COMMON_CFLAGS+=" -B${GCC_BINS} -B${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -B${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
						COMMON_CXXFLAGS+=" -B${GCC_BINS} -B${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -B${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
						COMMON_LDFLAGS+=" -B${GCC_BINS} -B${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -B${DISTOS_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
						;;
				esac			
			fi
		fi
		# Build LDFLAGS search paths
		#if [ -d ${DISTOS_PATH}/etc/ld.so.conf.d ]
		#then
		#	for entry in ${GCCSEARCHLIBS}
		#	do
		#		COMMON_LDFLAGS+=" -L$entry -Wl,-rpath-link,$entry"
		#	done
		#	for entry in $(cat ${DISTOS_PATH}/etc/ld.so.conf.d/* | grep -v '#' | sort)
		#	do
		#		COMMON_LDFLAGS+=" -L${DISTOS_PATH}$entry -Wl,-rpath-link,${DISTOS_PATH}$entry"
		#	done
		#fi
		SYSROOT="${DISTOS_PATH}"
	else
		SYSROOT="${BIN_PATH}"
	fi
	SYSROOT_FLAGS="--sysroot=${SYSROOT}"
}

function setllvmpollyenv () {
	unset LLVM_EXTRAPOLLYFLAGS
	unset LLVM_KERNELPOLLYFLAGS
	unset LLVM_EXTRAPOLLYFLAGSLIBS
	unset LLVM_KERNELPOLLYFLAGSLIBS

	local OPTIONS="${@}"

	local LIBCLANG_RTBUILTINS="${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
	#if [ ! -z "${OPTIONS}" ] && [ -f ${LIBCLANG_RTBUILTINS} ]

	case x${HMARCH} in
		xarmv*)
				if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
				then
					unset OPTIONS
				fi
			;;
	esac

	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*) local LLVM_ARCH=${HM}
			;;
	esac

	if [ ! -z "${OPTIONS}" ]
	then
		LLVM_EXTRAPOLLYFLAGS="-mllvm -polly"
		#### Missing _mulodi4 symbol, skip polly build for kernel 
		case ${HM} in
			arm)
				# Need to add static rtbuiltins libraries to arm link to avoid missing _mulodi4 symbol
				# but this is not supported in kernel building so we can't set polly for kernel build
				LLVM_EXTRAPOLLYFLAGSLIBS="-Wl,${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
				LLVM_KERNELPOLLYFLAGS=
				;;
			*)
				# Normal behaviour
				LLVM_KERNELPOLLYFLAGS="-mllvm -polly"
				;;
		esac

		if [ "$( echo ${OPTIONS} | grep -o "all" )" == "all" ]
		then
			local OPTIONS="polly vectorizer parallel"
		fi 
		
		for option in ${OPTIONS}
		do
			case ${option} in
				polly)
					;;
				vectorizer)
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					if [ "${HM}" != "arm" ]
					then
						LLVM_KERNELPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					fi
					;;
				parallel)
					# polly-parallel not supported in kernel build because libgomp cannot be statically linked to kernel
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-parallel"
					;;
				*)
					echo "Error: ${option} not recognized"
					return 1
					;;
			esac
		done
	fi
}

function settcenv () {
	unset TOOLCHAIN_CC \
		TOOLCHAIN_CXX \
		TOOLCHAIN_CPP \
		TOOLCHAIN_FC \
		TOOLCHAIN_F90 \
		TOOLCHAIN_AR \
		TOOLCHAIN_AS \
		TOOLCHAIN_NM \
		TOOLCHAIN_RANLIB \
		TOOLCHAIN_STRIP \
		TOOLCHAIN_OBJCOPY \
		TOOLCHAIN_OBJDUMP \
		TOOLCHAIN_READELF \
		TOOLCHAIN_LD \
		TOOLCHAIN_LINKERFLAGS \
		TOOLCHAIN_COMPFLAGS \
		TOOLCHAIN_EXTRA_C_CMD \
		OPTCOMP_FLAGS \
		OPTLINK_FLAGS

	local TOOLCHAIN=${PKG_TOOLCHAIN:-${TOOLCHAIN}}
	echo Toolchain: ${TOOLCHAIN}
	if [ ${TOOLCHAIN} == llvm ]
	then
		if [ -z "${PKG_LLVMPOLLYFEATURES}" ]
		then
			setllvmpollyenv ${LLVM_POLLY_FEATURES}
		else
			eval "echo 'Override LLVM Polly features: ${PKG_LLVMPOLLYFEATURES}' >> ${LOG_PATH}/${PKG_NAME}.log"
			setllvmpollyenv ${PKG_LLVMPOLLYFEATURES}
		fi
	fi
	case ${TOOLCHAIN} in
		gnu)
			TOOLCHAIN_CC=${HARCH}-gcc
			TOOLCHAIN_CXX=${HARCH}-g++
			TOOLCHAIN_CPP=${HARCH}-cpp
			TOOLCHAIN_FC=${HARCH}-gfortran
			TOOLCHAIN_F90=${HARCH}-gfortran
			TOOLCHAIN_AR=${HARCH}-gcc-ar
			TOOLCHAIN_AS=${HARCH}-as
			TOOLCHAIN_NM=${HARCH}-gcc-nm
			TOOLCHAIN_RANLIB=${HARCH}-gcc-ranlib
			TOOLCHAIN_STRIP=${HARCH}-strip
			TOOLCHAIN_OBJCOPY=${HARCH}-objcopy
			TOOLCHAIN_OBJDUMP=${HARCH}-objdump
			TOOLCHAIN_READELF=${HARCH}-readelf
			TOOLCHAIN_LD=${PKG_OVERRIDELD:-${GCC_DEFAULT_LD:-gold}}
			if [ ${PKG_FAULTYCFLAGS:-0} -eq 1 ]
			then
				TOOLCHAIN_COMPFLAGS="${GNU_EXTRAGCCFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="${SYSROOT_FLAGS}"
		
			else
				TOOLCHAIN_COMPFLAGS="${SYSROOT_FLAGS} ${GNU_EXTRAGCCFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD=""
			fi
			TOOLCHAIN_LINKERFLAGS="${SYSROOT_FLAGS} -fuse-ld=${TOOLCHAIN_LD} ${GNU_EXTRALDFLAGS}"
			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|2|fat|thin)
					OPTCOMP_FLAGS+=" -flto=${NPROCS}"
					OPTLINK_FLAGS+=" -fuse-linker-plugin"
					;;
			esac
			;;
		llvm)
			TOOLCHAIN_CC=clang
			TOOLCHAIN_CXX=clang++
			TOOLCHAIN_CPP="clang -E"
			TOOLCHAIN_FC=flang
			TOOLCHAIN_F90=flang
			TOOLCHAIN_AR=llvm-ar
			TOOLCHAIN_AS=llvm-as
			TOOLCHAIN_NM=llvm-nm
			TOOLCHAIN_RANLIB=llvm-ranlib
			TOOLCHAIN_STRIP=llvm-strip
			TOOLCHAIN_OBJCOPY=llvm-objcopy
			TOOLCHAIN_OBJDUMP=llvm-objdump
			TOOLCHAIN_READELF=llvm-readelf
			TOOLCHAIN_LD=${PKG_OVERRIDELD:-${LLVM_DEFAULT_LD:-lld}}
			if [ ${PKG_FAULTYCFLAGS:-0} -eq 1 ]
			then
				TOOLCHAIN_COMPFLAGS="${LLVM_EXTRACLANGFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH} ${SYSROOT_FLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
			else
				TOOLCHAIN_COMPFLAGS="${SYSROOT_FLAGS} ${LLVM_EXTRACLANGFLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
				TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH}"
			fi
			TOOLCHAIN_LINKERFLAGS="${SYSROOT_FLAGS} -fuse-ld=${TOOLCHAIN_LD} -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS}"
			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|fat)
					TOOLCHAIN_COMPFLAGS+=" -flto=full"
					;;
				2|thin)
					TOOLCHAIN_COMPFLAGS+=" -flto=thin"
					;;
			esac
			;;
	esac
	case ${TOOLCHAIN_LD} in
		gold)
			TOOLCHAIN_LINKERFLAGS+=" -fuse-linker-plugin -Wl,--threads -Wl,--thread-count,${NPROCS}"
			;;
		lld)
			TOOLCHAIN_LINKERFLAGS+=" -Wl,--thinlto-jobs=${NPROCS}"
			;;
	esac
			
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
}

function create_environment_source () {
	settcenv
	cat <<-EOF > environment.source
		#################################################################################
		###### ${PKG_NAME}
		### Source file with all the environment specified
		### Tool chain: ${PKG_TOOLCHAIN:-${TOOLCHAIN}}
		### C Wrapper: ${CCWRAPPER}
		### Build type: ${BUILD_PROCESS}
		###### Other environment variables:
		### DISTOS_PATH=${DISTOS_PATH}
		### BIN_PATH=${BIN_PATH}
		### PKG_SRCDIR=${PKG_SRCDIR}
		### PKG_BLDDIR=${PKG_BLDDIR}
		#################################################################################

		export CC='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CXX='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CXX}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CPP='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CPP}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export FC='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_FC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export F90='${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_F90}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export AR='${TOOLCHAIN_AR}'
		export AS='${TOOLCHAIN_AS}'
		export NM='${TOOLCHAIN_NM}'
		export RANLIB='${TOOLCHAIN_RANLIB}'
		export STRIP='${TOOLCHAIN_STRIP}'
		export OBJCOPY='${TOOLCHAIN_OBJCOPY}'
		export OBJDUMP='${TOOLCHAIN_OBJDUMP}'
		export READELF='${TOOLCHAIN_READELF}'
		#export LD='${TOOLCHAIN_LD}'
		export CFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}'
		export CXXFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}'
		export CPPFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CPPFLAGS} ${PLATFORM_CFLAGS} ${PKG_CPPFLAGS}'
		export FFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
		export F90FLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
		export LDFLAGS='${TOOLCHAIN_LINKERFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}'
		export PKG_CONFIG='${HARCH}-pkg-config'
		export PKG_CONFIG_LIBDIR='${COMMON_PKG_CONFIG_LIBDIR}'
		export PKG_CONFIG_SYSROOT_DIR='${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}'
		export PKG_CONFIG_ALLOW_CROSS='${PKG_CONFIG_ALLOW_CROSS}'
		export LD_LIBRARY_PATH='${LD_LIBRARY_PATH}'
		export LD_LIBRARY_PATH+=':${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}'
		export PATH='${PATH}'
		export CARGO_HOME='${CARGO_HOME}'
		export RUSTUP_HOME='${RUSTUP_HOME}'
		export QEMU_LD_PREFIX='${SYSROOT}${BUILD_PREFIX}'
	EOF
	if [ "$(basename ${CCWRAPPER:-nope})" == "sccache" ]
	then
		cat <<-EOF >> environment.source
			
			# sccache parameters
			export RUSTC_WRAPPER='${CCWRAPPER}'
			export SCCACHE_DIR='${SCCACHE_DIR}'
			export SCCACHE_CACHE_SIZE='${SCCACHE_CACHE_SIZE}'
			export SCCACHE_NO_DAEMON='${SCCACHE_NO_DAEMON}'
		EOF
	fi
}

function crossapt () {
	if [ ! -d ${CACHE_PATH}/apt/state ]
	then
		mkdir -pv ${CACHE_PATH}/apt/state
	fi
	if [ ! -d ${CACHE_PATH}/dpkg ]
	then
		mkdir -pv ${CACHE_PATH}/dpkg
	fi
	if [ ! -f ${CACHE_PATH}/status ]
	then
		touch -v ${CACHE_PATH}/status
	fi
	echo "Updating apt..."
	apt \
		-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
		-o Dir::Cache="${CACHE_PATH}/apt" \
		-o Dir::State="${CACHE_PATH}/apt/state" \
		-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
		-o APT::Sandbox::User="$(whoami)" \
		update
	echo "Done"
	echo running "apt ${@}"
	apt \
		-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
		-o Dir::Cache="${CACHE_PATH}/apt" \
		-o Dir::State="${CACHE_PATH}/apt/state" \
		-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
		-o APT::Sandbox::User="$(whoami)" \
		${@}
	echo "Done"
	echo
}

function build () {(
	function downloadsources () {
		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR SIGINT; \
			return ${STATUS};' ERR	
		trap 'set +x; \
			trap - ERR SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		set -x
		if [ ! -z "${PKG_URL}" ]
		then
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH}
			for url in ${PKG_URL}
			do
				if [ ${MAKEDIR:-0} -eq 1 ]
				then
					NODELETEDESTDIR=1 STRIPCOMPONENTS=0 download_uncompress "${url}" ${PKG_SRCPATH}
				else
					NODELETEDESTDIR=1 download_uncompress "${url}" ${PKG_SRCPATH}
				fi
			done
		else
			if [ ! -z ${GIT_URL} ]
			then
				if [ ! -d ${PKG_SRCPATH} ]
				then
					git clone --recursive ${GIT_URL} ${PKG_SRCPATH}
					if  [ ! -z ${GIT_COMMIT} ]
					then
						git -C ${PKG_SRCPATH} checkout ${GIT_COMMIT}
					fi
					#git -C ${PKG_SRCPATH} submodule update --init --recursive
				fi
			fi
		fi
		set +x
		trap - ERR
		trap - SIGINT
	}

	function preparesources () {
		trap 'STATUS=${?}; \
			echo "Fail."; \
			set +x; \
			trap - ERR
			trap - SIGINT; \
			#[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true; \
			return ${STATUS};' ERR

		trap 'set +x; \
			trap - ERR
			trap - SIGINT; \
			[ -d ${PKG_SRCPATH} ] && rm -rf ${PKG_SRCPATH} || true;
			return 100' SIGINT

		cd ${PKG_SRCPATH}
		if [ "x${PATCHDEB}" != "x" ]
		then
			echo -n "${SPACES}Retrieve DEB patch info..."
			[ ! -d ${PKG_SRCPATH}/debian ] && mkdir -p ${PKG_SRCPATH}/debian
			ARCHIVEDIRS="debian" download_uncompress "${PATCHDEB}" ${PKG_SRCPATH}/debian >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			if [ -f ${PKG_SRCPATH}/debian/patches/series ]
			then
				while read patch
				do
					if [[ ! "${patch}" =~ ^\#.*|^//.* ]]
					then
						local PATCHARRAY=(${patch})
						if [ ! -z ${PATCHARRAY[0]} ]
						then
							echo -n "${SPACES}Applying ${PATCHARRAY[0]} patch..."
							patch ${PATCHARRAY[1]:--p1} < ${PKG_SRCPATH}/debian/patches/${PATCHARRAY[0]} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
							echo "Done."
						fi
					fi
				done <${PKG_SRCPATH}/debian/patches/series
			else
				echo "${SPACES}\"series\" patch list file does not exist."
			fi
		fi
		for scanpatch in ${PATCHES:-}
		do
			if [[ ${scanpatch} =~ ^https?://|^ftp:// ]]
			then
				echo -n "${SPACES}Downloading $scanpatch patch[set]..."	
				download_uncompress ${scanpatch} ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			else
				echo -n "${SPACES}Copying $scanpatch patch..."
				cp -v ${PATCH_PATH}/$scanpatch ${PKG_SRCPATH}/bbxb_patches >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			fi
			find ${PKG_SRCPATH}/bbxb_patches -type f | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
				echo -n 'Applying {} patch...'
				patch -f -p1 < \"{}\" >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
				echo "Done."
			"
		done
		if [ -f "${PKG_SRCPATH}/${CONF_CMD}" ] && [ ! -x "${PKG_SRCPATH}/${CONF_CMD}" ]
		then
			chmod +x ${PKG_SRCPATH}/${CONF_CMD}
		fi
		echo -n "${SPACES}"
		cd ${BB_HOME}
		trap - ERR
		trap - SIGINT
	}

	function downloadonly () {
		set -x
		if [ -d ${PKG_BLDPATH} ]
		then
			cd ${PKG_BLDPATH}
			create_environment_source
			source environment.source
		fi
		set +x
	}

	function configmake () {
		trap 'STATUS=${?}; \
			set +x; \
			echo "fail. [configmake]"; \
			echo; \
			trap - ERR; \
			return ${STATUS}' ERR
		set -x
		env | grep "^BUILD_"
		if [ ${AUTOCONF:-0} -eq 1 ]
		then
			echo -n "${SPACES}AutoReconf ${PKG_NAME}..."
			IFS=,
			for cp in ${AUTOCONF_PATH:-.}
			do
				cd ${PKG_SRCPATH}/${cp}
				if [ ! -d m4 ]
				then
					mkdir m4
				fi
				local ACINCLUDE="--include=m4"
				#[ -d ${DISTOS_PATH}${BUILD_PREFIX}/share/aclocal ] && local ACINCLUDE+=" --include=${DISTOS_PATH}${BUILD_PREFIX}/share/aclocal"
				[ -d ${BIN_PATH}${BUILD_PREFIX}/share/aclocal ] && local ACINCLUDE+=" --include=${BIN_PATH}${BUILD_PREFIX}/share/aclocal"
				eval autoreconf -f -i -v ${ACINCLUDE} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			done
			unset IFS
			echo "Done." || echo "Fail."
		fi
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		echo -e "${CONF_CONFIGPARMS}" > configparms
		if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
		then
			CONF_FLAGS="--prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} \
				--with-systemdsystemunitdir=${BUILD_SYSTEMDDIR} --with-systemduserunitdir=${BUILD_USERSYSTEMDDIR} --localstatedir=${BUILD_LOCALSTATEDIR} ${CONF_FLAGS}"
			CONF_FLAGS="--build=${BARCH} --host=${HARCH} --with-sysroot=${BIN_PATH} ${CONF_FLAGS}"
			if [ ${BUILD_LIBSHARED} -eq 1 ]
			then
				CONF_FLAGS=" --enable-shared ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-shared ${CONF_FLAGS}"
			fi
			if [ ${BUILD_LIBSTATIC} -eq 1 ]
			then
				CONF_FLAGS=" --enable-static ${CONF_FLAGS}"
			else
				CONF_FLAGS=" --disable-static ${CONF_FLAGS}"
			fi
		fi
		create_environment_source
		source environment.source

		if [[ "${CONF_CMD}" =~ ^\./.* ]]
		then
			eval "${CONF_CMD} ${CONF_FLAGS}"
		else 
			eval "${PKG_SRCPATH}${CONF_PATH:+/${CONF_PATH}}/${CONF_CMD:-configure} ${CONF_FLAGS}"
		fi
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}
			done
		fi
		make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${INST_CMD:-}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function simplemake () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		create_environment_source
		source environment.source
		if [ ${PKG_TWOSTEPSBUILD:-1} -eq 1 ] || [ ! -x ${PKG_MAKETARGETS} ]
		then
			for target in ${PKG_MAKETARGETS:-all}
			do
				echo "Making ${target}..."
				eval "make ${PKG_MAKEVARS} V=${MAKEVERBOSE:-0} ${target}"
			done
		fi
		eval "make ${PKG_MAKEVARS} PREFIX=${BUILD_PREFIX} LIBSUFFIX=${BUILD_LIBSUFFIX} DESTDIR=${PKG_PKGPATH} V=${MAKEVERBOSE:-0} ${INST_CMD:-install}"
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cmakebuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}
		cd ${PKG_BLDPATH}
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_SHARED_LIBS=OFF"
		fi
		if [ ${BUILD_LIBSTATIC} -eq 1 ]
		then
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=ON"
		else
			CONF_FLAGS+=" -DBUILD_STATIC_LIBS=OFF"
		fi
		CCWRAPPER="" create_environment_source
		source environment.source
		cmake ${PKG_SRCPATH} \
			-G Ninja \
			-DCMAKE_BUILD_TYPE="Release" \
			-DTOOLCHAIN_PREFIX=${HARCH}- \
			-DCMAKE_C_COMPILER_LAUNCHER=${CCWRAPPER} \
			-DCMAKE_CXX_COMPILER_LAUNCHER=${CCWRAPPER} \
			-DCMAKE_CROSSCOMPILING="TRUE" \
			-DCMAKE_INSTALL_PREFIX=${BUILD_PREFIX} \
			-D${VAR_INSTALL_LIBDIR:-"LIB_INSTALL_DIR"}=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_LIBSUFFIX:-"LIB_SUFFIX"}=${BUILD_LIBSUFFIX} \
			-D${VAR_INSTALL_INCDIR:-"INCLUDE_INSTALL_DIR"}=${BUILD_INCLUDEDIR} \
			-D${VAR_INSTALL_CONFDIR:-"SYSCONF_INSTALL_DIR"}=${BUILD_SYSCONFDIR} \
			${CONF_FLAGS}
		local NINJA_FLAGS="-j${NPROCS}$([ $MAKEVERBOSE -eq 1 ] && echo -n ' -v')"
		ninja ${NINJA_FLAGS} ${PKG_MAKEVARS}
		DESTDIR=${PKG_PKGPATH} ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} ${INST_CMD:-install}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function mesonninja () {
		function createmesoncross () {	
			function buildmesonargs () {
				local FIRST=1
				for flag in ${1}
				do
					if [ ${FIRST} -ne 1 ]
					then
						echo -n ", "
					fi
					echo -n "'${flag}'"
				local FIRST=0
				done
				echo
			}
			set +x
			if [ ${STD_CONF_FLAGS:-1} -eq 1 ]
			then
				CONF_FLAGS+=" --prefix=${BUILD_PREFIX} --libdir=${BUILD_LIBDIR}${BUILD_LIBSUFFIX} --includedir=${BUILD_INCLUDEDIR} --sysconfdir=${BUILD_SYSCONFDIR} --localstatedir=${BUILD_LOCALSTATEDIR}"
				if [ ${BUILD_LIBSHARED} -eq 0 ] && [ ${BUILD_LIBSTATIC} -eq 1 ]
				then
					CONF_FLAGS+=" --default-library=static"
				fi
				if [ ${BUILD_LIBSHARED} -eq 1 ] && [ ${BUILD_LIBSTATIC} -eq 0 ]
				then
					CONF_FLAGS+=" --default-library=shared"
				fi
			fi
			local C=$(buildmesonargs "${CC}")
			local C_ARGS=$(buildmesonargs "${CFLAGS}")
			local CPP=$(buildmesonargs "${CXX}")
			local CPP_ARGS=$(buildmesonargs "${CXXFLAGS}")
			local FORTRAN=$(buildmesonargs "${FC}")
			local FORTRAN_ARGS=$(buildmesonargs "${FFLAGS}")
			local C_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local CPP_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			local FORTRAN_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
			cat > cross-${PLATFORM_NAME} <<-EOF
				[binaries]
				c = [${C}]
				c_ld = '$(echo ${LD} | sed "s/ld.//;s/${HARCH}-//" )'
				cpp = [${CPP}]
				cpp_ld = '$(echo ${LD} | sed "s/ld.//;s/${HARCH}-//" )'
				fortran = [${FORTRAN}]
				ar = '${AR}'
				strip = '${STRIP}'
				nm = '${NM}'
				ranlib = '${RANLIB}'
				pkgconfig = '${PKG_CONFIG}'
				exe_wrapper = 'qemu-${HM}-static'

				[host_machine]
				system = '${HOS}'
				cpu_family = '${HM}'
				cpu = '${HMCPU}'
				endian = '${HMENDIAN}'

				[properties]
				c_args = [${C_ARGS}]
				cpp_args = [${CPP_ARGS}]
				fortran_args= [${FORTRAN_ARGS}]
				c_link_args = [${C_LINK_ARGS}]
				cpp_link_args = [${CPP_LINK_ARGS}]
				fortran_link_args = [${FORTRAN_LINK_ARGS}]
			EOF
			set -x
		}

		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR; \
			echo "fail. [mesonninja - ${PKG_NAME}]"; \
			echo; \
			return ${STATUS}' ERR

		set -x
		mkdir -p ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		create_environment_source
		source environment.source
		createmesoncross
		meson ${PKG_SRCPATH} ${PKG_BLDPATH} --buildtype=release -Db_ndebug=true --cross-file cross-${PLATFORM_NAME} ${CONF_FLAGS}
		local NINJA_FLAGS="-j${NPROCS}$([ $MAKEVERBOSE -eq 1 ] && echo -n ' -v')"
		ninja ${NINJA_FLAGS} ${PKG_MAKEVARS}
		DESTDIR=${PKG_PKGPATH} ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} ${INST_CMD:-install}
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function cargobuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
		set -x
	
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		create_environment_source
		source environment.source
		local CARGO_BIN=${CARGO_BIN:-${BUILD_EXECPREFIX}/bin}
		local CARGO_LIB=${CARGO_LIB:-${BUILD_LIBDIR}${BUILD_LIBSUFFIX}}
		local CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
		export CARGO_PROFILE_RELEASE_OPT_LEVEL=${OPTLEVEL}
		case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
			1|fat) export CARGO_PROFILE_RELEASE_LTO=fat
				;;
			2|thin)	export CARGO_PROFILE_RELEASE_LTO=thin
				;;
		esac
		for param in $(echo ${TOOLCHAIN_EXTRA_C_CMD} ${SYSROOT_FLAGS} ${STRIP_FLAG} ${OPTLINK_FLAGS} ${COMMON_LDFLAGS} ${TOOLCHAIN_LINKERFLAGS} ${PKG_LDFLAGS})
		do
			export RUSTFLAGS+=" -C link-arg=${param}"
		done
		export RUSTFLAGS+=" ${PLATFORM_RUSTSYSROOT} ${PLATFORM_RUSTFLAGS} ${OPTCOMP_RUSTFLAGS} -C linker=${TOOLCHAIN_CC}"
		echo "RUSTFLAGS=${RUSTFLAGS}"
		cargo build --verbose --release ${CONF_FLAGS} --target=${CARGO_TARGET}
		for file in ${CARGO_BINLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_BIN} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_BIN}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_BIN}/${file}
		done
		for file in ${CARGO_LIBLIST}
		do
			if [ ! -d ${PKG_PKGPATH}${CARGO_LIB} ]
			then
				mkdir -p ${PKG_PKGPATH}${CARGO_LIB}
			fi
			cp -p target/${CARGO_TARGET}/release/${file} ${PKG_PKGPATH}${CARGO_LIB}/${file}
		done
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function kernelmodbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x

		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}

		#local PKG_KERNEL_NAME="$( basename ${PKG_DEPS} )"
		#local PKG_KERNEL_SUFFIX="$( cat ${PKG_PATH}/${PKG_DEPS}.pkg | grep "PKG_SUFFIX=" | cut -d"=" -f2 )"
		#local PKG_KERNEL_BLDDIR="${PKG_KERNEL_NAME}${PKG_KERNEL_SUFFIX}"
		#local PKG_KERNEL_BLDPATH="${BLD_PATH}/${PKG_KERNEL_BLDDIR}"
		#local PKG_KERNEL_VERSION="$(cd ${PKG_KERNEL_BLDPATH}; ./make4kern.sh kernelversion)"

		if [ ! -f "${PKG_BLDPATH}/Makefile" ]
		then
			cat <<-EOF > "${PKG_BLDPATH}/Makefile"
				KDIR:=${PKG_KERNEL_BLDPATH}
				KMOD:=${PKG_BLDPATH}
				obj-m:=${PKG_KERNEL_MOD}.o
				${PKG_KERNEL_MOD}-y:=
			EOF
		fi

		if [ ${PKG_KERNEL_LOCALBUILD:-0} -eq 0 ]
		then
			local BUILD_OPTION="-C ${PKG_KERNEL_BLDPATH} "
		fi

		eval KCFLAGS=\"${PKG_CFLAGS}\" ${PKG_KERNEL_BLDPATH}/make4kern.sh ${BUILD_OPTION}M=${PWD} ${PKG_MAKEVARS} modules
		eval ${PKG_KERNEL_BLDPATH}/make4kern.sh ${BUILD_OPTION}M=${PWD} ${PKG_MAKEVARS} INSTALL_MOD_PATH=${PKG_PKGPATH} INSTALL_MOD_DIR=${PKG_KERNEL_MODPATH} ${INST_CMD:-modules_install}
		rm -f ${PKG_PKGPATH}/lib/modules/*/modules.*

		mkdir -pv ${PKG_PKGPATH}/postinst_scripts
		cat <<-EOF > ${PKG_PKGPATH}/postinst_scripts/49_kernmodpost
			depmod -a ${PKG_KERNEL_VERSION}
		EOF

		cd -
		set +x
		trap - ERR
	}

	function kernelbuild () {
		function make4kern () {
			settcenv
			case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
				gnu)
					local HOSTCC=gcc
					local HOSTCXX=g++
					local HOSTAR=gcc-ar
					local HOSTLD=ld.bfd
					;;
				llvm)
					if clang -v 2>&1 > /dev/null && ld.lld -v 2>&1
					then
						local HOSTCC=clang
						local HOSTCXX=clang++
						local HOSTAR=llvm-ar
						local HOSTLD=ld.lld
					else
						local HOSTCC=gcc
						local HOSTCXX=g++
						local HOSTAR=gcc-ar
						local HOSTLD=ld.bfd
					fi
					;;
			esac
			cat <<-EOF > make4kern.sh
				export PATH="${PATH}"
				export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
				KBUILD_BUILD_TIMESTAMP='' \\
				make \\
					V=${MAKEVERBOSE:-0} \\
					CC="${CCWRAPPER:+${CCWRAPPER} }${TOOLCHAIN_CC}" \\
					LD="$(
						case ${TOOLCHAIN_LD} in
							gold|bfd) echo ${HARCH}-ld.bfd;;
							lld) echo ld.lld;;
						esac
						)" \\
					AS="${TOOLCHAIN_AS}" \\
					NM="${TOOLCHAIN_NM}" \\
					AR="${TOOLCHAIN_AR}" \\
					OBJCOPY="${TOOLCHAIN_OBJCOPY}" \\
					OBJDUMP="${TOOLCHAIN_OBJDUMP}" \\
					READELF="${TOOLCHAIN_READELF}" \\
					STRIP="${TOOLCHAIN_STRIP}" \\
					KCFLAGS="\${KCFLAGS}${LLVM_KERNELPOLLYFLAGS:+ ${LLVM_KERNELPOLLYFLAGS}}${PKG_CFLAGS:+ ${PKG_CFLAGS}}" \\
					KBUILD_LDFLAGS="${KERNEL_OPTLINK_FLAGS}${PKG_LDFLAGS:+ ${PKG_LDFLAGS}}" \\
					ARCH=${KERNEL_ARCH} \\
					CROSS_COMPILE=${HARCH}- \\
					HOSTCC="${CCWRAPPER:+${CCWRAPPER} }${HOSTCC}" \\
					HOSTCXX="${CCWRAPPER:+${CCWRAPPER} }${HOSTCXX}" \\
					HOSTAR=${HOSTAR} \\
					HOSTLD=${HOSTLD} \\
					LLVM_IAS=0 \\
					EXTRAVERSION=${KERNEL_EXTRAVERSION} \\
					LOCALVERSION=${KERNEL_LOCALVERSION} \\
					${EXTRA_PARMS} ${PKG_MAKEVARS} \${@}
			EOF
			chmod +x make4kern.sh
		}

		trap 'STATUS=${?}; \
			set +x; \
			trap - ERR; \
			return ${STATUS};' ERR

		set -x

		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}

		cd ${PKG_BLDPATH}
		make4kern

		echo "Build ${PKG_FILE} with extra modules ${PKG_KERNEL_BUILD_MODULES}"
		echo "Kernel headers only: ${KERNEL_HDRS_ONLY:-1}"
		# Install headers
		./make4kern.sh INSTALL_HDR_PATH=${PKG_PKGPATH}${BUILD_PREFIX} headers_install 

		# Break if only headers installation required
		if [ ${KERNEL_HDRS_ONLY:-0} -eq 1 ]
		then
			set +x
			trap - ERR
			return
		fi

		if [ -f arch/${KERNEL_ARCH}/configs/${KERNEL_DEFCONFIG} ]
		then
			cp -v arch/${KERNEL_ARCH}/configs/${KERNEL_DEFCONFIG} .config
		else
			cp -v ${KERNEL_DEFCONFIG} .config
		fi
		# Config kernel build

		case ${KERNEL_OPTLEVEL:-null} in
			s|S)	scripts/config -e CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			2)	scripts/config -d CC_OPTIMIZE_FOR_SIZE -e CC_OPTIMIZE_FOR_PERFORMANCE -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
			3)	# Patch kernel to build with -O3 flag
				sed -i '/depends on ARC$/d' init/Kconfig
				scripts/config -d CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
			;;
		esac

		if [ "x${CONF_FLAGS}" != "x" ]
		then
			scripts/config ${CONF_FLAGS}
		fi

		if [ ${PKG_TOOLCHAIN:-${TOOLCHAIN}} == llvm ]
		then
			echo "LTO type: ${KERNEL_LTOENABLE}"
			case x${KERNEL_LTOENABLE} in
				x1|xlto)
					scripts/config -d FTRACE -d KASAN -d GCOV_KERNEL
					scripts/config -e LTO_CLANG
					;;
				x2|xthin)
					scripts/config -d FTRACE -d KASAN -d GCOV_KERNEL
					scripts/config -e LTO_CLANG_THIN
					;;
			esac
		fi

		./make4kern.sh olddefconfig
	
		if [ ! -d ${PKG_PKGPATH}/boot ]
		then
			mkdir -p ${PKG_PKGPATH}/boot
		fi

		# Build and install kernel
		./make4kern.sh ${KERNEL_IMAGE}
		case ${KERNEL_NAME}
		in
			kernel*)
				cp arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE} ${PKG_PKGPATH}/boot/${KERNEL_NAME}
				local STATUS=${?}
				;;
			*)
				[ ! -d ${PKG_PKGPATH}/boot ] && mkdir ${PKG_PKGPATH}/boot
				make ${KERNEL_ARCH:+ARCH=${KERNEL_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_PATH=${PKG_PKGPATH}/boot ${INST_CMD} install
				;;
		esac
		
		# Build and install modules
		./make4kern.sh modules
		make ${KERNEL_ARCH:+ARCH=${KERNEL_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_MOD_PATH=${PKG_PKGPATH} ${INST_CMD} modules_install
		local KERNELRELEASE=$(cat include/config/kernel.release)
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/build
		rm ${PKG_PKGPATH}/lib/modules/${KERNELRELEASE}/source

		# Build and install DTBS
		if [ ${KERNEL_DTBS:-0} -eq 1 ] && [ ${STATUS} -eq 0 ]
		then
			if [ ! -d ${PKG_PKGPATH}/boot/overlays ]
			then
				mkdir -p ${PKG_PKGPATH}/boot/overlays
			fi
			./make4kern.sh dtbs
			make ${KERNEL_ARCH:+ARCH=${KERNEL_ARCH}} ${HARCH:+CROSS_COMPILE=${HARCH}-} INSTALL_DTBS_PATH=${PKG_PKGPATH}/boot ${INST_CMD} dtbs_install
		fi

		#local PKG_KERNEL_NAME="$( basename ${PKG_DEPS} )"
		#local PKG_KERNEL_SUFFIX="$( cat ${PKG_PATH}/${PKG_DEPS}.pkg | grep "PKG_SUFFIX=" | cut -d"=" -f2 )"
		#local PKG_KERNEL_BLDDIR="${PKG_KERNEL_NAME}${PKG_KERNEL_SUFFIX}"

		PKG_KERNEL_BLDPATH="${PWD}"
		PKG_KERNEL_VERSION="$(./make4kern.sh kernelversion)"

		IFS=,
		for module in ${PKG_KERNEL_BUILD_MODULES}
		do
			build --force ${module}
		done
		unset IFS

		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		local INSTALL_TARGET="--install-lib=${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		PYTHONPATH=${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=:${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}
			fi
			export PYTHONPATH
		done
		create_environment_source
		source environment.source
		cross-python -m site
		eval '${PKG_BUILDVARS} cross-python setup.py build -j${NPROCS} ${CONF_FLAGS}'
		eval '${PKG_BUILDVARS} cross-python setup.py install --root=${PKG_PKGPATH} --prefix=${BUILD_PREFIX} --exec-prefix=${BUILD_EXECPREFIX} \
			${INSTALL_TARGET}'
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function pythonpip () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		mkdir -pv ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		local PYTHONBIN_VER=$(echo $(python -V) | awk '{print $2}' | cut -d'.' -f1,2)
		local PYTHONBIN_MAJVER=$(echo ${PYTHONBIN_VER} | cut -d'.' -f1,1)
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER}m ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
		fi
		if [ -f ${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libpython${PYTHONBIN_VER} ]
		then
			COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE:-0} -eq 1 ]
		then
			local VERBOSE="-v"
		fi
		if [ -f ${DISTOS_PATH}/etc/debian_version ]
		then
			local PYTHON_PKGDIR="dist-packages"
		else
			local PYTHON_PKGDIR="site-packages"
		fi
		PYTHONPATH="${BIN_PATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
		do
			if [ -d ${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR} ]
			then
				PYTHONPATH+=":${DISTOS_PATH}${BUILD_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}"
			fi
		done
		#PYTHONUSERBASE="${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
		#export PYTHONUSERBASE
		export PYTHONPATH
		create_environment_source
		source environment.source
		cross-python -m site
		if [ ${PKG_PYTHONBUILD:-1} -eq 1 ]
		then
			local PYTHONBUILD="--no-binary :all:"
		fi
		#build-python -m pip ${VERBOSE} install --upgrade ${PKG_NAME}
		cross-python -m pip ${VERBOSE} install -I ${PYTHONBUILD} --root ${PKG_PKGPATH} --prefix=${BUILD_PREFIX} ${PKG_NAME}
		if [ ${PYTHON_PKGDIR} == dist-packages ]
		then
			mv ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/site-packages ${PKG_PKGPATH}${BUILD_LIBDIR}/python${PYTHONBIN_VER}/dist-packages
		fi
		cd ${BB_HOME}
		set +x
		trap - ERR
	}
	
	function boostbuild () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		set -x
		cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH}
		cd ${PKG_BLDPATH}
		if [ -d ${DISTOS_PATH}${BUILD_INCLUDEDIR} ]
		then
			local ICU_INCLUDEDIR=${DISTOS_PATH}${BUILD_INCLUDEDIR}
		else
			local ICU_INCLUDEDIR=${BIN_PATH}${BUILD_INCLUDEDIR}
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
		fi
		if [ -d ${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER} ]
		then
			COMMON_CXXFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
		fi
		if [ ${MAKEVERBOSE} -eq 1 ]
		then
			local B2_FLAGS="-d+2"
		else
			local B2_FLAGS="-d+1"
		fi
		if [ ${BUILD_LIBSHARED} -eq 1 ]
		then
			local B2_FLAGS="${B2_FLAGS} link=shared runtime-link=shared"
		else
			local B2_FLAGS="${B2_FLAGS} link=static runtime-link=static"
		fi
		case ${HM} in
			arm)
				local BOOST_ARCH=arm
				local BOOST_ABI=aapcs
				local BOOST_ADDRMOD=32
				;;
			aarch64)
				local BOOST_ARCH=arm
				local BOOST_ABI=aapcs
				local BOOST_ADDRMOD=64
				;;
			i386)
				local BOOST_ARCH=x86
				local BOOST_ABI=sysv
				local BOOST_ADDRMOD=32
				;;
			x86_64)
				local BOOST_ARCH=x86
				local BOOST_ABI=sysv
				local BOOST_ADDRMOD=64
				;;
			*)
				echo "Missing architecture mapping for ${HM}"
				return 1
				;;
		esac
		case ${HOS} in
			linux|android) local HMBINFMT=elf;;
			windows) local HMBINFMT=pe;;
			macosx|ios) local HMBINFMT=mach-o;;
		esac
		case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
			llvm) 
					local BBTC=clang
					local CXX_EXE=${CCWRAPPER:+${CCWRAPPER} }clang++
					local WORKAROUND="--target=${HARCH} "
					local LINKER_FLAGS="-fuse-ld=${LLVM_DEFAULT_LD:-lld} -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS}"
				;;
			gnu) 
					local BBTC=gcc
					local CXX_EXE=${CCWRAPPER:+${CCWRAPPER} }${HARCH}-g++
					local LINKER_FLAGS="-fuse-ld=${LLVM_DEFAULT_LD:-gold} ${GNU_EXTRALDFLAGS}"
				;;
		esac
		case ${OPTLEVEL} in
			2)	local OPTIMIZATION=minimal
				;;
			3)	local OPTIMIZATION=speed
				;;
			s)	local OPTIMIZATION=space
				;;
			*)	local OPTIMIZATION=off
				;;
		esac
		case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
			1|fat)
				local LTO=on
				local LTOMODE=full
				;;
			2|thin)
				local LTO=on
				local LTOMODE=thin
				;;
			*)
				local LTO=off
				;;
		esac
#		create_environment_source
#		source environment.source
		./bootstrap.sh \
			--prefix=${PKG_PKGPATH}${BUILD_PREFIX} \
			--exec-prefix=${PKG_PKGPATH}${BUILD_EXECPREFIX} \
			--libdir=${PKG_PKGPATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
			--includedir=${PKG_PKGPATH}${BUILD_INCLUDEDIR} \
			--with-icu=${ICU_INCLUDEDIR} \
			--with-python-version=${PYTHONBIN_VER} \
			--with-toolset=${BBTC}
		sed -i "s|using ${BBTC} ;|using ${BBTC} : : ${CXX_EXE} ;|" project-config.jam &&
		./b2 -j${NPROCS} -q \
			architecture=${BOOST_ARCH} address-model=${BOOST_ADDRMOD} \
			binary-format=${HMBINFMT} abi=${BOOST_ABI} target-os=${HOS} \
			variant=release optimization=${OPTIMIZATION} lto=${LTO} lto-mode=${LTOMODE} threading=multi ${B2_FLAGS} \
			toolset=${BBTC} \
			cflags="${WORKAROUND}${SYSROOT_FLAGS} ${PLATFORM_CFLAGS} ${PKG_CFLAGS}" \
			cxxflags="${COMMON_CXXFLAGS} -fPIC ${PKG_CXXFLAGS}" \
			linkflags="${WORKAROUND}${SYSROOT_FLAGS} ${LINKER_FLAGS} ${COMMON_LDFLAGS} ${PKG_LDFLAGS}" \
			install
		cd ${BB_HOME}
		set +x
		trap - ERR
	}

	function builddebpkg () {
		trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

		cd $(find ${PKG_BLDPATH} -mindepth 1 -maxdepth 1 -type d)
		run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get update"
		run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get -y build-dep ${PKG_NAME}"
		set -x
		case ${HM} in
			arm) [ "${HMFLOATABI}" == "hard" ] && local DEBARCH=armhf || local DEBARCH=arm
			;;
			aarch64) DEBARCH=arm64
			;;
			*) local DEBARCH=${HM}
			;;
		esac
		create_environment_source
		source environment.source
		DPKG_ROOT=${DISTOS_PATH} \
		CONFIG_SITE=${DISTOS_PATH}/etc/dpkg \
		LD_LIBRARY_PATH+=:${DISTOS_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} \
		DEB_BUILD_OPTIONS="nocheck noddebs" \
		DH_OPTIONS="-v --dpkg-shlibdeps-params=--ignore-missing-info" \
		dpkg-buildpackage \
			--host-arch=${DEBARCH} \
			--host-type=${HARCH} \
			--target-arch=${DEBARCH} \
			--target-type=${HARCH} \
			-d -b -uc -us \
			-Pcross,nocheck \
			--admindir=${DISTOS_PATH}/var/lib/dpkg
		cd ..
		cp -v *.deb ${PKG_PKGPATH}
		set +x
		echo "Done"
		trap - ERR
	}

	trap 'STATUS=${?}; \
		trap - ERR; \
		echo "fail. [build - ${PKG_NAME}]"; \
		echo; \
		if [ -f ${LOG_PATH}/${PKG_NAME}.log ]; \
		then \
			echo "Log ${LOG_PATH}/${PKG_NAME}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/${PKG_NAME}.log; \
		fi; \
		set +x; \
		return ${STATUS}' ERR

	unset \
		AUTOCONF \
		AUTOCONF_PATH \
		BUILD_EXECPREFIX \
		BUILD_INCLUDEDIR \
		BUILD_LIBDIR \
		BUILD_LOCALSTATEDIR \
		BUILD_PREFIX \
		BUILD_PROCESS \
		BUILD_SYSCONFDIR \
		BUILD_SYSTEMDDIR \
		BUILD_USERSYSTEMDDIR \
		CARGO_BIN \
		CARGO_LIB \
		CARGO_BINLIST \
		CARGO_LIBLIST \
		CONF_CMD \
		CONF_FLAGS \
		CONF_PATH \
		CONF_CONFIGPARMS \
		GIT_URL \
		GIT_COMMIT \
		INST_CMD \
		MAKEDIR \
		PATCHDEB \
		PATCHES \
		PKG_SUFFIX \
		PKG_SRCDIR \
		PKG_DEPS \
		PKG_COPYSRC \
		PKG_FAULTYCFLAGS \
		PKG_CFLAGS \
		PKG_CXXFLAGS \
		PKG_FCFLAGS \
		PKG_KERNEL_BUILD_MODULES \
		PKG_KERNEL_MOD \
		PKG_KERNEL_MODPATH \
		PKG_LDFLAGS \
		PKG_RUSTFLAGS \
		PKG_LLVMPOLLYFEATURES \
		PKG_MAKETARGETS \
		PKG_MAKEVARS \
		PKG_OVERRIDELD \
		PKG_OVERRIDELTO \
		PKG_PREBUILD \
		PKG_POSTBUILD \
		PKG_POSTINSTALL \
		PKG_POSTINSTALL_PRIO \
		PKG_TOOLCHAIN \
		PKG_TWOSTEPSBUILD \
		PKG_URL \
		STD_CONF_FLAGS \
		VAR_INSTALL_LIBDIR \
		VAR_INSTALL_LIBSUFFIX \
		VAR_INSTALL_INCDIR \
		VAR_INSTALL_CONFDIR \
		MULTI_ARCH

	OPTS="--force --no_gcc_check --no_save_status --keep_builddir" OPTS_WITH_VALUE="--toolchain --with_extra_modules" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true
	local PKG_FILE="${_param_1}"
	local GCC_CHECK=${_param_no_gcc_check:-0}
	local FORCE=${_param_force:-0}
	local NOSAVESTATUS=${_param_no_save_status:-0}
	local KEEPBUILDDIR=${_param_keep_builddir:-0}

	if [ -z "${NUMSPACES}" ]
	then
		local NUMSPACES=0
	fi
	
	if [ ! -f ${PKG_PATH}/${PKG_FILE}.pkg ]
	then
		echo "Package ${PKG_FILE} does not exists."
		echo
		set +x
		trap - ERR;
		return 1
	fi
	
	local PKG_NAME=$(basename ${PKG_FILE})\${PKG_SUFFIX}
	local PKG_SRCDIR=${PKG_SRCDIR:-${PKG_NAME}}
	local PKG_BLDPATH=${BLD_PATH}/${PKG_NAME}
	local PKG_PKGPATH=${PACKAGES_PATH}/${PKG_NAME}

	setbuildenv
	source ${PKG_PATH}/${PKG_FILE}.pkg

	PKG_TOOLCHAIN=${_param_toolchain:-${PKG_TOOLCHAIN}}
	PKG_KERNEL_BUILD_MODULES="${_param_with_extra_modules:-${PKG_KERNEL_BUILD_MODULES}}"

	eval local PKG_NAME=${PKG_NAME}
	eval local PKG_SRCPATH=${SRC_PATH}/${PKG_SRCDIR}
	eval local PKG_BLDPATH=${PKG_BLDPATH}
	eval local PKG_PKGPATH=${PKG_PKGPATH}
	
	echo "Package ${PKG_NAME}"

	if [ ${DEBUG:-0} -gt 0 ]
	then
		echo
		echo "PKG_SRCPATH: ${PKG_SRCPATH}"
		echo "PKG_BLDPATH: ${PKG_BLDPATH}"
		echo "PKG_PKGPATH: ${PKG_PKGPATH}"
		echo
	fi

	for deps in ${PKG_DEPS}
	do
		local NUMSPACES=$((NUMSPACES+1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
		echo -n "${SPACES}Requires "
		#echo "Called from ${PKG_FILE}"
		build ${deps}
		local NUMSPACES=$((NUMSPACES-1))
		local SPACES=$(for ((i = 0 ; i < ${NUMSPACES} ; i++ )); do echo -n "   "; done)
	done


	if [ -f ${STATUS_PATH}/${PKG_NAME} ] && [ ${FORCE} -eq 0 ]
	then
		if [ "$(md5sum ${PKG_PATH}/${PKG_FILE}.pkg)" == "$(cat ${STATUS_PATH}/${PKG_NAME})" ]
		then
			echo "${SPACES}Package ${PKG_NAME} already built."
			echo
			set +x
			trap - ERR
			return 0
		else
			rm -f ${STATUS_PATH}/${PKG_NAME}
		fi
	fi

	eval "> ${LOG_PATH}/${PKG_NAME}.log"
	
	if [ ${GCC_CHECK} -eq 0 ] && [ "${BUILD_PROCESS}" != "none" ] && [ "${BUILD_PROCESS}" != "downloadonly" ]
	then
		check_${PKG_TOOLCHAIN:-${TOOLCHAIN}}_c
	fi

	echo -n "${SPACES}"
	# Build defaults
	### To manage source path removal at beginning or at the end...
	#if [ -d ${PKG_SRCPATH} ]
	#then
	#	rm -rf ${PKG_SRCPATH}
	#fi
	if [ ! -d ${BLD_PATH} ]
	then
		mkdir -p ${BLD_PATH}
	fi
	if [ ! -d ${BIN_PATH} ]
	then
		mkdir -p ${BIN_PATH}
	fi
	echo "Pre build script:" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "==================" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "${PKG_PREBUILD}" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "==================" >> ${LOG_PATH}/${PKG_NAME}.log
	echo >> ${LOG_PATH}/${PKG_NAME}.log
	echo "Post build script:" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "==================" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "${PKG_POSTBUILD}" >> ${LOG_PATH}/${PKG_NAME}.log
	echo "==================" >> ${LOG_PATH}/${PKG_NAME}.log
	echo >> ${LOG_PATH}/${PKG_NAME}.log
	case x${BUILD_PROCESS} in
	xpythonpip)
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			echo "Running pre build script..." >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			(eval "set -ex; ${PKG_PREBUILD} 2>&1; set +ex") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME}..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! -z "${PKG_POSTBUILD}" ]
		then
			echo "Running post build script..." >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			(eval "set -ex; ${PKG_POSTBUILD} 2>&1; +ex") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	xbuilddebpkg)
		if [ ! -d ${CACHE_PATH}/apt/state ]
		then
			mkdir -pv ${CACHE_PATH}/apt/state
		fi
		if [ ! -d ${CACHE_PATH}/dpkg ]
		then
			mkdir -pv ${CACHE_PATH}/dpkg
		fi
		if [ ! -f ${CACHE_PATH}/dpkg/status ]
		then
			touch ${CACHE_PATH}/dpkg/status
		fi
		if [ ! -d ${CACHE_PATH}/apt/conf ]
		then
			mkdir -pv ${CACHE_PATH}/apt/conf
		fi
		mkdir -p ${PKG_SRCPATH}
		cd ${PKG_SRCPATH}
		echo -n "Downloading ${PKG_NAME}..."
		(
		run_on_root_dir distos root "for file in $( find /etc/apt/sources.list.d -type f ) /etc/apt/sources.list; do \
			sed -i 's/^#deb-src/deb-src/g' \${file}; done"
		apt-get \
			-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
			-o Dir::Cache="${CACHE_PATH}/apt" \
			-o Dir::State="${CACHE_PATH}/apt/state" \
			-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
			-o APT::Sandbox::User="$(whoami)" \
			update
		apt-get \
			-o Dir::Etc="${DISTOS_PATH}/etc/apt" \
			-o Dir::Cache="${CACHE_PATH}/apt" \
			-o Dir::State="${CACHE_PATH}/apt/state" \
			-o Dir::State::status="${CACHE_PATH}/dpkg/status" \
			-o APT::Sandbox::User="$(whoami)" \
			-o Binary::apt::APT::Keep-Downloaded-Packages="1" \
			source ${PKG_NAME}
		) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		mkdir -pv ${PKG_PKGPATH}
		if [ ! -z "${PKG_PREBUILD}" ]
		then
			(
			trap 'exit 1' ERR
			set -x
			cd $(find ${PKG_SRCPATH} -mindepth 1 -maxdepth 1 -type d)
			eval "${PKG_PREBUILD}" 2>&1
			set +x
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ -d ${PKG_BLDPATH} ]
		then
			rm -rf ${PKG_BLDPATH}
		fi
		cp -R ${PKG_SRCPATH} ${PKG_BLDPATH} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		echo -n "Building ${PKG_NAME}..."
		${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		;;
	x*)
		if [ ! -z "${PKG_URL}" ] || [ ! -z "${GIT_URL}" ]
		then
			echo -n "Downloading ${PKG_NAME}..."
			downloadsources >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			echo "Done."
			preparesources
		fi
		if [ -d ${PKG_BLDPATH} ]
		then
			rm -rf ${PKG_BLDPATH}
		fi
		if [ -d ${PKG_PKGPATH} ]
		then
			sudo rm -rf ${PKG_PKGPATH}
		fi
		mkdir -p ${PKG_PKGPATH}
		if [ -n "${PKG_PREBUILD}" ]
		then
			if [ -d ${PKG_SRCPATH} ]
			then
				cd ${PKG_SRCPATH}
			fi
			echo "Running pre build script..." >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			(eval "set -ex; ${PKG_PREBUILD} 2>&1; set +ex") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ${PKG_COPYSRC:-0} -eq 1 ] 
		then
			(set -ex; cp -rp ${PKG_SRCPATH} ${PKG_BLDPATH} 2>&1; set +ex) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ ! ${BUILD_PROCESS:-none} == none ]
		then
			echo -n "Building ${PKG_NAME} [${BUILD_PROCESS}]..."
			${BUILD_PROCESS} >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		if [ -n "${PKG_POSTBUILD}" ]
		then
			if [ ! -d ${PKG_BLDPATH} ]
			then
				mkdir -p ${PKG_BLDPATH}
			fi
			cd ${PKG_BLDPATH}
			echo "Running post build script..." >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			(eval "set -ex; ${PKG_POSTBUILD} 2>&1; set +ex") >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
		fi
		;;
	esac
	#rm -rf ${PKG_SRCPATH} &&

	if [ -n "${PKG_POSTINSTALL}" ]
	then
		mkdir -p ${PKG_PKGPATH}/postinst_scripts
		echo "${PKG_POSTINSTALL}" > ${PKG_PKGPATH}/postinst_scripts/${PKG_POSTINSTALL_PRIO:-50}_${PKG_NAME}
	fi

	##### Create package
	case x${BUILD_PROCESS} in
	xbuilddebpkg)
			(
				set -ex
				pwd
				if [ ${NOSAVESTATUS} -eq 0 ]
				then
					#tar cfp - --owner=0 --group=0 -C ${PKG_PKGPATH} . | xz -T${NPROCS} - > ${PKG_PKGPATH}.tar.xz
					create_sfx_package ${PKG_PKGPATH}
				fi
				sudo rm -rf ${PKG_PKGPATH}
				set +ex
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			if [ ${KEEPBUILDDIR} -eq 0 ]
			then
				rm -rf ${PKG_BLDPATH}
			fi
		;;
		*)
			(
				set -ex
				pwd
				if [ ${NOSAVESTATUS} -eq 0 ]
				then
					#tar cfp - --owner=0 --group=0 -C ${PKG_PKGPATH} . | xz -T${NPROCS} - > ${PKG_PKGPATH}.tar.xz
					create_sfx_package ${PKG_PKGPATH}
				fi
				rsync -aKv ${PKG_PKGPATH}/ ${BIN_PATH}
				sudo rm -rf ${PKG_PKGPATH}
				set +ex
			) >> ${LOG_PATH}/${PKG_NAME}.log 2>&1
			if [ ${KEEPBUILDDIR} -eq 0 ]
			then
				rm -rf ${PKG_BLDPATH}
			fi
		;;
	esac
	### Save build status
	if [ ! -d ${STATUS_PATH} ]
	then
		mkdir -p ${STATUS_PATH}
	fi
	if [ ${NOSAVESTATUS} -eq 0 ]
	then
		md5sum ${PKG_PATH}/${PKG_FILE}.pkg > ${STATUS_PATH}/${PKG_NAME}
	fi
	set +x
	echo "Done."
	echo
	trap - ERR
)}

function is_build_functions () {
	return 0
}
