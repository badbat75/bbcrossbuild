#!/bin/bash

check_core_functions

function check_build_functions () {
	is_core_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Core functions not loaded"
		exit 1
	fi
}

function setbuildenv () {
	OPTS="" OPTS_WITH_VALUE="--target" param2value "${@}"
	local TARGET_ENV=${_param_target:-target}
	case ${TARGET_ENV} in
		native)
			unset QEMU_LD_PREFIX COMMON_CPPFLAGS SYSROOT_GCCVER QEMU_LD_LIBRARY_PATH
			PLATFORM_CFLAGS="-march=native"
			PLATFORM_RUSTFLAGS="-C target-cpu=native"
			COMMON_CFLAGS="-I${GLOBAL_TOOLCHAIN_PATH}/include"
			COMMON_CXXFLAGS="${COMMON_CFLAGS}"
			COMMON_FCFLAGS="${COMMON_CFLAGS}"
			COMMON_LDFLAGS="-L${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -Wl,-rpath -Wl,${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -Wl,-rpath-link -Wl,${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_PKG_CONFIG_LIBDIR="${GLOBAL_TOOLCHAIN_PATH}/lib/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${GLOBAL_TOOLCHAIN_PATH}/share/pkgconfig"
		;;
		cross)
			unset QEMU_LD_PREFIX COMMON_CPPFLAGS SYSROOT_GCCVER QEMU_LD_LIBRARY_PATH
			PLATFORM_CFLAGS="-march=native"
			PLATFORM_RUSTFLAGS="-C target-cpu=native"
			COMMON_CFLAGS="-I${GLOBAL_TOOLCHAIN_PATH}/include"
			COMMON_CFLAGS+=" -I${TOOLCHAIN_PATH}/include"
			COMMON_CXXFLAGS="${COMMON_CFLAGS}"
			COMMON_FCFLAGS="${COMMON_CFLAGS}"
			COMMON_LDFLAGS="-L${TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -L${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -Wl,-rpath -Wl,${TOOLCHAIN_PATH}/lib:${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -Wl,-rpath-link -Wl,${TOOLCHAIN_PATH}/lib"
			COMMON_LDFLAGS+=" -Wl,-rpath-link -Wl,${GLOBAL_TOOLCHAIN_PATH}/lib"
			COMMON_PKG_CONFIG_LIBDIR="${GLOBAL_TOOLCHAIN_PATH}/lib/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${GLOBAL_TOOLCHAIN_PATH}/share/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${TOOLCHAIN_PATH}/lib/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${TOOLCHAIN_PATH}/share/pkgconfig"
		;;
		target)
			if [ "${HARCH}" != "${BARCH}" ]
			then
				export CROSS_COMPILING=yes
				export PKG_CONFIG_ALLOW_CROSS=1
			fi
			export QEMU_LD_PREFIX="${BIN_PATH}"
			#PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
			#PLATFORM_RUSTFLAGS="${HMCPU:+-C target-cpu=${HMCPU}}${HMARCH_RUST:+ -C target-feature=${HMARCH_RUST} }"

			COMMON_PKG_CONFIG_LIBDIR="${BIN_PATH}/lib${TARGET_LIBSUFFIX}/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${BIN_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig"
			COMMON_PKG_CONFIG_LIBDIR+=":${BIN_PATH}${TARGET_PREFIX}/share/pkgconfig"
			COMMON_PKG_CONFIG_SYSROOT="${BIN_PATH}"
			unset SYSROOT_GCCVER QEMU_LD_LIBRARY_PATH
			# Construct build tools flags
			# Build Include search paths
			if [ -d "${DISTOS_PATH}${TARGET_INCLUDEDIR}" ]
			then
				SYSROOT_GCCVER="$(find "${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/" -mindepth 1 -maxdepth 1 -type d -printf '%P\n' | sort -hr | head -n1)"
				SYSROOT="${DISTOS_PATH}"
				### If sysroot is DISTROOT, we need to include BIN_PATH headers and libraries
				COMMON_CFLAGS="-I${BIN_PATH}${TARGET_INCLUDEDIR}"
				COMMON_CXXFLAGS="-I${BIN_PATH}${TARGET_INCLUDEDIR}"
				COMMON_FCFLAGS="-I${BIN_PATH}${TARGET_INCLUDEDIR}"
				COMMON_CPPFLAGS="-I${BIN_PATH}${TARGET_INCLUDEDIR}"
				COMMON_LDFLAGS="-Wl,-rpath-link,${BIN_PATH}/lib${TARGET_LIBSUFFIX} -L${BIN_PATH}/lib${TARGET_LIBSUFFIX}"
				COMMON_LDFLAGS+=" -Wl,-rpath-link,${BIN_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX} -L${BIN_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX}"
				#COMMON_CFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR} ${STD_CFLAGS} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}${TARGET_LIBSUFFIX}"
				#COMMON_CXXFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR} ${STD_CXXFLAGS} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}${TARGET_LIBSUFFIX}"
				#COMMON_FCFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR} ${STD_CXXFLAGS} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}${TARGET_LIBSUFFIX}"
				#COMMON_CPPFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR} ${STD_CPPFLAGS} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}${TARGET_LIBSUFFIX}"
				#COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}/lib${TARGET_LIBSUFFIX} -L${DISTOS_PATH}/lib${TARGET_LIBSUFFIX}"
				#COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX} -L${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX}"
				COMMON_PKG_CONFIG_LIBDIR+=":${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig"
				COMMON_PKG_CONFIG_LIBDIR+=":${DISTOS_PATH}/usr/share/pkgconfig"
				COMMON_PKG_CONFIG_SYSROOT="${DISTOS_PATH}"
				# Try to find if gcc libraries are installed and not yet defined in binary dir, if so set search path on that path
				if [ "$(gcc_sysroot)" == "${DISTOS_PATH}" ]
				then
					if [ -n "${SYSROOT_GCCVER}" ]
					then
						COMMON_CXXFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR}/c++/${SYSROOT_GCCVER} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}/${HARCH}/c++/${SYSROOT_GCCVER}"
						COMMON_CPPFLAGS+=" -I${DISTOS_PATH}${TARGET_INCLUDEDIR}/c++/${SYSROOT_GCCVER} -I${DISTOS_PATH}${TARGET_INCLUDEDIR}/${HARCH}/c++/${SYSROOT_GCCVER}"
						COMMON_LDFLAGS+=" -Wl,-rpath-link,${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER} -L${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
						#echo "TOOLCHAIN: ${TOOLCHAIN}"
						#echo "PKG_TOOLCHAIN: ${PKG_TOOLCHAIN}"
						case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
							gnu)
								COMMON_CFLAGS+=" -B${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX} -B${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
								COMMON_CXXFLAGS+=" -B${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX} -B${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
								COMMON_LDFLAGS+=" -B${DISTOS_PATH}${TARGET_LIBDIR}${TARGET_LIBSUFFIX} -B${DISTOS_PATH}${TARGET_LIBDIR}/gcc/${HARCH}/${SYSROOT_GCCVER}"
								;;
						esac			
					fi
				else
				SYSROOT_GCCVER=$("${TOOLCHAIN_PATH}/bin/${HARCH}-gcc" -dumpversion 2>/dev/null)
				fi
			else
				SYSROOT="${BIN_PATH}"
				if "${TOOLCHAIN_PATH}/bin/${HARCH}-gcc" -dumpversion >/dev/null 2>&1
				then
					SYSROOT_GCCVER=$("${TOOLCHAIN_PATH}/bin/${HARCH}-gcc" -dumpversion 2>/dev/null)
					if [ -d "$(gcc_toolchain_print_searchdirs)" ]
					then
						QEMU_LD_LIBRARY_PATH="$(gcc_toolchain_print_searchdirs):"
					fi
					### Search path in the toolchain gcc libs
					# -enable-version-specific-runtime-libs workaround to fing libgcc_s under lib64 path instead of ${GCC_VER}
					local GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE
					GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE="$(realpath -m "$(gcc_toolchain_print_searchdirs)/../lib64")"
					#if [ -n "${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}" ] && [ -d "${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}" ]
					#then
					#	QEMU_LD_LIBRARY_PATH+="${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}:"
					#fi			
					case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
						gnu)
							if [ -n "${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}" ] && [ -d "${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}" ]
							then
								COMMON_LDFLAGS+=" -L${GCC_SPECIFIC_RUN_TIME_LIBS_ISSUE}"
							fi
						;;
						llvm)
							#COMMON_CFLAGS+=" $(gcc_toolchain_libraries_compilerflags)"
							#COMMON_CXXFLAGS+=" $(gcc_toolchain_libraries_compilerflags) $(gcc_toolchain_libraries_compilerflags)/c++ $(gcc_toolchain_libraries_compilerflags)/c++/${HARCH}"
							COMMON_LDFLAGS+=" $(gcc_toolchain_libraries_linkerflags)"
						;;
					esac
				fi
			fi
			QEMU_LD_LIBRARY_PATH+=${SYSROOT}${TARGET_LIBDIR}${TARGET_LIBSUFFIX}
			case ${PKG_TOOLCHAIN:-${TOOLCHAIN}} in
				gnu)
				;;
			esac
			SYSROOT_FLAGS="--sysroot=${SYSROOT}"
		;;
		*)
			trow_error "${ERROR_GENERIC}" "${TARGET_ENV} not supported!!!"
		;;
	esac
}

function setllvmpollyenv () {
	unset LLVM_EXTRAPOLLYFLAGS
	unset LLVM_KERNELPOLLYFLAGS
	unset LLVM_EXTRAPOLLYFLAGSLIBS
	unset LLVM_KERNELPOLLYFLAGSLIBS

	local OPTIONS
	OPTIONS=${*}
	#local LIBCLANG_RTBUILTINS
	#LIBCLANG_RTBUILTINS="${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
	#if [ ! -z "${OPTIONS}" ] && [ -f ${LIBCLANG_RTBUILTINS} ]

	case x${HMARCH} in
		xarmv*)
				if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
				then
					unset OPTIONS
				fi
			;;
	esac

	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*) local LLVM_ARCH=${HM}
			;;
	esac

	if [ -n "${OPTIONS}" ]
	then
		LLVM_EXTRAPOLLYFLAGS="-mllvm -polly"
		#### Missing _mulodi4 symbol, skip polly build for kernel 
		case ${HM} in
			arm)
				# Need to add static rtbuiltins libraries to arm link to avoid missing _mulodi4 symbol
				# but this is not supported in kernel building so we can't set polly for kernel build
				LLVM_EXTRAPOLLYFLAGSLIBS="-Wl,${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/libclang_rt.builtins-${LLVM_ARCH}.a"
				LLVM_KERNELPOLLYFLAGS=
				;;
			*)
				# Normal behaviour
				LLVM_KERNELPOLLYFLAGS="-mllvm -polly"
				;;
		esac

		if [ "$( echo "${OPTIONS}" | grep -o "all" )" == "all" ]
		then
			local OPTIONS="polly vectorizer parallel"
		fi 
		
		for option in ${OPTIONS}
		do
			case ${option} in
				polly) ;;
				vectorizer)
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					if [ "${HM}" != "arm" ]
					then
						LLVM_KERNELPOLLYFLAGS+=" -mllvm -polly-vectorizer=stripmine"
					fi
				;;
				parallel)
					# polly-parallel not supported in kernel build because libgomp cannot be statically linked to kernel
					LLVM_EXTRAPOLLYFLAGS+=" -mllvm -polly-parallel"
				;;
				*)
					trow_error "${ERROR_GENERIC}" "Error: ${option} not recognized"
				;;
			esac
		done
	fi
}

function settcenv () {
	unset TOOLCHAIN_CC \
		TOOLCHAIN_CXX \
		TOOLCHAIN_CPP \
		TOOLCHAIN_FC \
		TOOLCHAIN_F90 \
		TOOLCHAIN_AR \
		TOOLCHAIN_AS \
		TOOLCHAIN_NM \
		TOOLCHAIN_RANLIB \
		TOOLCHAIN_STRIP \
		TOOLCHAIN_OBJCOPY \
		TOOLCHAIN_OBJDUMP \
		TOOLCHAIN_READELF \
		TOOLCHAIN_LINKER \
		TOOLCHAIN_LD \
		TOOLCHAIN_CC_FOR_BUILD \
		TOOLCHAIN_CXX_FOR_BUILD \
		TOOLCHAIN_CPP_FOR_BUILD \
		TOOLCHAIN_FC_FOR_BUILD \
		TOOLCHAIN_F90_FOR_BUILD \
		TOOLCHAIN_AR_FOR_BUILD \
		TOOLCHAIN_AS_FOR_BUILD \
		TOOLCHAIN_NM_FOR_BUILD \
		TOOLCHAIN_RANLIB_FOR_BUILD \
		TOOLCHAIN_STRIP_FOR_BUILD \
		TOOLCHAIN_OBJCOPY_FOR_BUILD \
		TOOLCHAIN_OBJDUMP_FOR_BUILD \
		TOOLCHAIN_READELF_FOR_BUILD \
		TOOLCHAIN_LINKER_FOR_BUILD \
		TOOLCHAIN_LD_FOR_BUILD \
		TOOLCHAIN_RUSTFLAGS \
		TOOLCHAIN_LINKERFLAGS \
		TOOLCHAIN_COMPFLAGS \
		TOOLCHAIN_CFLAGS_FOR_BUILD \
		TOOLCHAIN_CXXFLAGS_FOR_BUILD \
		TOOLCHAIN_FCFLAGS_FOR_BUILD \
		TOOLCHAIN_CPPFLAGS_FOR_BUILD \
		TOOLCHAIN_LDFLAGS_FOR_BUILD \
		TOOLCHAIN_EXTRA_C_CMD \
		OPTCOMP_FLAGS \
		OPTLINK_FLAGS \
		TOOLCHAIN_CARGO_PROFILE_RELEASE_LTO \
		TOOLCHAIN_CARGO_TARGET

	local TARGET_ENV

	OPTS="" OPTS_WITH_VALUE="--target" param2value "${@}"
	TARGET_ENV="${_param_target:-target}"
	setbuildenv --target "${TARGET_ENV}"

	local TOOLCHAIN="${PKG_TOOLCHAIN:-${TOOLCHAIN}}"
	echo "Toolchain: ${TOOLCHAIN}"
	if [ "${TOOLCHAIN}" == llvm ]
	then
		if [ -z "${PKG_LLVMPOLLYFEATURES}" ]
		then
			setllvmpollyenv "${LLVM_POLLY_FEATURES}"
		else
			eval "echo 'Override LLVM Polly features: ${PKG_LLVMPOLLYFEATURES}' >> ${LOG_FILE}"
			setllvmpollyenv "${PKG_LLVMPOLLYFEATURES}"
		fi
	fi
	echo "Target Environment: ${TARGET_ENV}"
	case ${TOOLCHAIN} in
		gnu)
			TOOLCHAIN_CC_FOR_BUILD=$(which gcc)
			TOOLCHAIN_CPP_FOR_BUILD="$(which gcc) -E"
			if g++ --version > /dev/null 2>&1
			then
				TOOLCHAIN_CXX_FOR_BUILD=$(which g++)
				#TOOLCHAIN_CXXCPP_FOR_BUILD="$(which g++) -E"
			fi
			if gfortran --version > /dev/null 2>&1
			then
				TOOLCHAIN_FC_FOR_BUILD=$(which gfortran)
				TOOLCHAIN_F90_FOR_BUILD=$(which gfortran)
			fi
			TOOLCHAIN_AR_FOR_BUILD=$(which gcc-ar)
			TOOLCHAIN_AS_FOR_BUILD=$(which as)
			TOOLCHAIN_NM_FOR_BUILD=$(which gcc-nm)
			TOOLCHAIN_RANLIB_FOR_BUILD=$(which gcc-ranlib)
			TOOLCHAIN_STRIP_FOR_BUILD=$(which strip)
			TOOLCHAIN_OBJCOPY_FOR_BUILD=$(which objcopy)
			TOOLCHAIN_OBJDUMP_FOR_BUILD=$(which objdump)
			TOOLCHAIN_READELF_FOR_BUILD=$(which readelf)
			TOOLCHAIN_LINKER_FOR_BUILD=${PKG_OVERRIDELD:-${GCC_DEFAULT_LD:-gold}}
			TOOLCHAIN_LINKER_EXE_FOR_BUILD=$(which "ld.${TOOLCHAIN_LINKER_FOR_BUILD}")
			TOOLCHAIN_LINKERFLAGS_FOR_BUILD="-fuse-ld=${TOOLCHAIN_LINKER_FOR_BUILD}"

			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|2|fat|thin)
					OPTCOMP_FLAGS+=" -flto=${LTOPROCS}"
					OPTLINK_FLAGS+=" -fuse-linker-plugin"
					;;
			esac

			case ${TARGET_ENV} in
				native|cross)
					TOOLCHAIN_CC=${TOOLCHAIN_CC_FOR_BUILD}
					TOOLCHAIN_CPP=${TOOLCHAIN_CPP_FOR_BUILD}
					TOOLCHAIN_CXX=${TOOLCHAIN_CXX_FOR_BUILD}
					if flang --version > /dev/null 2>&1
					then
						TOOLCHAIN_FC=${TOOLCHAIN_FC_FOR_BUILD}
						TOOLCHAIN_F90=${TOOLCHAIN_F90_FOR_BUILD}
					fi
					TOOLCHAIN_AR=${TOOLCHAIN_AR_FOR_BUILD}
					TOOLCHAIN_AS=${TOOLCHAIN_AS_FOR_BUILD}
					TOOLCHAIN_NM=${TOOLCHAIN_NM_FOR_BUILD}
					TOOLCHAIN_RANLIB=${TOOLCHAIN_RANLIB_FOR_BUILD}
					TOOLCHAIN_STRIP=${TOOLCHAIN_STRIP_FOR_BUILD}
					TOOLCHAIN_OBJCOPY=${TOOLCHAIN_OBJCOPY_FOR_BUILD}
					TOOLCHAIN_OBJDUMP=${TOOLCHAIN_OBJDUMP_FOR_BUILD}
					TOOLCHAIN_READELF=${TOOLCHAIN_READELF_FOR_BUILD}
					TOOLCHAIN_LINKER=${TOOLCHAIN_LINKER_FOR_BUILD}
					TOOLCHAIN_LINKER_EXE=${TOOLCHAIN_LINKER_EXE_FOR_BUILD}
					TOOLCHAIN_COMPFLAGS="${GNU_EXTRAGCCFLAGS}"
					TOOLCHAIN_EXTRA_C_CMD=""
					TOOLCHAIN_LINKERFLAGS="-fuse-ld=${TOOLCHAIN_LINKER} ${GNU_EXTRALDFLAGS}"
				;;
				target)
					if "${HARCH}-gcc" --version > /dev/null 2>&1
					then
						TOOLCHAIN_CC=$(which "${HARCH}-gcc")
						TOOLCHAIN_CPP="$(which "${HARCH}-gcc") -E"
						if "${HARCH}-g++" --version > /dev/null 2>&1
						then
							TOOLCHAIN_CXX=$(which "${HARCH}-g++")
						fi
						if "${HARCH}-gfortran" --version > /dev/null 2>&1
						then
							TOOLCHAIN_FC=$(which "${HARCH}-gfortran")
							TOOLCHAIN_F90=$(which "${HARCH}-gfortran")
						fi
						TOOLCHAIN_AR=$(which "${HARCH}-gcc-ar")
						TOOLCHAIN_AS=$(which "${HARCH}-as")
						TOOLCHAIN_NM=$(which "${HARCH}-gcc-nm")
						TOOLCHAIN_RANLIB=$(which "${HARCH}-gcc-ranlib")
						TOOLCHAIN_STRIP=$(which "${HARCH}-strip")
						TOOLCHAIN_OBJCOPY=$(which "${HARCH}-objcopy")
						TOOLCHAIN_OBJDUMP=$(which "${HARCH}-objdump")
						TOOLCHAIN_READELF=$(which "${HARCH}-readelf")
						TOOLCHAIN_LINKER=${PKG_OVERRIDELD:-${GCC_DEFAULT_LD:-gold}}
						TOOLCHAIN_LINKER_EXE=$(which "${HARCH}-ld.${TOOLCHAIN_LINKER}")
					fi
					if [ "${PKG_FAULTYCFLAGS:-0}" -eq 1 ]
					then
						TOOLCHAIN_COMPFLAGS="${GNU_EXTRAGCCFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD="${SYSROOT_FLAGS}"
				
					else
						TOOLCHAIN_COMPFLAGS="${SYSROOT_FLAGS} ${GNU_EXTRAGCCFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD=""
					fi
					TOOLCHAIN_LINKERFLAGS="${SYSROOT_FLAGS} -fuse-ld=${TOOLCHAIN_LINKER} ${GNU_EXTRALDFLAGS}"
				;;
			esac
			;;
		llvm)
			TOOLCHAIN_CC_FOR_BUILD=$(which clang)
			TOOLCHAIN_CXX_FOR_BUILD=$(which clang++)
			TOOLCHAIN_CPP_FOR_BUILD="$(which clang) -E"
			if flang --version > /dev/null 2>&1
			then
				TOOLCHAIN_FC_FOR_BUILD=$(which flang)
				TOOLCHAIN_F90_FOR_BUILD=$(which flang)
			fi
			TOOLCHAIN_AR_FOR_BUILD=$(which llvm-ar)
			TOOLCHAIN_AS_FOR_BUILD=$(which llvm-as)
			TOOLCHAIN_NM_FOR_BUILD=$(which llvm-nm)
			TOOLCHAIN_RANLIB_FOR_BUILD=$(which llvm-ranlib)
			TOOLCHAIN_STRIP_FOR_BUILD=$(which llvm-strip)
			TOOLCHAIN_OBJCOPY_FOR_BUILD=$(which llvm-objcopy)
			TOOLCHAIN_OBJDUMP_FOR_BUILD=$(which llvm-objdump)
			TOOLCHAIN_READELF_FOR_BUILD=$(which llvm-readelf)
			TOOLCHAIN_LINKER_FOR_BUILD=${PKG_OVERRIDELD:-${GCC_DEFAULT_LD:-lld}}
			TOOLCHAIN_LINKER_EXE_FOR_BUILD=$(which "ld.${TOOLCHAIN_LINKER_FOR_BUILD}")
			TOOLCHAIN_LINKERFLAGS_FOR_BUILD="-fuse-ld=${TOOLCHAIN_LINKER_FOR_BUILD}"
			case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
				1|fat)
					TOOLCHAIN_COMPFLAGS+=" -flto=full"
					;;
				2|thin)
					TOOLCHAIN_COMPFLAGS+=" -flto=thin"
					;;
			esac

			case ${TARGET_ENV} in
				native|cross)
					TOOLCHAIN_CC=${TOOLCHAIN_CC_FOR_BUILD}
					TOOLCHAIN_CPP=${TOOLCHAIN_CPP_FOR_BUILD}
					TOOLCHAIN_CXX=${TOOLCHAIN_CXX_FOR_BUILD}
					if flang --version > /dev/null 2>&1
					then
						TOOLCHAIN_FC=${TOOLCHAIN_FC_FOR_BUILD}
						TOOLCHAIN_F90=${TOOLCHAIN_F90_FOR_BUILD}
					fi
					TOOLCHAIN_AR=${TOOLCHAIN_AR_FOR_BUILD}
					TOOLCHAIN_AS=${TOOLCHAIN_AS_FOR_BUILD}
					TOOLCHAIN_NM=${TOOLCHAIN_NM_FOR_BUILD}
					TOOLCHAIN_RANLIB=${TOOLCHAIN_RANLIB_FOR_BUILD}
					TOOLCHAIN_STRIP=${TOOLCHAIN_STRIP_FOR_BUILD}
					TOOLCHAIN_OBJCOPY=${TOOLCHAIN_OBJCOPY_FOR_BUILD}
					TOOLCHAIN_OBJDUMP=${TOOLCHAIN_OBJDUMP_FOR_BUILD}
					TOOLCHAIN_READELF=${TOOLCHAIN_READELF_FOR_BUILD}
					TOOLCHAIN_LINKER=${TOOLCHAIN_LINKER_FOR_BUILD}
					TOOLCHAIN_LINKER_EXE=${TOOLCHAIN_LINKER_EXE_FOR_BUILD}
					if [ "${PKG_FAULTYCFLAGS:-0}" -eq 1 ]
					then
						TOOLCHAIN_COMPFLAGS+=" ${LLVM_EXTRACLANGFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD="${LLVM_EXTRAPOLLYFLAGS}"
					else
						TOOLCHAIN_COMPFLAGS+=" ${LLVM_EXTRACLANGFLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD=""
					fi
					TOOLCHAIN_LINKERFLAGS="-fuse-ld=${TOOLCHAIN_LINKER} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS}"
				;;
				target)
					TOOLCHAIN_CC=$(which clang)
					TOOLCHAIN_CPP="$(which clang) -E"
					TOOLCHAIN_CXX=$(which clang++)
					if flang --version > /dev/null 2>&1
					then
						TOOLCHAIN_FC=$(which flang)
						TOOLCHAIN_F90=$(which flang)
					fi
					TOOLCHAIN_AR=$(which llvm-ar)
					TOOLCHAIN_AS=$(which llvm-as)
					TOOLCHAIN_NM=$(which llvm-nm)
					TOOLCHAIN_RANLIB=$(which llvm-ranlib)
					TOOLCHAIN_STRIP=$(which llvm-strip)
					TOOLCHAIN_OBJCOPY=$(which llvm-objcopy)
					TOOLCHAIN_OBJDUMP=$(which llvm-objdump)
					TOOLCHAIN_READELF=$(which llvm-readelf)
					TOOLCHAIN_LINKER=${PKG_OVERRIDELD:-${LLVM_DEFAULT_LD:-lld}}
					TOOLCHAIN_LINKER_EXE=$(which "ld.${TOOLCHAIN_LINKER}")
					if [ "${PKG_FAULTYCFLAGS:-0}" -eq 1 ]
					then
						TOOLCHAIN_COMPFLAGS+=" ${LLVM_EXTRACLANGFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH} ${SYSROOT_FLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
					else
						TOOLCHAIN_COMPFLAGS+=" ${SYSROOT_FLAGS} ${LLVM_EXTRACLANGFLAGS} ${LLVM_EXTRAPOLLYFLAGS}"
						TOOLCHAIN_EXTRA_C_CMD="--target=${HARCH}"
					fi
					TOOLCHAIN_LINKERFLAGS="${SYSROOT_FLAGS} -fuse-ld=${TOOLCHAIN_LINKER} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS}"
				;;
			esac
			;;
	esac
	case ${TOOLCHAIN_LINKER} in
		bfd)
			if [ -n "${SYSROOT_FLAGS}" ]
			then
				TOOLCHAIN_LINKERFLAGS+=" -Wl,${SYSROOT_FLAGS}"
			fi
			;;
		gold)
			if [ -n "${SYSROOT_FLAGS}" ]
			then
				TOOLCHAIN_LINKERFLAGS+=" -Wl,${SYSROOT_FLAGS}"
			fi
			TOOLCHAIN_LINKERFLAGS+=" -Wl,--threads -Wl,--thread-count,${NPROCS}"
			TOOLCHAIN_LINKERFLAGS_FOR_BUILD+=" -Wl,--threads -Wl,--thread-count,${NPROCS}"
			;;
		lld)
			TOOLCHAIN_LINKERFLAGS+=" -Wl,--thinlto-jobs=${NPROCS}"
			TOOLCHAIN_LINKERFLAGS_FOR_BUILD+=" -Wl,--thinlto-jobs=${NPROCS}"
			;;
	esac
			
	if [ "${PKG_DEBUG:-${DEBUG:-0}}" -eq 1 ]
	then
		OPTLEVEL=2
		OPTCOMP_FLAGS+="-g"
	fi

	for param in ${TOOLCHAIN_EXTRA_C_CMD} ${SYSROOT_FLAGS} ${OPTLINK_FLAGS} ${COMMON_LDFLAGS} ${TOOLCHAIN_LINKERFLAGS} ${PKG_LDFLAGS}
	do
		TOOLCHAIN_RUSTFLAGS+="-C link-arg=${param} "
	done
	TOOLCHAIN_RUSTFLAGS+="${PLATFORM_RUSTSYSROOT} ${PLATFORM_RUSTFLAGS} ${OPTCOMP_RUSTFLAGS} -C linker=${TOOLCHAIN_CC}"
	
	TOOLCHAIN_CFLAGS_FOR_BUILD="-I${GLOBAL_TOOLCHAIN_PATH}/include"
	TOOLCHAIN_CFLAGS_FOR_BUILD+=" -I${TOOLCHAIN_PATH}/include"
	TOOLCHAIN_CXXFLAGS_FOR_BUILD="-I${GLOBAL_TOOLCHAIN_PATH}/include"
	TOOLCHAIN_CXXFLAGS_FOR_BUILD+=" -I${TOOLCHAIN_PATH}/include"
	TOOLCHAIN_CPPFLAGS_FOR_BUILD=
	TOOLCHAIN_FCFLAGS_FOR_BUILD=
	TOOLCHAIN_LDFLAGS_FOR_BUILD="-L${GLOBAL_TOOLCHAIN_PATH}/lib"
	TOOLCHAIN_LDFLAGS_FOR_BUILD+=" -L${TOOLCHAIN_PATH}/lib"
	TOOLCHAIN_LDFLAGS_FOR_BUILD+=" -Wl,-rpath -Wl,${TOOLCHAIN_PATH}/lib:${GLOBAL_TOOLCHAIN_PATH}/lib"
	TOOLCHAIN_LDFLAGS_FOR_BUILD+=" -Wl,-rpath-link -Wl,${TOOLCHAIN_PATH}/lib"
	TOOLCHAIN_LDFLAGS_FOR_BUILD+=" -Wl,-rpath-link -Wl,${GLOBAL_TOOLCHAIN_PATH}/lib"
	OPTCOMP_FLAGS+=" -O${OPTLEVEL:-2}"

	case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
		1|fat)	TOOLCHAIN_CARGO_PROFILE_RELEASE_LTO=fat ;;
		2|thin)	TOOLCHAIN_CARGO_PROFILE_RELEASE_LTO=thin ;;
		*)		TOOLCHAIN_CARGO_PROFILE_RELEASE_LTO=off ;;
	esac

	case ${PKG_TARGET_ENV} in
		native|cross)	TOOLCHAIN_CARGO_TARGET=${BM}-unknown-${BOS}-${BLIBC} ;;
		target) 		TOOLCHAIN_CARGO_TARGET=${HM}-unknown-${HOS}-${HLIBC} ;;
	esac
}

function create_environment_source () {
	### Munge environment variables depending on target build:
	### --target {native|cross|target}
	###		native:	Build Arch_A = Host Arch_A = Target Arch_A - Installed in Global Toolchain
	###		cross:	Build Arch_A = Host Arch_A / Target Arch_B - Installed in Project Toolchain
	###		target:	Build Arch_A / Host Arch_B = Target Arch_B - Installed in SYSROOT (Default)
	OPTS="" OPTS_WITH_VALUE="--target" param2value "${@}"
	local TARGET_ENV=${_param_target:-target}
	settcenv --target "${TARGET_ENV}"
	if [ ! -d "${PKG_BLDPATH}" ]
	then
		run_cmd "mkdir -pv \"${PKG_BLDPATH}\""
	fi
	case ${PKG_DISABLECCWRAPPER:-0} in
		0) local ENV_CCWRAPPER=${CCWRAPPER} ;;
		1) local ENV_CCWRAPPER= ;;
	esac
	cat <<-EOF > "${PKG_BLDPATH}/environment.source"
		#################################################################################
		###### ${PKG_FULLNAME}
		### Source file with all the environment specified
		### Tool chain: ${PKG_TOOLCHAIN:-${TOOLCHAIN}}
		### C Wrapper: ${ENV_CCWRAPPER}
		### Build type: ${BUILD_PROCESS}
		### Target: ${TARGET_ENV} [${_param_target}]
		###### Other environment variables:
		DISTOS_PATH=${DISTOS_PATH}
		BIN_PATH=${BIN_PATH}
		PKG_SRCPATH=${PKG_SRCPATH}
		PKG_BLDPATH=${PKG_BLDPATH}
		PKG_PKGPATH=${PKG_PKGPATH}
		###
		PLATFORM_CFLAGS='${PLATFORM_CFLAGS}'
		OPTCOMP_FLAGS='${OPTCOMP_FLAGS}'
		OPTLINK_FLAGS='${OPTLINK_FLAGS}'
		#################################################################################

		export SYSROOT='${SYSROOT}'
		export CC_FOR_BUILD='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CC_FOR_BUILD}'
		export CFLAGS_FOR_BUILD='-march=native${OPTCOMP_FLAGS} ${TOOLCHAIN_CFLAGS_FOR_BUILD}'
		export CPP_FOR_BUILD='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CPP_FOR_BUILD}'
		export CPPFLAGS_FOR_BUILD='-march=native${OPTCOMP_FLAGS} ${TOOLCHAIN_CPPFLAGS_FOR_BUILD}'
	EOF
	if [ -n "${TOOLCHAIN_CXX_FOR_BUILD}" ]
	then
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
			export CXX_FOR_BUILD='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CXX_FOR_BUILD}'
			export CXXFLAGS_FOR_BUILD='-march=native${OPTCOMP_FLAGS} ${TOOLCHAIN_CXXFLAGS_FOR_BUILD}'
		EOF
	fi
	if [ -n "${TOOLCHAIN_FC_FOR_BUILD}" ]
	then
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
			export FC_FOR_BUILD='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_FC_FOR_BUILD}'
			export FFLAGS_FOR_BUILD='-march=native${OPTCOMP_FLAGS} ${TOOLCHAIN_FCFLAGS_FOR_BUILD}'
			export F90_FOR_BUILD='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_F90_FOR_BUILD}'
			export F90FLAGS_FOR_BUILD='-march=native${OPTCOMP_FLAGS} ${TOOLCHAIN_FCFLAGS_FOR_BUILD}'
		EOF
	fi
	cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
		export LINKER_EXE_FOR_BUILD='${TOOLCHAIN_LINKER_EXE_FOR_BUILD}'
		export LDFLAGS_FOR_BUILD='${TOOLCHAIN_LINKERFLAGS_FOR_BUILD} ${TOOLCHAIN_LDFLAGS_FOR_BUILD}'
		export AR_FOR_BUILD='${TOOLCHAIN_AR_FOR_BUILD}'
		export AS_FOR_BUILD='${TOOLCHAIN_AS_FOR_BUILD}'
		export NM_FOR_BUILD='${TOOLCHAIN_NM_FOR_BUILD}'
		export RANLIB_FOR_BUILD='${TOOLCHAIN_RANLIB_FOR_BUILD}'
		export STRIP_FOR_BUILD='${TOOLCHAIN_STRIP_FOR_BUILD}'
		export OBJCOPY_FOR_BUILD='${TOOLCHAIN_OBJCOPY_FOR_BUILD}'
		export OBJDUMP_FOR_BUILD='${TOOLCHAIN_OBJDUMP_FOR_BUILD}'
		export READELF_FOR_BUILD='${TOOLCHAIN_READELF_FOR_BUILD}'

	EOF
	if [ -n "${TOOLCHAIN_CC}" ]
	then
		# shellcheck disable=SC2153
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
		export CC='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CC_EXE='${TOOLCHAIN_CC}'
		export CFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}'
		export CPP='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CPP}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
		export CPPFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CPPFLAGS} ${PLATFORM_CFLAGS} ${PKG_CPPFLAGS}'
	EOF
	fi
	if [ -n "${TOOLCHAIN_CXX}" ]
	then
		# shellcheck disable=SC2153
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
			export CXX='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_CXX}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
			export CXX_EXE='${TOOLCHAIN_CXX}'
			export CXXFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CXXFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CXXFLAGS}'
		EOF
	fi
	if [ -n "${TOOLCHAIN_FC}" ]
	then
		# shellcheck disable=SC2153
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
			export FC='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_FC}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
			export FFLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
			export F90='${ENV_CCWRAPPER:+${ENV_CCWRAPPER} }${TOOLCHAIN_F90}${TOOLCHAIN_EXTRA_C_CMD:+ ${TOOLCHAIN_EXTRA_C_CMD}}'
			export F90FLAGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_FCFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_FCFLAGS}'
		EOF
	fi
	cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
		export RUSTFLAGS='${TOOLCHAIN_RUSTFLAGS}'
		export LINKER_EXE='${TOOLCHAIN_LINKER_EXE}'
		export LDFLAGS='${TOOLCHAIN_LINKERFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} ${PKG_LDFLAGS}'

		export AR='${TOOLCHAIN_AR}'
		export AS='${TOOLCHAIN_AS}'
		export NM='${TOOLCHAIN_NM}'
		export RANLIB='${TOOLCHAIN_RANLIB}'
		export STRIP='${TOOLCHAIN_STRIP}'
		export OBJCOPY='${TOOLCHAIN_OBJCOPY}'
		export OBJDUMP='${TOOLCHAIN_OBJDUMP}'
		export READELF='${TOOLCHAIN_READELF}'

		export LD_LIBRARY_PATH='${LD_LIBRARY_PATH}${PKG_LD_LIBRARY_PATH:+:${PKG_LD_LIBRARY_PATH}}'
		export PATH='${PATH}'
	EOF

	case ${TARGET_ENV} in
		cross|native)
			cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
				export PKG_CONFIG='$(which pkg-config 2>/dev/null || :)'
				export PKG_CONFIG_LIBDIR=${TOOLCHAIN_PATH}/lib/pkgconfig:${GLOBAL_TOOLCHAIN_PATH}/lib/pkgconfig:/usr/lib64/pkgconfig
				export PKG_CONFIG_SYSROOT_DIR=
				export PKG_CONFIG_ALLOW_CROSS=
			EOF
		;;
		target)
			cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
				export PKG_CONFIG='$(which "${HARCH}-pkg-config" 2>/dev/null || :)'
				export PKG_CONFIG_LIBDIR='${COMMON_PKG_CONFIG_LIBDIR}'
				export PKG_CONFIG_SYSROOT_DIR='${PKG_CONFIG_SYSROOT_DIR:-${COMMON_PKG_CONFIG_SYSROOT}}'
				export PKG_CONFIG_ALLOW_CROSS='${PKG_CONFIG_ALLOW_CROSS}'
			EOF
			if [ -f "${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate" ] && [ "${PKG_DISABLECROSSPYTHON:-0}" -eq 0 ]
			then
				echo -e "\nsource ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate\n" >> "${PKG_BLDPATH}/environment.source"
			fi
		;;
	esac

	cat <<-EOF >> "${PKG_BLDPATH}/environment.source"

		export PYTHON_FOR_BUILD=${PYTHON_FOR_BUILD}
		export PYTHONPATH=${PYTHONPATH}

		export CARGO_HOME='${CARGO_HOME}'
		export CARGO_PROFILE_RELEASE_OPT_LEVEL=${OPTLEVEL:-2}
		export CARGO_PROFILE_RELEASE_LTO=${TOOLCHAIN_CARGO_PROFILE_RELEASE_LTO}
		export CARGO_TARGET='${TOOLCHAIN_CARGO_TARGET}'
		export RUSTUP_HOME='${RUSTUP_HOME}'
		export BINDGEN_EXTRA_CLANG_ARGS='${TOOLCHAIN_COMPFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS} ${PKG_CFLAGS}'

		export QEMU_LD_PREFIX='${SYSROOT}'
		export QEMU_LD_LIBRARY_PATH='${QEMU_LD_LIBRARY_PATH}'

		export ENVIRONMENT_SOURCE_PATH='${PWD}'
	EOF
	if [ "$(basename "${ENV_CCWRAPPER:-nope}")" == "sccache" ]
	then
		cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
			
			# sccache parameters
			export RUSTC_WRAPPER='${ENV_CCWRAPPER}'
		EOF
	fi
	cat <<-EOF >> "${PKG_BLDPATH}/environment.source"
	
		export LC_ALL=POSIX
		export CONFIG_SITE='${SYSROOT}/usr/share/config/site'
	EOF
}

function preparesources () {

	cd "${PKG_SRCPATH}"
	if [ "x${PATCHDEB}" != x ]
	then
		echo -n "${SPACES}Retrieve DEB patch info..."
		[ ! -d "${PKG_SRCPATH}/debian" ] && mkdir -p "${PKG_SRCPATH}/debian"
		ARCHIVEDIRS="debian" download_uncompress "${PATCHDEB}" "${PKG_SRCPATH}/debian"
		echo "Done."
		if [ -f "${PKG_SRCPATH}/debian/patches/series" ]
		then
			while read -r patch
			do
				if [[ ! "${patch}" =~ ^\#.*|^//.* ]]
				then
					local PATCHARRAY=("${patch}")
					if [ -n "${PATCHARRAY[0]}" ]
					then
						echo -n "${SPACES}Applying ${PATCHARRAY[0]} patch..."
						run_cmd "patch ${PATCHARRAY[1]:--p1} < ${PKG_SRCPATH}/debian/patches/${PATCHARRAY[0]}"
						echo "Done."
					fi
				fi
			done <"${PKG_SRCPATH}/debian/patches/series"
		else
			echo "${SPACES}\"series\" patch list file does not exist."
		fi
	fi
	IFS=,
	for scanpatch in ${PATCHES:-}
	do
		if [[ ${scanpatch} =~ ^https?://|^ftp:// ]]
		then
			echo -n "${SPACES}Downloading patch[set]..."	
			NODELETEDESTDIR=1 download_uncompress "${scanpatch}" "${PKG_SRCPATH}/bbxb_patches"
		else
			echo -n "${SPACES}Copying $scanpatch patch..."
			run_cmd "mkdir -pv \"${PKG_SRCPATH}/bbxb_patches\""
			run_cmd "cp -v \"${PATCH_PATH}/${scanpatch}\" \"${PKG_SRCPATH}/bbxb_patches\""
		fi
	done
	unset IFS
	if [ -d "${PKG_SRCPATH}/bbxb_patches" ]
	then
		find "${PKG_SRCPATH}/bbxb_patches" -type f -print0 | xargs -0 -I{} -n1 bash -c "
			PATCH=\"\$(basename {})\"
			echo -n \"Applying \${PATCH} patch...\"
			echo \"\$ patch -p1 < {}\"
			patch -f -p1 < \"{}\" >> ${LOG_FILE} 2>&1
			echo \"Done.\"
		"
	fi
	if [ -f "${PKG_SRCPATH}/${CONF_CMD}" ] && [ ! -x "${PKG_SRCPATH}/${CONF_CMD}" ]
	then
		run_cmd "chmod +x ${PKG_SRCPATH}/${CONF_CMD}" >> "${LOG_FILE}"
		#"
	fi
	echo -n "${SPACES}"
	cd "${BB_HOME}"
}

function downloadonly () {
	if [ -d "${PKG_BLDPATH}" ]
	then
		cd "${PKG_BLDPATH}"
		echo "create_environment_source --target ${PKG_TARGET_ENV}" | log_buffer info
	fi
}

function configmake () {	
	if [ "${PKG_AUTOCONF:-0}" != 0 ]
	then
		if [ "${PKG_AUTOCONF:-0}" == 1 ]
		then
			PKG_AUTOCONF=${AUTOCONF_VER}
		fi
		echo "# Setting up ${PKG_AUTOCONF:-${AUTOCONF_VER}} ${PKG_AUTOMAKE:-${AUTOMAKE_VER}} ${PKG_LIBTOOL:-${LIBTOOL_VER}} ${PKG_GETTEXT:-${GETTEXT_VER}}"
		setup_autotools "${PKG_AUTOCONF:-${AUTOCONF_VER}}" "${PKG_AUTOMAKE:-${AUTOMAKE_VER}}" "${PKG_LIBTOOL:-${LIBTOOL_VER}}" "${PKG_GETTEXT:-${GETTEXT_VER}}"
		if [ "${AUTOCONF_PATH}" == "autoscan" ]
		then
			if [ "${PKG_COPYSRC:-0}" -eq 0 ]
			then
				pushd "${PKG_SRCPATH}"
			else
				pushd "${PKG_BLDPATH}"
			fi
			AUTOCONF_PATH="$(find . -name "configure.ac" -printf '%P\n' | xargs dirname | sort | tr '\n' ',' | sed 's/,$//' )"
			echo "Scanned AUTOCONF_PATH: ${AUTOCONF_PATH}"
			popd
		fi
		#### Multi process autoreconf 
		echo -n "${AUTOCONF_PATH:-.}" | xargs --verbose -P"${AUTOCONF_THREADS:-${NPROCS}}" -d',' -I{} bash -c "PKG_AUTOMAKE=${PKG_AUTOMAKE} smart_autoreconf ${PKG_SRCPATH}/{} || exit 255"
	fi
	if [ "${PKG_COPYSRC:-0}" -eq 1 ] 
	then
		run_cmd "cp -rp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\"" >> "${LOG_FILE}"
	else
		run_cmd "mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	fi
	pushd "${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	if [ "${STD_CONF_FLAGS:-1}" -eq 1 ]
	then
		CONF_FLAGS="--prefix=${INSTALL_PREFIX} --exec-prefix=${INSTALL_EXECPREFIX} --libdir=${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX} \
					--includedir=${INSTALL_INCLUDEDIR} --sysconfdir=${INSTALL_SYSCONFDIR} --localstatedir=${INSTALL_LOCALSTATEDIR} \
					${CONF_FLAGS}"
		if [ "${PKG_OVERRIDESHARED:-${BUILD_LIBSHARED}}" -eq 1 ]
		then
			CONF_FLAGS=" --enable-shared ${CONF_FLAGS}"
		else
			CONF_FLAGS=" --disable-shared ${CONF_FLAGS}"
		fi
		if [ "${PKG_OVERRIDESTATIC:-${BUILD_LIBSTATIC}}" -eq 1 ]
		then
			CONF_FLAGS=" --enable-static ${CONF_FLAGS}"
		else
			CONF_FLAGS=" --disable-static ${CONF_FLAGS}"
		fi
		case ${PKG_TARGET_ENV} in
			native)
				CONF_FLAGS="--build=${BARCH} --host=${BARCH} ${CONF_FLAGS}"
			;;
			cross)
				CONF_FLAGS="--build=${BARCH} --host=${BARCH} ${CONF_FLAGS}"
			;;
			target)
				CONF_FLAGS="--build=${BARCH} --host=${HARCH} --with-sysroot=${BIN_PATH} ${CONF_FLAGS}"
			;;
		esac
	fi
	if [[ "${CONF_CMD}" =~ ^\./.* ]]
	then
		local RUNCONFIG_CMD="${CONF_CMD}"
	else
		if [ "${PKG_COPYSRC:-0}" -eq 0 ]
		then
			local RUNCONFIG_CMD="${PKG_SRCPATH}${CONF_PATH:+/${CONF_PATH}}/${CONF_CMD:-configure}"
		else
			local RUNCONFIG_CMD="${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}/${CONF_CMD:-configure}"
		fi
	fi
	cat >runconfig.sh <<-EOF
		#!/bin/bash
		source "${PKG_BLDPATH}/environment.source"
		${CONF_ENV} ${RUNCONFIG_CMD} ${CONF_FLAGS} ${CONF_VARS} \${@}
	EOF
	cat >runmake.sh <<-EOF
		#!/bin/bash
		source "${PKG_BLDPATH}/environment.source"
		${PKG_MAKEENV} ${GLOBAL_TOOLCHAIN_PATH}/bin/make V=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${PKG_MAKEVARS} \${@}
	EOF
	run_cmd "chmod +x runconfig.sh runmake.sh"

	run_cmd "./runconfig.sh"
	IFS=,
	for target in ${PKG_MAKETARGETS:-all,install}
	do
		unset IFS
		echo "Making ${target}..."
		run_cmd "./runmake.sh ${target}"
	done
	unset IFS
	popd
}

function simplemake () {
	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* ${PKG_BLDPATH}"
	cd "${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	cat >runmake.sh <<-EOF
		#!/bin/bash -x
		source "${PKG_BLDPATH}/environment.source"
		${PKG_MAKEENV} ${GLOBAL_TOOLCHAIN_PATH}/bin/make V=${MAKEVERBOSE:-0} PREFIX=${INSTALL_PREFIX} LIBSUFFIX=${INSTALL_LIBSUFFIX} DESTDIR=${PKG_PKGPATH} ${PKG_MAKEVARS} \${@}
	EOF
	run_cmd "chmod +x runmake.sh"
	IFS=,
	for target in ${PKG_MAKETARGETS:-all,install}
	do
		unset IFS
		echo "Making ${target}..."
		run_cmd "./runmake.sh ${target}"
	done
	unset IFS
	cd "${BB_HOME}"
}

function cmakebuild () {
	run_cmd "mkdir -p ${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	cd "${PKG_BLDPATH}"
	if [ "${PKG_OVERRIDESHARED:-${BUILD_LIBSHARED}}" -eq 1 ]
	then
		CONF_FLAGS+=" -DBUILD_SHARED_LIBS=ON"
	else
		CONF_FLAGS+=" -DBUILD_SHARED_LIBS=OFF"
	fi
	if [ "${PKG_OVERRIDESTATIC:-${BUILD_LIBSTATIC}}" -eq 1 ]
	then
		CONF_FLAGS+=" -DBUILD_STATIC_LIBS=ON"
	else
		CONF_FLAGS+=" -DBUILD_STATIC_LIBS=OFF"
	fi
	local NINJA_FLAGS

	NINJA_FLAGS="$(if [ "${MAKEVERBOSE}" -eq 1 ]; then echo -n '-v'; fi) -j${NPROCS}"
	CMAKE_GENERATOR=${CMAKE_GENERATOR:-"Unix Makefiles"}

	echo "CCWRAPPER=\"\" create_environment_source --target ${PKG_TARGET_ENV}" | log_buffer info
	CCWRAPPER="" create_environment_source --target "${PKG_TARGET_ENV}"
	
	cat >runconfig.sh <<-EOF
		#!/bin/bash -x
		source "${PKG_BLDPATH}/environment.source"
		${CONF_ENV} ${GLOBAL_TOOLCHAIN_PATH}/bin/cmake ${PKG_SRCPATH}${CONF_PATH:+/${CONF_PATH}} \\
		   -G "${CMAKE_GENERATOR}" \\
		   -DCMAKE_BUILD_TYPE="Release" \\
		   -DTOOLCHAIN_PREFIX=${HARCH}- \\
		   -DCMAKE_SYSROOT=${SYSROOT} \\
		   -DCMAKE_C_COMPILER_LAUNCHER=${CCWRAPPER} \\
		   -DCMAKE_CXX_COMPILER_LAUNCHER=${CCWRAPPER} \\
		   -DCMAKE_AR=\${AR} \\
		   -DCMAKE_RANLIB=\${RANLIB} \\
		   -DCMAKE_STRIP=\${STRIP} \\
		   -DCMAKE_CROSSCOMPILING:BOOL=ON \\
		   -DCMAKE_SKIP_RPATH:BOOL=ON \\
		   -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \\
		   -DCMAKE_INSTALL_LIBDIR="${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}" \\
		   -DLIB_SUFFIX="${INSTALL_LIBSUFFIX}" \\
		   -DCMAKE_INSTALL_INCLUDEDIR="${INSTALL_INCLUDEDIR}" \\
		   -DCMAKE_INSTALL_SYSCONFDIR="${INSTALL_SYSCONFDIR}" \\
		   -DCMAKE_INSTALL_DATADIR="${INSTALL_SHAREDIR}" \\
		   -DCMAKE_INSTALL_PACKAGEDIR="${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/cmake" \\
		   -DCMAKE_MODULE_PATH="${SYSROOT}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/cmake" \\
		   ${CONF_FLAGS}
	EOF
	echo -e "\nCMake generator: \"${CMAKE_GENERATOR}\"\n" | log_buffer info
	case "${CMAKE_GENERATOR}" in
		"Ninja")
			cat >runmake.sh <<-EOF
				#!/bin/bash -x
				source "${PKG_BLDPATH}/environment.source"
				${PKG_MAKEENV} DESTDIR=${PKG_PKGPATH} ${GLOBAL_TOOLCHAIN_PATH}/bin/ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} \${@}
			EOF
		;;
		"Unix Makefiles")
			cat >runmake.sh <<-EOF
				#!/bin/bash -x
				source "${PKG_BLDPATH}/environment.source"
				${PKG_MAKEENV} ${GLOBAL_TOOLCHAIN_PATH}/bin/make VERBOSE=${MAKEVERBOSE:-0} DESTDIR=${PKG_PKGPATH} ${PKG_MAKEVARS} \${@}
			EOF
		;;
	esac
	run_cmd "chmod +x runconfig.sh runmake.sh"
	run_cmd "./runconfig.sh"
	IFS=,
	for target in ${PKG_MAKETARGETS:-all,install}
	do
		unset IFS
		echo "Making ${target}..."
		run_cmd "./runmake.sh ${target}"
	done
	unset IFS
	cd "${BB_HOME}"
}

function mesonninja () {
	function createmesoncross () {	
		function buildmesonargs () {
			local FIRST=1
			for flag in ${1}
			do
				if [ ${FIRST} -ne 1 ]
				then
					echo -n ", "
				fi
				echo -n "'${flag}'"
			local FIRST=0
			done
			echo
		}
		local C C_ARGS C_LINK_ARGS CPP CPP_ARGS CPP_LINK_ARGS FORTRAN FORTRAN_ARGS FORTRAN_LINK_ARGS
		# shellcheck source=/dev/null
		source "${PKG_BLDPATH}/environment.source"
		C=$(buildmesonargs "${CC}")
		C_ARGS=$(buildmesonargs "${CFLAGS}")
		C_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
		CPP=$(buildmesonargs "${CXX}")
		CPP_ARGS=$(buildmesonargs "${CXXFLAGS}")
		CPP_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
		if [ -n "${FC}" ]
		then
			FORTRAN=$(buildmesonargs "${FC}")
			FORTRAN_ARGS=$(buildmesonargs "${FFLAGS}")
			FORTRAN_LINK_ARGS=$(buildmesonargs "${LDFLAGS}")
		fi
		cat > "cross-${PLATFORM_NAME}" <<-EOF
			[binaries]
			c = [${C}]
			c_ld = '$(echo "${LD}" | sed "s/ld.//;s/${HARCH}-//" )'
			cpp = [${CPP}]
			cpp_ld = '$(echo "${LD}" | sed "s/ld.//;s/${HARCH}-//" )'
			fortran = [${FORTRAN}]
			ar = '${AR}'
			strip = '${STRIP}'
			nm = '${NM}'
			ranlib = '${RANLIB}'
			pkgconfig = '${PKG_CONFIG}'
			python = 'cross-python3'
			exe_wrapper = 'qemu-${HM}-static'

			[host_machine]
			system = '${HOS}'
			cpu_family = '${HM}'
			cpu = '${HMCPU}'
			endian = '${HMENDIAN}'

			[properties]
			sys_root = '${SYSROOT}'
			c_args = [${C_ARGS}]
			cpp_args = [${CPP_ARGS}]
			fortran_args= [${FORTRAN_ARGS}]
			c_link_args = [${C_LINK_ARGS}]
			cpp_link_args = [${CPP_LINK_ARGS}]
			fortran_link_args = [${FORTRAN_LINK_ARGS}]
		EOF
		run_cmd "cat cross-${PLATFORM_NAME}"
	}

	local MESON_FLAGS

	run_cmd "mkdir -p ${PKG_BLDPATH}"
	cd "${PKG_BLDPATH}"
	case ${TOOLCHAIN} in
		### CPPFLAGS --sysroot is not passed to preprocessor
		llvm) PKG_FAULTYCFLAGS=1 ;;
	esac
	if [ "${STD_CONF_FLAGS:-1}" -eq 1 ]
	then
		MESON_FLAGS="--prefix=${INSTALL_PREFIX} --libdir=${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX} --includedir=${INSTALL_INCLUDEDIR} \
			--sysconfdir=${INSTALL_SYSCONFDIR} --localstatedir=${INSTALL_LOCALSTATEDIR} --datadir=${INSTALL_SHAREDIR} ${CONF_FLAGS}"
		if [ "${PKG_OVERRIDESHARED:-${BUILD_LIBSHARED}}" -eq 0 ] && [ "${PKG_OVERRIDESTATIC:-${BUILD_LIBSTATIC}}" -eq 1 ]
		then
			MESON_FLAGS+=" --default-library=static"
		fi
		if [ "${PKG_OVERRIDESHARED:-${BUILD_LIBSHARED}}" -eq 1 ] && [ "${PKG_OVERRIDESTATIC:-${BUILD_LIBSTATIC}}" -eq 0 ]
		then
			MESON_FLAGS+=" --default-library=shared"
		fi
		if [ "${PKG_OVERRIDESHARED:-${BUILD_LIBSHARED}}" -eq 1 ] && [ "${PKG_OVERRIDESTATIC:-${BUILD_LIBSTATIC}}" -eq 1 ]
		then
			MESON_FLAGS+=" --default-library=both"
		fi
	fi
	MESON_FLAGS+=" --buildtype=release -Db_ndebug=true -Db_pie=true"
	case ${PKG_OVERRIDELTO:-${LTOENABLE:-0}} in
		0) ;;
		*) MESON_FLAGS+=" -Db_lto=true" ;;
	esac
	local NINJA_FLAGS
	NINJA_FLAGS="$( if [ "${MAKEVERBOSE}" -eq 1 ]; then echo -n ' -v'; fi ) -j\"${NPROCS}\""
	case ${PKG_TARGET} in
		cross|native) ;;
		*)
			createmesoncross
			MESON_FLAGS+=" --cross-file cross-${PLATFORM_NAME}"
		;;
	esac
	cat > runconfig.sh <<-EOF
		#!/bin/bash -x
		source "${PKG_BLDPATH}/environment.source"
		${CONF_ENV} ${GLOBAL_TOOLCHAIN_PATH}/bin/meson ${PKG_SRCPATH} ${PKG_BLDPATH} ${MESON_FLAGS} ${CONF_FLAGS} \${@}	
	EOF
	cat >runmake.sh <<-EOF
		#!/bin/bash -x
		source "${PKG_BLDPATH}/environment.source"
		${PKG_MAKEENV} DESTDIR=${PKG_PKGPATH} ${GLOBAL_TOOLCHAIN_PATH}/bin/ninja ${NINJA_FLAGS} ${PKG_MAKEVARS} \${@}
	EOF
	run_cmd "chmod +x runconfig.sh runmake.sh"
	run_cmd "./runconfig.sh"
	IFS=,
	for target in ${PKG_MAKETARGETS:-all,install}
	do
		unset IFS
		echo "Making ${target}..."
		run_cmd "./runmake.sh ${target}"
	done
	unset IFS
	cd "${BB_HOME}"
}

function cargobuild () {

	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\""
	cd "${PKG_BLDPATH}"
	# shellcheck disable=SC2034
	cat >runmake.sh <<-EOF
		#!/bin/bash -x
		source environment.source

		case \${1} in
		  install)
		    if [ ! -d "\${PKG_PKGPATH}${INSTALL_EXECPREFIX}/bin" ]
		    then
		        mkdir -pv "\${PKG_PKGPATH}${INSTALL_EXECPREFIX}/bin"
		    fi
		    if [ ! -d "\${PKG_PKGPATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}" ]
		    then
		        mkdir -pv "\${PKG_PKGPATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}"
		    fi
			$(
				# shellcheck source=/dev/null
				source environment.source
				for file in ${CARGO_BINLIST}
				do
					echo "    cp -fpv \"target/${CARGO_TARGET}/release/${file}\" \"${PKG_PKGPATH}${INSTALL_EXECPREFIX}/bin/${file}\""
				done
				for file in ${CARGO_LIBLIST}
				do
					echo "    cp -fpv \"target/${CARGO_TARGET}/release/${file}\" \"${PKG_PKGPATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/${file}\""
				done
			)
		  ;;
		  *)
		    cargo build $( if [ "${MAKEVERBOSE:-0}" -eq 1 ]; then echo -n "--verbose"; fi ) --release ${CONF_FLAGS} --target=\${CARGO_TARGET}
		  ;;
		esac
	EOF
	run_cmd "chmod +x runmake.sh"
	run_cmd "./runmake.sh"
	run_cmd "./runmake.sh install"
	cd "${BB_HOME}"
}

function kernelmodbuild () {

	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\""
	cd "${PKG_BLDPATH}"

	if [ ! -f "${PKG_BLDPATH}/Makefile" ]
	then
		cat <<-EOF > "${PKG_BLDPATH}/Makefile"
			KDIR:=${PKG_KERNEL_BLDPATH}
			KMOD:=${PKG_BLDPATH}
			obj-m:=${PKG_KERNEL_MOD}.o
			${PKG_KERNEL_MOD}-y:=
		EOF
	fi
	run_cmd "cat ${PKG_BLDPATH}/Makefile"

	if [ "${PKG_KERNEL_LOCALBUILD:-0}" -eq 0 ]
	then
		local BUILD_OPTION="-C ${PKG_KERNEL_BLDPATH} "
	fi

	run_cmd "KCFLAGS=\"${PKG_CFLAGS}\" ${PKG_KERNEL_BLDPATH}/make4kern.sh ${BUILD_OPTION}M=${PWD} ${PKG_MAKEVARS} modules"
	# shellcheck disable=SC2153
	run_cmd "eval ${PKG_KERNEL_BLDPATH}/make4kern.sh ${BUILD_OPTION}M=${PWD} ${PKG_MAKEVARS} INSTALL_MOD_PATH=${PKG_PKGPATH} INSTALL_MOD_DIR=${PKG_KERNEL_MODPATH} modules_install"
	run_cmd "rm -f ${PKG_PKGPATH}/lib/modules/*/modules.*"

	run_cmd "mkdir -pv ${PKG_PKGPATH}/postinst_scripts"
	cat <<-EOF > "${PKG_PKGPATH}/postinst_scripts/49_kernmodpost"
		depmod -a ${PKG_KERNEL_VERSION}
	EOF
	run_cmd "cat ${PKG_PKGPATH}/postinst_scripts/49_kernmodpost"

	cd -
}

function kernelbuild () {
	function make4kern () {
		cat <<-EOF > make4kern.sh
			source "${PKG_BLDPATH}/environment.source"
			KBUILD_BUILD_TIMESTAMP='' \\
			make \\
				V=${MAKEVERBOSE:-0} \\
				CC="\${CC}" \\
				LD="\${LINKER_EXE}" \\
				AS="\${CC}" \\
				NM="\${NM}" \\
				AR="\${AR}" \\
				OBJCOPY="\${OBJCOPY}" \\
				OBJDUMP="\${OBJDUMP}" \\
				READELF="\${READELF}" \\
				STRIP="\${STRIP}" \\
				KCFLAGS="\${KCFLAGS}${LLVM_KERNELPOLLYFLAGS:+ ${LLVM_KERNELPOLLYFLAGS}}${PKG_CFLAGS:+ ${PKG_CFLAGS}}" \\
				KBUILD_LDFLAGS="${KERNEL_OPTLINK_FLAGS}${PKG_LDFLAGS:+ ${PKG_LDFLAGS}}" \\
				ARCH=${KERNEL_ARCH} \\
				CROSS_COMPILE=${HARCH}- \\
				HOSTCC="\${CC_FOR_BUILD}" \\
				HOSTCXX="\${CXX_FOR_BUILD}" \\
				HOSTAR="\${AR_FOR_BUILD}" \\
				HOSTLD="\${LINKER_EXE_FOR_BUILD}" \\
				HOSTCFLAGS="\${CFLAGS_FOR_BUILD}" \\
				HOSTCXXFLAGS="\${CXXFLAGS_FOR_BUILD}" \\
				HOSTLDFLAGS="\${LDFLAGS_FOR_BUILD}" \\
				EXTRAVERSION=${KERNEL_EXTRAVERSION} \\
				LOCALVERSION=${KERNEL_LOCALVERSION} \\
				${EXTRA_PARMS} ${PKG_MAKEVARS} \${@}
		EOF
		run_cmd "cat make4kern.sh"
		run_cmd "chmod +x make4kern.sh"
	}

	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* ${PKG_BLDPATH}"
	cd "${PKG_BLDPATH}"

	sed -e 's/FLAGS=.*/FLAGS=/g' -e 's/PKG_CONFIG\(.*\)=.*/PKG_CONFIG\1=/' -i environment.source

	make4kern

	echo "Build ${PKG_FILE} with extra modules ${PKG_KERNEL_BUILD_MODULES}"
	echo "Kernel target: ${PKG_TARGET:all}"
	# Install headers
	run_cmd "./make4kern.sh INSTALL_HDR_PATH=${PKG_PKGPATH}${INSTALL_PREFIX} headers_install"

	# Break if only headers installation required
	if [ "${PKG_TARGET}" == "headers" ]
	then
		return 0
	fi

	if [ -f "arch/${KERNEL_ARCH}/configs/${KERNEL_DEFCONFIG}" ]
	then
		run_cmd "cp -v \"arch/${KERNEL_ARCH}/configs/${KERNEL_DEFCONFIG}\" .config"
	else
		run_cmd "cp -v \"${KERNEL_DEFCONFIG}\" .config"
	fi
	# Config kernel build

	case ${KERNEL_OPTLEVEL:-2} in
		s|S)	run_cmd "scripts/config -e CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE" ;;
		2)		run_cmd "scripts/config -d CC_OPTIMIZE_FOR_SIZE -e CC_OPTIMIZE_FOR_PERFORMANCE" ;;
		3)		# Patch kernel to build with -O3 flag
				run_cmd "sed -i -e '/^ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/i ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3\nKBUILD_CFLAGS += -O3' \
					-e 's/^ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/else ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE/' Makefile"
				run_cmd "sed -i -e \
					'/^config CC_OPTIMIZE_FOR_PERFORMANCE/i config CC_OPTIMIZE_FOR_PERFORMANCE_O3\n\tbool \"Optimize for performance (-O3)\"\n\thelp\n\t  This is the default optimization level for the kernel, building\n\t  with the \"-O2\" compiler flag for maximum performance.\n' \
					init/Kconfig"
				#run_cmd "sed -i "/depends on ARC$/d" init/Kconfig"
				run_cmd "scripts/config -d CC_OPTIMIZE_FOR_SIZE -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3"
			;;
	esac

	if [ "x${CONF_FLAGS}" != "x" ]
	then
		run_cmd "scripts/config ${CONF_FLAGS}"
	fi

	if [ "${PKG_TOOLCHAIN:-${TOOLCHAIN}}" == llvm ]
	then
		echo "LTO type: ${PKG_OVERRIDELTO:-${KERNEL_LTOENABLE:-0}}"
		case ${PKG_OVERRIDELTO:-${KERNEL_LTOENABLE:-0}} in
			0)
				run_cmd "scripts/config -d LTO_CLANG -d LTO_CLANG_THIN"
				;;
			1|lto)
				run_cmd "scripts/config -d FTRACE -d FTRACE_MCOUNT_USE_RECORDMCOUNT -d KASAN -d GCOV_KERNEL"
				run_cmd "scripts/config -e LTO_CLANG"
				;;
			2|thin)
				run_cmd "scripts/config -d FTRACE -d FTRACE_MCOUNT_USE_RECORDMCOUNT -d KASAN -d GCOV_KERNEL"
				run_cmd "scripts/config -e LTO_CLANG_THIN"
				;;
		esac
	fi

	run_cmd "./make4kern.sh olddefconfig"
	if [ "${KERNEL_PAUSE_FOR_CONFIG:-0}" -eq 1 ]
	then
		pause
	fi

	if [ ! -d "${PKG_PKGPATH}/boot" ]
	then
		run_cmd "mkdir -p \"${PKG_PKGPATH}/boot\""
	fi

	KERNEL_RELEASE=$(./make4kern.sh kernelrelease)
	add_system_config_variable KERNEL_RELEASE "${KERNEL_RELEASE}"

	run_cmd "cp -pv .config \"${PKG_PKGPATH}/boot/config-${KERNEL_RELEASE}\""

	# Build and install kernel
	run_cmd "./make4kern.sh \"${KERNEL_IMAGE}\""
	case ${KERNEL_NAME}
	in
		kernel*)
			run_cmd "cp \"arch/${KERNEL_ARCH}/boot/${KERNEL_IMAGE}\" \"${PKG_PKGPATH}/boot/${KERNEL_NAME}\""
			local STATUS=${?}
			;;
		*)
			if [ ! -d "${PKG_PKGPATH}/boot" ]
			then
				mkdir "${PKG_PKGPATH}/boot"
			fi
			run_cmd "${GLOBAL_TOOLCHAIN_PATH}/bin/make ${KERNEL_ARCH:+ARCH=\"${KERNEL_ARCH}\"} ${HARCH:+CROSS_COMPILE=\"${HARCH}-\"} INSTALL_PATH=\"${PKG_PKGPATH}/boot\" ${PKG_MAKEVARS} install"
			;;
	esac
	
	# Build and install modules

	run_cmd "./make4kern.sh modules"
	run_cmd "${GLOBAL_TOOLCHAIN_PATH}/bin/make ${KERNEL_ARCH:+ARCH=\"${KERNEL_ARCH}\"} ${HARCH:+CROSS_COMPILE=\"${HARCH}-\"} INSTALL_MOD_PATH=\"${PKG_PKGPATH}\" ${PKG_MAKEVARS} modules_install"
	if [ -d "${PKG_PKGPATH}/lib/modules/${KERNEL_RELEASE}/build" ]
	then
		run_cmd "rm ${PKG_PKGPATH}/lib/modules/${KERNEL_RELEASE}/build"
	fi
	if [ -d "${PKG_PKGPATH}/lib/modules/${KERNEL_RELEASE}/source" ]
	then
		run_cmd "${PKG_PKGPATH}/lib/modules/${KERNEL_RELEASE}/source"
	fi

	# Build and install DTBS
	if [ "${KERNEL_DTBS:-0}" -eq 1 ] && [ "${STATUS}" -eq 0 ]
	then
		if [ ! -d "${PKG_PKGPATH}/boot/overlays" ]
		then
			run_cmd "mkdir -p \"${PKG_PKGPATH}/boot/overlays\""
		fi
		run_cmd "./make4kern.sh dtbs"
		run_cmd "${GLOBAL_TOOLCHAIN_PATH}/bin/make ${KERNEL_ARCH:+ARCH=\"${KERNEL_ARCH}\"} ${HARCH:+CROSS_COMPILE=\"${HARCH}-\"} INSTALL_DTBS_PATH=\"${PKG_PKGPATH}/boot\" ${PKG_MAKEVARS} dtbs_install"
	fi

	if [ "${PKG_KERNEL_INITRAMFS:-0}" -eq 1 ]
	then
		run_cmd "mkdir -pv \"${PKG_PKGPATH}/postinst_scripts\""
		run_cmd "echo -n \"dracut --force --kver ${KERNEL_RELEASE} -N -a drm --fstab --zstd\" > \"${PKG_PKGPATH}/postinst_scripts/99_kernel\""
		if [ -n "${PKG_KERNEL_INITRAMFS_DRIVERS}" ]
		then
			run_cmd "echo \" --add-drivers \\\"${PKG_KERNEL_INITRAMFS_DRIVERS}\\\"\" >> \"${PKG_PKGPATH}/postinst_scripts/99_kernel\""
		else
			run_cmd "echo >> \"${PKG_PKGPATH}/postinst_scripts/99_kernel\""
		fi
	fi

	PKG_KERNEL_BLDPATH="${PWD}"
	PKG_KERNEL_VERSION="$(./make4kern.sh kernelversion)"

	IFS=,
	for module in ${PKG_KERNEL_BUILD_MODULES}
	do
		build --force "${module}"
	done
	unset IFS

	cd "${BB_HOME}"
}

function pythonbuild () {

	local PYTHON_LIB_PATH PIPPKG
	if [ -z "${PKG_URL}" ]
	then
		run_cmd "mkdir -pv \"${PKG_BLDPATH}\""
		PIPPKG=${PKG_NAME}${PKG_VER:+==${PKG_VER}}
	else
		run_cmd "cp -rp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\""
		PIPPKG=.
	fi
	cd "${PKG_BLDPATH}"
	case ${PKG_TARGET_ENV} in
		native)
			COMMON_CFLAGS+=" -I${GLOBAL_TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${GLOBAL_TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			PYTHON_LIB_PATH="$(dirname "$(ldd "${PYTHON_FOR_BUILD}" | grep "libpython${PYTHONBIN_VER}" | awk '{print $3}')")"
			COMMON_LDFLAGS+=" -L${PYTHON_LIB_PATH}"
		;;
		cross)
			COMMON_CFLAGS+=" -I${GLOBAL_TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			COMMON_CFLAGS+=" -I${TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${GLOBAL_TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			COMMON_CPPFLAGS+=" -I${TOOLCHAIN_PATH}/include/python${PYTHONBIN_VER}"
			PYTHON_LIB_PATH="$(dirname "$(ldd "${PYTHON_FOR_BUILD}" | grep "libpython${PYTHONBIN_VER}" | awk '{print $3}')")"
			COMMON_LDFLAGS+=" -L${PYTHON_LIB_PATH}"
		;;
		target)
			if [ -d "${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m" ]
			then
				COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
				COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}m"
			fi
			if [ -d "${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}" ]
			then
				COMMON_CFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
				COMMON_CPPFLAGS+=" -I${DISTOS_PATH}/usr/include/python${PYTHONBIN_VER}"
			fi
			if [ -f "${DISTOS_PATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/libpython${PYTHONBIN_VER}m" ]
			then
				COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}m"
			fi
			if [ -f "${DISTOS_PATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/libpython${PYTHONBIN_VER}" ]
			then
				COMMON_LDFLAGS+=" -lpython${PYTHONBIN_VER}"
			fi
			if [ -f "${DISTOS_PATH}/etc/debian_version" ]
			then
				local PYTHON_PKGDIR="dist-packages"
			else
				local PYTHON_PKGDIR="site-packages"
			fi
			pathadd PYTHONPATH "${BIN_PATH}${INSTALL_LIBDIR}/python${PYTHONBIN_VER}/${PYTHON_PKGDIR}"
			for pythonpkgdir in python${PYTHONBIN_MAJVER} python${PYTHONBIN_VER}
			do
				if [ -d "${DISTOS_PATH}${INSTALL_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}" ]
				then
					pathadd PYTHONPATH "${DISTOS_PATH}${INSTALL_LIBDIR}/${pythonpkgdir}/${PYTHON_PKGDIR}"
				fi
			done
		;;
	esac
	if [ "${MAKEVERBOSE:-0}" -eq 1 ]
	then
		local VERBOSE="-v"
	fi
	# shellcheck source=/dev/null
	source "${PKG_BLDPATH}/environment.source"
	if [ "${PKG_PYTHONBUILD:-1}" -eq 1 ]
	then
		local PYTHONBUILD="--no-binary :all:"
	fi
	case ${PKG_TARGET_ENV} in
		native|cross)
			run_cmd "PIP_CACHE_DIR=${DOWNLOAD_PATH}/pip ${PYTHON_FOR_BUILD} -m pip ${VERBOSE} install --no-deps ${PYTHONBUILD} --prefix=${INSTALL_PREFIX} ${PIPPKG}"
		;;
		target)
			run_cmd "cross-python -m site"
			run_cmd "PIP_CACHE_DIR=${DOWNLOAD_PATH}/pip cross-python -m pip ${VERBOSE} install --compile --force-reinstall --no-deps ${PYTHONBUILD} --root ${PKG_PKGPATH} --prefix=${INSTALL_PREFIX} ${PIPPKG}"
			if [ "${PYTHON_PKGDIR}" == dist-packages ]
			then
				run_cmd "mv \"${PKG_PKGPATH}${INSTALL_LIBDIR}/python${PYTHONBIN_VER}/site-packages\" \"${PKG_PKGPATH}${INSTALL_LIBDIR}/python${PYTHONBIN_VER}/dist-packages\""
			fi
		;;
	esac
	cd "${BB_HOME}"
}

function custom () {
	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\""
	pushd "${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	cat >runmake.sh <<-EOF
		#!/bin/bash -ex
		source "${PKG_BLDPATH}/environment.source"

	EOF
	echo "${PKG_BUILDSCRIPT}" >>runmake.sh
	run_cmd "chmod +x runmake.sh"
	run_cmd "./runmake.sh"
	popd
}

function perlmodule () {
	run_cmd "cp -frp \"${PKG_SRCPATH}\"/* \"${PKG_BLDPATH}\""
	pushd "${PKG_BLDPATH}${CONF_PATH:+/${CONF_PATH}}"
	cat > runconfig.sh <<-EOF
		#!/bin/bash
		source "${PKG_BLDPATH}/environment.source"

		perl Makefile.PL \\
		AR='${AR}' CC='${CC}' CPPRUN='${CPP}' FULL_AR='${AR}' LD='${CC}' \\
		PERL_INC='${SYSROOT}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/perl5/5.36/CORE' \\
	EOF
	sudo chroot "${SYSROOT}" \
		perl -V | \
		grep -o '[^ ].*=.*' | \
		sed -e 's/ =/=/g' -e 's/^[a-z0-9_]*=/\U&/' -e '/=\x27/! s/=/=\x27/' -e '/\x27$/! s/$/\x27/' | \
		grep -e 'CCFLAGS=' -e 'CCCDLFLAGS=' -e 'CCDLFLAGS=' -e 'LDDLFLAGS=' -e 'LDFLAGS=' -e 'OFF_T=' | \
		xargs -d'\n' >> runconfig.sh
	run_cmd "chmod +x runconfig.sh"
	run_cmd "./runconfig.sh"
	cat > runmake.sh <<-EOF
		#!/bin/bash
		source "${PKG_BLDPATH}/environment.source"
		make PERL_INC='${SYSROOT}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}/perl5/5.36/core_perl/CORE'
	EOF
	run_cmd "chmod +x runmake.sh"
	run_cmd "./runmake.sh"

	pause

	popd
}


function downloadsources () {
	if [ -n "${PKG_URL}" ]
	then
		[ -d "${PKG_SRCPATH}" ] && rm -rf "${PKG_SRCPATH}"
		for url in ${PKG_URL}
		do
			if [ "${MAKEDIR:-0}" -eq 1 ]
			then
				NODELETEDESTDIR=1 STRIPCOMPONENTS=0 download_uncompress "${url}" "${PKG_SRCPATH}"
			else
				NODELETEDESTDIR=1 download_uncompress "${url}" "${PKG_SRCPATH}"
			fi
		done
	else
		if [ -n "${GIT_URL}" ]
		then
			if [ ! -d "${PKG_SRCPATH}" ]
			then
				run_cmd "git clone --recursive \"${GIT_URL}\" \"${PKG_SRCPATH}\""
				if  [ -n "${GIT_COMMIT}" ]
				then
					run_cmd "git -C \"${PKG_SRCPATH}\" checkout \"${GIT_COMMIT}\""
				fi
			fi
		fi
	fi
}

function build () {(

	unset \
		AUTOCONF_PATH \
		AUTOCONF_THREADS \
		CARGO_BIN \
		CARGO_LIB \
		CARGO_BINLIST \
		CARGO_LIBLIST \
		CMAKE_GENERATOR \
		CONF_CMD \
		CONF_ENV \
		CONF_FLAGS \
		CONF_PATH \
		CONF_VARS \
		GIT_URL \
		GIT_COMMIT \
		MAKEDIR \
		PATCHDEB \
		PATCHES \
		PKG_AUTOCONF \
		PKG_AUTOMAKE \
		PKG_BUILDSCRIPT \
		PKG_CFLAGS \
		PKG_CHECK \
		PKG_COPYSRC \
		PKG_CXXFLAGS \
		PKG_DEPS \
		PKG_DISABLECROSSPYTHON \
		PKG_DISABLECCWRAPPER \
		PKG_FAULTYCFLAGS \
		PKG_FCFLAGS \
		PKG_GETTEXT \
		PKG_KERNEL_BUILD_MODULES \
		PKG_KERNEL_INITRAMFS \
		PKG_KERNEL_INITRAMFS_DRIVERS \
		PKG_KERNEL_MOD \
		PKG_KERNEL_MODPATH \
		PKG_LDFLAGS \
		PKG_LD_LIBRARY_PATH \
		PKG_LIBTOOL \
		PKG_LLVMPOLLYFEATURES \
		PKG_MAKEENV \
		PKG_MAKETARGETS \
		PKG_MAKEVARS \
		PKG_OVERRIDELD \
		PKG_OVERRIDELTO \
		PKG_OVERRIDESHARED \
		PKG_OVERRIDESTATIC \
		PKG_POSTBUILD \
		PKG_POSTINSTALL \
		PKG_POSTINSTALL_PRIO \
		PKG_PREBUILD \
		PKG_RUSTFLAGS \
		PKG_SRCDIR \
		PKG_SUFFIX \
		PKG_TARGET \
		PKG_TARGET_ENV \
		PKG_TOOLCHAIN \
		PKG_URL \
		PKG_VER \
		STD_CONF_FLAGS \
		VAR_INSTALL_LIBDIR \
		VAR_INSTALL_LIBSUFFIX \
		VAR_INSTALL_INCDIR \
		VAR_INSTALL_CONFDIR \

	OPTS="--force --no_gcc_check --no_save_status --temporary --keep_builddir" OPTS_WITH_VALUE="--toolchain --with_extra_modules" param2value "${@}"

	# Split dependency in Package name and its Target separated by ':'

	local \
		FORCE \
		GCC_CHECK \
		INSTALL_PREFIX \
		INSTALL_EXECPREFIX \
		INSTALL_LIBDIR \
		INSTALL_LIBSUFFIX \
		INSTALL_INCLUDEDIR \
		INSTALL_SYSCONFDIR \
		INSTALL_LOCALSTATEDIR \
		INSTALL_SHAREDIR \
		KEEPBUILDDIR \
		LOG_FILE \
		NOSAVESTATUS \
		PKG_BLDPATH \
		PKG_CHKSUM \
		PKG_FILE \
		PKG_FULLNAME \
		PKG_NAME \
		PKG_PKGPATH \
		PKG_REMOVELAFILES \
		PKG_SRCDIR \
		PKG_TARGET \
		PKG_TARGET_ENV \
		STATUS_CHK_FILE \
		STATUS_FILE \
		STATUS_FILE_DEFAULT_TARGET \
		TEMPORARY_STATUS

	# shellcheck disable=SC2154
	PKG_FILE=$(cut -d':' -f1 <<<"${_param_1}")
	PKG_TARGET=$(cut -s -d':' -f2 <<<"${_param_1}")
	GCC_CHECK=${_param_no_gcc_check:-0}
	FORCE=${_param_force:-0}
	NOSAVESTATUS=${_param_no_save_status:-0}
	KEEPBUILDDIR=${_param_keep_builddir:-0}
	TEMPORARY_STATUS=

	if [ "${_param_temporary:-0}" -eq 1 ]
	then
		TEMPORARY_STATUS=.tmp
	fi

	if [ -z "${NUMSPACES}" ]
	then
		NUMSPACES=0
	fi

	if [ ! -f "${PKG_PATH}/${PKG_FILE}.pkg" ]
	then
		trow_error "${ERROR_FILE_NOT_FOUND}" "Package ${PKG_FILE} does not exists."
	fi
	
	PKG_NAME=$(basename "${PKG_FILE}")
	PKG_FULLNAME="\${PKG_NAME}\${PKG_SUFFIX}\${PKG_VER:+_\${PKG_VER}}"
	PKG_SRCDIR=${PKG_SRCDIR:-${PKG_FULLNAME}}
	PKG_BLDPATH=${BLD_PATH}/${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}
	case ${PKG_TARGET} in
		native)
			PKG_TARGET_ENV=native
			PKG_PKGPATH=
			INSTALL_PREFIX=${NATIVE_PREFIX}
			INSTALL_EXECPREFIX=${NATIVE_EXECPREFIX}
			INSTALL_LIBDIR=${NATIVE_LIBDIR}
			INSTALL_LIBSUFFIX=
			INSTALL_INCLUDEDIR=${NATIVE_INCLUDEDIR}
			INSTALL_SYSCONFDIR=${NATIVE_SYSCONFDIR}
			INSTALL_LOCALSTATEDIR=${NATIVE_LOCALSTATEDIR}
			INSTALL_SHAREDIR=${NATIVE_SHAREDIR}
			NOSAVESTATUS=1
		;;
		cross)
			PKG_TARGET_ENV=cross
			PKG_PKGPATH=
			INSTALL_PREFIX=${CROSS_PREFIX}
			INSTALL_EXECPREFIX=${CROSS_EXECPREFIX}
			INSTALL_LIBDIR=${CROSS_LIBDIR}
			INSTALL_LIBSUFFIX=
			INSTALL_INCLUDEDIR=${CROSS_INCLUDEDIR}
			INSTALL_SYSCONFDIR=${CROSS_SYSCONFDIR}
			INSTALL_LOCALSTATEDIR=${CROSS_LOCALSTATEDIR}
			INSTALL_SHAREDIR=${CROSS_SHAREDIR}
		;;
		*)
			PKG_TARGET_ENV=target
			PKG_PKGPATH=${PACKAGES_PATH}/${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}
			INSTALL_PREFIX=${TARGET_PREFIX}
			INSTALL_EXECPREFIX=${TARGET_EXECPREFIX}
			INSTALL_LIBDIR=${TARGET_LIBDIR}
			INSTALL_LIBSUFFIX=${TARGET_LIBSUFFIX}
			INSTALL_INCLUDEDIR=${TARGET_INCLUDEDIR}
			INSTALL_SYSCONFDIR=${TARGET_SYSCONFDIR}
			INSTALL_LOCALSTATEDIR=${TARGET_LOCALSTATEDIR}
			INSTALL_SHAREDIR=${TARGET_SHAREDIR}
		;;
	esac

	# shellcheck source=/dev/null
	source "${PKG_PATH}/${PKG_FILE}.pkg"

	PKG_TOOLCHAIN=${_param_toolchain:-${PKG_TOOLCHAIN}}
	PKG_KERNEL_BUILD_MODULES="${_param_with_extra_modules:-${PKG_KERNEL_BUILD_MODULES}}"

	eval PKG_FULLNAME=${PKG_FULLNAME}
	eval PKG_SRCPATH="${SRC_PATH}/${PKG_SRCDIR}"
	eval PKG_BLDPATH="${PKG_BLDPATH}"
	eval PKG_PKGPATH="${PKG_PKGPATH}"

	export PKG_SRCPATH PKG_BLDPATH PKG_PKGPATH

	STATUS_FILE=${STATUS_PATH}/${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}${TEMPORARY_STATUS}
	STATUS_FILE_DEFAULT_TARGET=${STATUS_PATH}/${PKG_FULLNAME}
	LOG_FILE=${LOG_PATH}/${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}.log

	SPACES=$(for ((i = 0 ; i < "${NUMSPACES}" ; i++ )); do echo -n "   "; done)
	echo -n "${SPACES}Package ${PKG_FULLNAME}${PKG_TARGET:+:${PKG_TARGET}}"

	if [ -z "${PKG_CHECK}" ]
	then
		if [ "${PKG_TARGET}" == "native" ]
		then
			echo
			trow_error "${ERROR_GENERIC}" "PKG_CHECK is empty and PKG_TARGET is native. Exiting..."
		fi
		### Check if target package or default package has already built
		PKG_CHKSUM="$( md5sum "${PKG_PATH}/${PKG_FILE}.pkg" )"
		if [ -f "${STATUS_FILE_DEFAULT_TARGET}" ]
		then
			STATUS_CHK_FILE=${STATUS_FILE_DEFAULT_TARGET}${PKG_TARGET:+-${PKG_TARGET}}
		else
			STATUS_CHK_FILE=${STATUS_FILE}
		fi
		if [ -f "${STATUS_CHK_FILE}" ] && [ "${FORCE}" -eq 0 ]
		then
			if [ "${PKG_CHKSUM}" == "$( cat "${STATUS_CHK_FILE}" )" ]
			then
				echo -e " already built.\n"
				return 0
			else
				rm -f "${STATUS_FILE}"
			fi
		fi
	else
		#echo -e "Check command: ${PKG_CHECK}"
		if eval "${PKG_CHECK}" > /dev/null 2>&1
		then
			echo -e " already built.\n"
			return 0
		fi
	fi
	echo
	for dep in ${PKG_DEPS}
	do
		if [ ! -f "${PKG_PATH}/${dep/:*/}.pkg" ]
		then
			trow_error "${ERROR_FILE_NOT_FOUND}" "Dependency package ${dep/:*/} does not exists."
		fi
		NUMSPACES=$((NUMSPACES+1))
		SPACES=$(for ((i = 0 ; i < "${NUMSPACES}" ; i++ )); do echo -n "   "; done)
		echo "${SPACES}Requires ${dep}"
		#echo "Called from ${PKG_FILE}"
		# shellcheck disable=SC2046
		build $( if [ "${NOSAVESTATUS}" -eq 1 ] || [ "${TEMPORARY_STATUS}" == .tmp ]; then echo "--temporary"; fi ) \
			$( if [ "${GCC_CHECK}" -eq 1 ]; then echo "--no_gcc_check"; fi ) \
			"${dep}$( if [ "${PKG_TARGET_ENV}" == native ] || [ "${PKG_TARGET_ENV}" == cross ]; then echo ":${PKG_TARGET_ENV}"; fi )"
		NUMSPACES=$((NUMSPACES-1))
		SPACES=$(for ((i = 0 ; i < "${NUMSPACES}" ; i++ )); do echo -n "   "; done)
	done

	truncate -s0 "${LOG_FILE}"
	
	if [ "${GCC_CHECK}" -eq 0 ] && [ "${BUILD_PROCESS}" != "none" ] && [ "${BUILD_PROCESS}" != "downloadonly" ] && [ "${PKG_TARGET_ENV}" == target ]
	then
		"check_${PKG_TOOLCHAIN:-${TOOLCHAIN}}_c"
	fi

	echo -n "${SPACES}"
	# Build defaults
	### To manage source path removal at beginning or at the end...
	#if [ -d ${PKG_SRCPATH} ]
	#then
	#	rm -rf ${PKG_SRCPATH}
	#fi
	if [ ! -d "${BLD_PATH}" ]
	then
		run_cmd "mkdir -p \"${BLD_PATH}\"" >> "${LOG_FILE}"
	fi
	if [ ! -d "${BIN_PATH}" ]
	then
		run_cmd "mkdir -p \"${BIN_PATH}\"" >> "${LOG_FILE}"
	fi
	cat <<-EOF >> "${LOG_FILE}"
		Pre build script:
		==================
		${PKG_PREBUILD}
		==================

		Post build script:
		==================
		${PKG_POSTBUILD} 
		==================

		Post install script:
		==================
		${PKG_POSTINSTALL}
		==================

	EOF
	if [ -n "${PKG_URL}" ] || [ -n "${GIT_URL}" ]
	then
		echo -n "Downloading ${PKG_FULLNAME}..."
		downloadsources >> "${LOG_FILE}"
		echo "Done."
		preparesources >> "${LOG_FILE}"
	fi
	if [ -d "${PKG_BLDPATH}" ]
	then
		run_cmd "rm -rf \"${PKG_BLDPATH}\"" >> "${LOG_FILE}"
	fi
	if [ -n "${PKG_PKGPATH}" ]
	then
		if [ -d "${PKG_PKGPATH}" ]
		then
			run_cmd -s "rm -rf \"${PKG_PKGPATH}\"" >> "${LOG_FILE}"
		fi
		run_cmd "mkdir -p \"${PKG_PKGPATH}\"" >> "${LOG_FILE}"
	fi
	( create_environment_source --target "${PKG_TARGET_ENV}" ) | log_buffer info >> "${LOG_FILE}"
	#### Pre-Build
	if [ -n "${PKG_PREBUILD}" ]
	then
		if [ -d "${PKG_SRCPATH}" ]
		then
			cd "${PKG_SRCPATH}"
		fi
		echo "Running pre build script..." | log_buffer info >> "${LOG_FILE}"
		(
			run_cmd "set -x
				set +o pipefail
				source \"${PKG_BLDPATH}/environment.source\"
				${PKG_PREBUILD}
				set +x"
		) >> "${LOG_FILE}"
	fi
	#### Build
	if [ ! "${BUILD_PROCESS:-none}" == none ]
	then
		echo -n "${SPACES}Building ${PKG_FULLNAME}${PKG_TARGET:+:${PKG_TARGET}} [${BUILD_PROCESS}]..."
		${BUILD_PROCESS} >> "${LOG_FILE}" 2>&1
	fi
	#### Post-Build
	if [ -n "${PKG_POSTBUILD}" ]
	then
		cd "${PKG_BLDPATH}"
		echo "Running post build script..." | log_buffer info >> "${LOG_FILE}"
		(
			run_cmd "set -ex
				set +o pipefail
				source \"${PKG_BLDPATH}/environment.source\"
				${PKG_POSTBUILD}
				set +ex"
		) >> "${LOG_FILE}"
	fi
	#### Post-Install
	if [ -n "${PKG_POSTINSTALL}" ]
	then
		run_cmd "mkdir -p ${PKG_PKGPATH}/postinst_scripts" >> "${LOG_FILE}"
		echo "${PKG_POSTINSTALL}" > "${PKG_PKGPATH}/postinst_scripts/${PKG_POSTINSTALL_PRIO:-50}_${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}"
		run_cmd "cat \"${PKG_PKGPATH}/postinst_scripts/${PKG_POSTINSTALL_PRIO:-50}_${PKG_FULLNAME}${PKG_TARGET:+-${PKG_TARGET}}\"" >> "${LOG_FILE}"
	fi

	##### Create package
	if [ -n "${PKG_PKGPATH}" ]
	then
		(
			set -e
			if [ "${PKG_REMOVELAFILES:-1}" -eq 1 ]
			then
				if [ -d "${PKG_PKGPATH}/lib${INSTALL_LIBSUFFIX}" ]
				then
				run_cmd "find \"${PKG_PKGPATH}/lib${INSTALL_LIBSUFFIX}\" -name \"*.la\" -print0 | xargs -0 -I{} rm -fv \"{}\""
				fi
				if [ -d "${PKG_PKGPATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}" ]
				then
				run_cmd "find \"${PKG_PKGPATH}${INSTALL_LIBDIR}${INSTALL_LIBSUFFIX}\" -name \"*.la\" -print0 | xargs -0 -I{} rm -fv \"{}\""
				fi
			fi
			if [ "${NOSAVESTATUS}" -eq 0 ] && [ -z "${TEMPORARY_STATUS}" ]
			then
				create_sfx_package "${PKG_PKGPATH}"
			fi
			run_cmd "rsync -aK --devices --specials \"${PKG_PKGPATH}/\" \"${BIN_PATH}\""
			run_cmd -s "rm -rf \"${PKG_PKGPATH}\""
			set +e
		) >> "${LOG_FILE}" 2>&1
	fi
	if [ "${KEEPBUILDDIR}" -eq 0 ]
	then
		run_cmd "rm -rf \"${PKG_BLDPATH}\"" >> "${LOG_FILE}"
	fi
	### Save build status
	if [ ! -d "${STATUS_PATH}" ]
	then
		run_cmd "mkdir -p \"${STATUS_PATH}\"" >> "${LOG_FILE}"
	fi
	if [ "${NOSAVESTATUS}" -eq 0 ]
	then
		run_cmd "md5sum \"${PKG_PATH}/${PKG_FILE}.pkg\" > \"${STATUS_FILE}\"" >> "${LOG_FILE}"
	else
		run_cmd "rm -f \"${STATUS_PATH}/*.tmp\"" >> "${LOG_FILE}"
	fi
	echo "Done."
	echo
)}

function is_build_functions () {
	return 0
}
