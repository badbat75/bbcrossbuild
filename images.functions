#!/bin/bash

check_core_functions

check_images_functions () {
	is_images_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Images functions not loaded"
		exit 1
	fi
}

function mount_image () {
	trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		unmount_dir ${MOUNT_DIR}
		return ${STATUS};' ERR

	local IMAGEFILE_PATH=${1}
	local MOUNT_DIR=${2}
	shift 2
	local MOUNTPOINTSLIST="${@}"
	LODEVIMAGES[${MOUNTPOINTNAME}]=${IMAGEFILE_PATH}

	if [ -z "${MOUNTPOINTSLIST}" ]
	then
		echo "Error. No mount points specified."
		false
	fi

	if [ ! -d ${IMAGE_PATH} ] ; then mkdir -p ${IMAGE_PATH} ; fi

	if [ ! -z ${IMGRESIZE} ]
	then
		local PARTNO=$(echo ${IMGRESIZE} | awk -F: '{print $1}')
		local IMGSIZE=$(echo ${IMGRESIZE} | awk -F: '{print $2}')
		# Extend the image size to ${IMGSIZE}
		echo -n "Extend image size to ${IMGSIZE}..."
		truncate -s ${IMGSIZE} ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo "Done."
		# Expand root partition in the image
		echo -n "Expand root partition..."
		local PARTINFO=$(sfdisk -d ${IMAGEFILE_PATH} | tail -n1)
		sfdisk --delete ${IMAGEFILE_PATH} ${PARTNO} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo ${PARTINFO} | sed '$s/ size.*,//' | sfdisk --append ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo "Done."
	fi

	# Create loopback devices for the image and its partitions
	echo -n "Creating loop devices..."
	sudo losetup -f -P ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	LOOPDEV=$(sudo losetup -j ${IMAGEFILE_PATH} | awk '{print $1}' | sed 's/.$//g') >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	sudo partprobe ${LOOPDEV} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	echo "Done."

	if [ ! -z ${IMGRESIZE} ]
	then
		# Check the root partition
		echo -n "Check root filesystems..."
		sudo e2fsck -fp ${LOOPDEV}"p"${PARTNO} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo "Done."
		# Resize the root partition
		echo -n "Resize root partition..."
		sudo resize2fs ${LOOPDEV}"p"${PARTNO} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo "Done."
	fi

	# Mount the image filesystems
	echo -n "Mounting all the partitions in ${MOUNT_DIR}..."
	for e in ${MOUNTPOINTSLIST}
	do
		local PARTNO=$(echo ${e} | awk -F: '{print $1}')
		local MPOINT=$(echo ${e} | awk -F: '{print $2}')
		if [ "${MPOINT}" = "/" ]
		then
			local ROOTREADY=1
			unset MPOINT
		fi
		MOUNTPOINTS[${MOUNT_DIR}]="${MOUNT_DIR}${MPOINT} ${MOUNTPOINTS[${MOUNT_DIR}]}"
		if [ ! -d ${MOUNT_DIR}${MPOINT} ] ; then mkdir -p ${MOUNT_DIR}${MPOINT} ; fi
		sudo mount ${LOOPDEV}"p"${PARTNO} ${MOUNT_DIR}${MPOINT} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	done
	if [ "${ROOTREADY}" -eq 1 ]
	then
		#sudo mount -t tmpfs -o nosuid,nodev,mode=755 /run ${MOUNT_DIR}/run >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		sudo mount -t devpts /dev/pts ${MOUNT_DIR}/dev/pts >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		sudo mount -t proc /proc ${MOUNT_DIR}/proc >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1

		if [ ! -d ${MOUNT_DIR}/tmp/bbxb ]
		then
			mkdir -p ${MOUNT_DIR}/tmp/bbxb
		fi
		sudo mount -o bind $(readlink -m ${MOUNT_DIR}/..) ${MOUNT_DIR}/tmp/bbxb
		#MOUNTPOINTS[${MOUNT_DIR}]="${MOUNT_DIR}/proc ${MOUNT_DIR}/dev/pts ${MOUNT_DIR}/run ${MOUNT_DIR}/tmp/bbxb ${MOUNTPOINTS[${MOUNT_DIR}]}"
		MOUNTPOINTS[${MOUNT_DIR}]="${MOUNT_DIR}/proc ${MOUNT_DIR}/dev/pts ${MOUNT_DIR}/tmp/bbxb ${MOUNTPOINTS[${MOUNT_DIR}]}"
	fi
	echo "Done."
	MOUNTED_IMAGES="${MOUNTED_IMAGES} ${MOUNTPOINTNAME}"

	# Temporary configuration for mounted image
	echo -n "Configure local resolv.conf..."
	sudo mv ${MOUNT_DIR}/etc/resolv.conf ${MOUNT_DIR}/etc/resolv.conf.bbxb >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	sudo cp /etc/resolv.conf ${MOUNT_DIR}/etc/resolv.conf >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	echo "Done."
	trap - ERR
}

function unmount_image () {
	trap - ERR
	#set -x
	local MOUNT_DIR=${1}

	# Restore configuration for mounted image
	echo -n "Restore local resolv.conf..."
	if [ -f ${MOUNT_DIR}/etc/resolv.conf.bbxb ]
	then
		sudo mv ${MOUNT_DIR}/etc/resolv.conf.bbxb ${MOUNT_DIR}/etc/resolv.conf >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	fi

	# Unmount everything
	echo -n "Unmount all partitions..."
	if [ "x${MOUNTPOINTS[${MOUNT_DIR}]}" != "x" ]
	then
		for dir in ${MOUNTPOINTS[${MOUNT_DIR}]}
		do
			echo -n "Unmounting ${dir}..." >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
			local STATUS=1
			while [ ! ${STATUS} -eq 0 ]
			do
				sudo umount -f ${dir} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
				local STATUS=${?}
				case ${STATUS} in
				    0)
						echo "done." >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
						;;
					*)
						echo "failed ${STATUS}, sleeping..." >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
						sleep 1
						;;
				esac
			done
		done
	fi
	MOUNTED_IMAGES=$(echo ${MOUNTED_IMAGES} | sed "s/ *${MOUNTPOINTNAME}//")
	# Delete the loopback devices
	echo -n "Delete loopback device..."
	sudo losetup -D ${LOOPDEV} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
	echo "Done."

	#set +x
}

function mount_from () {
	# mount_from <URL> <Image2Mount> <MountPointName> <partnumber1:/> [<partnumber2:mountpoint2]...[<partnumbern:mountpointn]
	trap 'STATUS=${?}; \
		echo "$0 fail."; \
		echo; \
		if [ -f ${LOG_PATH}/images_${MOUNTPOINTNAME}.log ];
		then \
			echo "Log ${LOG_PATH}/images_${MOUNTPOINTNAME}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${MOUNTPOINTNAME}.log; \
		fi; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
	#set -x

	local URL=${1}
	local IMGFILE=${2}
	local MOUNTPOINTNAME=${3}
	shift 3
	local MOUNTPOINTSLIST=${@}

	if [ ! -d ${DISKIMAGES_PATH} ] ; then mkdir -p ${DISKIMAGES_PATH} ; fi
	if [ ! -f ${DISKIMAGES_PATH}/${MOUNTPOINTNAME}.img ]
	then
		echo -n "Downloading and uncompress ${IMGFILE}..."
		NODELETEDESTDIR=1 download_uncompress ${URL} ${DISKIMAGES_PATH} ${IMGFILE} >> ${LOG_PATH}/images_${MOUNTPOINTNAME}.log 2>&1
		echo "done."
		mv ${DISKIMAGES_PATH}/${IMGFILE} ${DISKIMAGES_PATH}/${MOUNTPOINTNAME}.img
	else
		echo "Image ${MOUNTPOINTNAME}.img already ready."
	fi
	echo -n "Mounting ${IMGFILE} to ${MOUNTPOINTNAME} as ${MOUNTPOINTNAME}.img..."
	IMGRESIZE="${IMGRESIZE}" mount_image ${DISKIMAGES_PATH}/${MOUNTPOINTNAME}.img ${PLATFORM_PATH}/${MOUNTPOINTNAME} ${MOUNTPOINTSLIST}
	echo "done."
	echo
	#set +x
	trap - ERR
}

function unmount_dir () {
	trap 'STATUS=${?}; \
		echo "$0 fail [unmount_dir]."; \
		echo; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

	#set -x

	local ACTION=""

	case ${1} in
		--finalize)
			shift
			local ACTION="finalize"
			;;
		--nofinalize)
			shift
			;;
		--kill)
			shift
			local ACTION="kill"
			;;
	esac

	local MOUNTPOINTNAME=${1}
	echo -n "Unmounting ${MOUNTPOINTNAME}..."

	case "${ACTION}" in
		"kill")
			echo -n "killing processes using filesystem..."
			local PROC="$(lsof -t -w ${PLATFORM_PATH}/${MOUNTPOINTNAME} | xargs)"
			while [ ! "${PROC}" == "" ]
			do
				echo -n "killing ${PROC}"
				sudo kill -9 ${PROC}
				sleep 1
				local PROC="$(lsof -t -w ${PLATFORM_PATH}/${MOUNTPOINTNAME} | xargs)"
			done
			;;
	esac

	unmount_image ${PLATFORM_PATH}/${MOUNTPOINTNAME}

	case "${ACTION}" in
		"finalize")	mv ${LODEVIMAGES[${MOUNTPOINTNAME}]} ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.img
					;;
	esac
	echo
	#set +x
	trap - ERR
}

function unmount_all () {
	trap 'STATUS=${?}; \
		echo "fail [unmount_all]."; \
		echo; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR
	#set -x

	case ${1} in
		--finalize)
			shift
			local ACTION="--finalize"
			;;
		--nofinalize)
			shift
			;;
		--kill)
			shift
			local ACTION="--kill"
			;;
	esac

	for image in ${MOUNTED_IMAGES}
	do
		unmount_dir ${ACTION} ${image}
	done
	#set +x
	trap - ERR
}

function run_on_root_dir () {
	trap 'STATUS=${?}; \
		echo; \
		echo "fail [run_on_root_dir]." >> ${LOG_PATH}/images_${CHROOT_DIR}.log; \
		echo; \
		set +x; \
		trap - ERR; \
		if [ -f ${LOG_PATH}/images_${CHROOT_DIR}.log ];
		then \
			echo "Log ${LOG_PATH}/images_${CHROOT_DIR}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${CHROOT_DIR}.log; \
		fi; \
		return ${STATUS};' ERR
			
	#set -x

	local CHROOT_DIR=${1}
	local CHROOT_USER=${2}
	shift 2
	local CHROOT_COMMAND=${@}

	local CHROOT_DIR=$(echo ${CHROOT_DIR} | sed 's/^//g')
	local CHROOT_PROMPT=${CHROOT_USER}
	local CHROOT_PWD=$(sudo chroot ${PLATFORM_PATH}/${CHROOT_DIR} su - ${CHROOT_USER} -c "pwd")
	local CHROOT_PROMPT="${CHROOT_USER}:${CHROOT_PWD}"

	if [ ${CHROOT_USER} = "root" ]
	then
		local CHROOT_PROMPT+='# '
	else
		local CHROOT_PROMPT+='$ '
	fi
	echo "${CHROOT_PROMPT}${CHROOT_COMMAND}" >> ${LOG_PATH}/images_${CHROOT_DIR}.log 2>&1
	sudo chroot ${PLATFORM_PATH}/${CHROOT_DIR} su - --pty ${CHROOT_USER} -c \
		"${CHROOT_COMMAND}" >> ${LOG_PATH}/images_${CHROOT_DIR}.log 2>&1
	echo >> ${LOG_PATH}/images_${CHROOT_DIR}.log 2>&1

	#set +x
	trap - ERR
}

function inject_into_root_dir () {
	trap 'STATUS=${?}; \
		echo "fail. Unmounting ${ROOT_DIR}."; \
		echo; \
		set +x; \
		trap - ERR; \
		if [ -f ${LOG_PATH}/images_${ROOT_DIR}.log ];
		then \
			echo "Log ${LOG_PATH}/images_${ROOT_DIR}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${ROOT_DIR}.log; \
		fi; \
		return ${STATUS};' ERR
	#set -x

	local ACTION=""

	case ${1} in
		--remove_devfiles)
			shift
			local ACTION="remove_devfiles"
			;;
	esac

	local ROOT_DIR=${1}
	local OBJECT=${2}
	local TARGET_DIR=${3}
	local TARGET_OWNER=${4:-"root:root"}

	local ROOT_DIR=$(echo ${ROOT_DIR} | sed 's/^//g')
	local TARGET_DIR=$(echo ${TARGET_DIR} | sed 's/^//g')

	case ${OBJECT} in
		sfx_archive)
			local TARGET_FILE=${PRJ_NAME}.sfx
			local SOURCE_PATH=${PLATFORM_PATH}
			;;
		archive)
			local TARGET_FILE=${PRJ_NAME}.tar.xz
			local SOURCE_PATH=${PLATFORM_PATH}
			;;
		binaries)
			local TARGET_FILE=*
			local SOURCE_PATH=${PLATFORM_PATH}/binaries
			;;
		*)
			local TARGET_FILE=$(basename ${OBJECT})
			local SOURCE_PATH=$(dirname ${OBJECT})
			;;
	esac

	echo -n "Injecting ${TARGET_FILE} into ${TARGET_DIR:-/}..."
	case ${ACTION} in
		remove_devfiles) remove_devfiles no-exitstatus ;;
	esac
	if [ ! -d ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR} ]
	then
		sudo mkdir -p ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
		echo -n "setting ownership of ${TARGET_OWNER} on ${TARGET_DIR}..."
		sudo chown -h ${TARGET_OWNER} ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	fi
	#sudo cp -fr --preserve=mode,timestamps ${SOURCE_PATH}/${TARGET_FILE} ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	cd ${SOURCE_PATH}
	sudo rsync -K -a --no-owner --no-group ${TARGET_FILE} ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	cd -
	echo -n "setting ownership of ${TARGET_OWNER} on ${TARGET_FILE}..."
	case ${OBJECT} in
		binaries)
			find ${BIN_PATH} -printf "${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR}%P\n" | xargs -d'\n' -n1 -P${NPROCS} sudo chown -h ${TARGET_OWNER}
			;;
		*)
			sudo chown -hR ${TARGET_OWNER} ${PLATFORM_PATH}/${ROOT_DIR}/${TARGET_DIR}/${TARGET_FILE} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
			;;
	esac
	case ${ACTION} in
		remove_devfiles) resume_devfiles no-exitstatus ;;
	esac
	echo "done."
	echo

	#set +x
	trap - ERR
}

unset MOUNTPOINTS
unset LODEVIMAGES
declare -A MOUNTPOINTS
declare -A LODEVIMAGES

MOUNTED_IMAGES=""

is_images_functions () {
	return 0
}
