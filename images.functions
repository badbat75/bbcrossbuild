#!/bin/bash

check_core_functions

check_images_functions () {
	is_images_functions 2>/dev/null
	if [ ! ${?} ]
	then
		echo "Images functions not loaded"
		exit 1
	fi
}

function create_image() {
	# create_image <tag_name> [--rootfstype <fs_type>] [--size <size_in_KiB> [--layout <layout_file>]
	trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		echo "Unmounting ${MOUNT_DIR}" ; \
		sudo umount -R ${MOUNT_DIR}; \
		sudo losetup -D ; \
		return ${STATUS};' ERR

	OPTS="" OPTS_WITH_VALUE="--rootfstype --size --layout" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local IMAGE_PATH=${DISKIMAGES_PATH}/${_param_1}.img
	local MOUNT_DIR=${PLATFORM_PATH}/${_param_1}
	local ROOTFS_TYPE=${_param_rootfstype:-ext4}
	local SIZE=${_param_size:-1MiB}

	if [ -z ${_param_layout} ]
	then
		local LAYOUT="$(cat <<-EOF
			label: dos
			unit: sectors
			sector-size: 512

			start=        8192, size=      524288, type=c
			start=      532480, type=83
			EOF
		)"
	else
		local LAYOUT="$(cat ${_param_layout})"
	fi
	echo -n "Creating image... "
	if [ ! -d ${DISKIMAGES_PATH} ]
	then
		mkdir -pv ${DISKIMAGES_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	fi
	dd if=/dev/zero of=${IMAGE_PATH} bs=1KiB count=${SIZE} status=progress >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Partitioning... "
	echo "${LAYOUT}" | sfdisk ${IMAGE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Creating loopback devices... "
	sudo losetup -f -P ${IMAGE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	LODEVICE=$(sudo losetup -l --raw | grep ${IMAGE_PATH} | tail -n1 | awk '{print $1}')
	echo "ok."
	#echo -n "Scanning for partitions."
	#sudo kpartx ${LODEVICE}
	echo -n "Creating filesystems... "
	sudo mkfs.vfat ${LODEVICE}p1 >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo mkfs.${ROOTFS_TYPE} ${LODEVICE}p2 >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Mounting image... "
	mkdir -pv ${MOUNT_DIR} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo mount ${LODEVICE}p2 ${MOUNT_DIR} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo mkdir -pv ${MOUNT_DIR}/{boot,dev/pts,etc,proc} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo install -dv -m 1777 ${MOUNT_DIR}/tmp >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo mount ${LODEVICE}p1 ${MOUNT_DIR}/boot >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Creating /etc/fstab... "
	sudo bash -c "cat > ${MOUNT_DIR}/etc/fstab <<-EOF
		proc                 /proc proc defaults 0 0
		PARTUUID=$(sudo blkid ${LODEVICE}p1 -o value -s PARTUUID) /boot $(sudo blkid ${LODEVICE}p1 -o value -s TYPE) defaults 0 2
		PARTUUID=$(sudo blkid ${LODEVICE}p2 -o value -s PARTUUID) /     $(sudo blkid ${LODEVICE}p2 -o value -s TYPE) defaults 0 1
		EOF
		" >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Unmounting image... "
	sudo umount ${MOUNT_DIR}/boot ${MOUNT_DIR} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	rmdir ${MOUNT_DIR} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	echo -n "Flushing loop devices... "
	sudo losetup -D >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "ok."
	set +x
	trap - ERR
}

function mount_tag () {
	# mount_tag <MountPointName> [--url <URL_of_image> --imgfile <imagename_inside_archive>] \
	# --mountlist "<partnumber1:/> [partnumber2:mountpoint2]...[partnumbern:mountpointn] --resize <partnumber:size> "
	trap 'STATUS=${?}; \
		set +x; \
		trap - ERR; \
		unmount_tag ${MOUNT_DIR}; \
		sudo losetup -D; \
		return ${STATUS};' ERR

	OPTS="" OPTS_WITH_VALUE="--url --imgfile --mountlist --resize" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local IMAGEFILE_PATH=${DISKIMAGES_PATH}/${_param_1}.img
	local MOUNT_DIR=${PLATFORM_PATH}/${_param_1}
	LODEVIMAGES[${_param_1}]=${IMAGEFILE_PATH}

	if [ -z "${_param_mountlist}" ]
	then
		echo "Error. No mount points specified."
		false
	fi

	if [ ! -d ${IMAGE_PATH} ] ; then mkdir -p ${IMAGE_PATH} ; fi

	if [ ! -z ${_param_url} ]
	then
		if [ -z ${_param_imgfile} ]
		then
			echo "--imgefile: Image name inside archive should be specified."
			return 1
		fi
		if [ ! -f ${DISKIMAGES_PATH}/${_param_1}.img ]
		then
			echo -n "Downloading and uncompress ${_param_imgfile}... "
			NODELETEDESTDIR=1 download_uncompress ${_param_url} ${DISKIMAGES_PATH} ${_param_imgfile} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
			echo "done."
			mv ${DISKIMAGES_PATH}/${_param_imgfile} ${DISKIMAGES_PATH}/${_param_1}.img
		else
			echo "Image ${_param_1}.img already ready."
		fi
	fi

	if [ ! -z ${_param_resize} ]
	then
		local PARTNO=$(echo ${_param_resize} | awk -F: '{print $1}')
		local IMGSIZE=$(echo ${_param_resize} | awk -F: '{print $2}')
		# Extend the image size to ${IMGSIZE}
		echo -n "Extend image size to ${IMGSIZE}... "
		truncate -s ${IMGSIZE} ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
		# Expand root partition in the image
		echo -n "Expand root partition... "
		local PARTINFO=$(sfdisk -d ${IMAGEFILE_PATH} | tail -n1)
		sfdisk --delete ${IMAGEFILE_PATH} ${PARTNO} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo ${PARTINFO} | sed '$s/ size.*,//' | sfdisk --append ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
	fi

	# Create loopback devices for the image and its partitions
	echo -n "Creating loop devices... "
	sudo losetup -f -P ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo losetup -j ${IMAGEFILE_PATH} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	LOOPDEV=$(sudo losetup -j ${IMAGEFILE_PATH} | awk '{print $1}' | sed 's/.$//g') >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo >> ${LOG_PATH}/images_${_param_1}.log
	echo "Loop device for ${IMAGEFILE_PATH}: ${LOOPDEV}" >> ${LOG_PATH}/images_${_param_1}.log
	sudo partprobe ${LOOPDEV} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo kpartx ${LOOPDEV} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "Done."


	if [ ! -z ${_param_resize} ]
	then
		# Check the root partition
		echo -n "Check root filesystems... "
		sudo fsck -fp ${LOOPDEV}"p"${PARTNO} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
		# Resize the root partition
		echo -n "Resize root partition... "
		sudo resize2fs ${LOOPDEV}"p"${PARTNO} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
	fi

	# Mount the image filesystems
	echo -n "Mounting all the partitions in ${MOUNT_DIR}... "
	#set -x
	for e in ${_param_mountlist}
	do
		local PARTNO=$(echo ${e} | awk -F: '{print $1}')
		local MPOINT=$(echo ${e} | awk -F: '{print $2}')
		if [ "${MPOINT}" = "/" ]
		then
			local ROOTREADY=1
			unset MPOINT
		fi
		MOUNTPOINTS[${MOUNT_DIR}]="${MOUNT_DIR}${MPOINT} ${MOUNTPOINTS[${MOUNT_DIR}]}"
		if [ ! -d ${MOUNT_DIR}${MPOINT} ] ; then mkdir -p ${MOUNT_DIR}${MPOINT} ; fi
		sudo fsck -fp ${LOOPDEV}"p"${PARTNO} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		sudo mount ${LOOPDEV}"p"${PARTNO} ${MOUNT_DIR}${MPOINT} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	done
	#set +x
	if [ "${ROOTREADY}" -eq 1 ]
	then
		sudo mount --bind /dev ${MOUNT_DIR}/dev >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		sudo mount --bind /dev/pts ${MOUNT_DIR}/dev/pts >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		sudo mount -t proc /proc ${MOUNT_DIR}/proc >> ${LOG_PATH}/images_${_param_1}.log 2>&1

		if [ ! -d ${MOUNT_DIR}/tmp/bbxb ]
		then
			mkdir -p ${MOUNT_DIR}/tmp/bbxb
		fi
		MOUNTPOINTS[${MOUNT_DIR}]="${MOUNT_DIR}/proc ${MOUNT_DIR}/dev/pts ${MOUNT_DIR}/dev ${MOUNTPOINTS[${MOUNT_DIR}]}"
	fi
	echo "Done."
	MOUNTED_IMAGES="${MOUNTED_IMAGES} ${_param_1}"

	# Temporary configuration for mounted image
	if [ -f ${MOUNT_DIR}/etc/resolv.conf ]
	then
		echo -n "Configure local resolv.conf... "
		sudo mv ${MOUNT_DIR}/etc/resolv.conf ${MOUNT_DIR}/etc/resolv.conf.bbxb >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		sudo cp /etc/resolv.conf ${MOUNT_DIR}/etc/resolv.conf >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
	fi
	set +x
	trap - ERR
}

function unmount_tag () {
	trap 'STATUS=${?}; \
		echo "$0 fail [unmount_tag]."; \
		echo; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

	OPTS="--all --finalize --kill" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	if [ ${_param_all:-0} -eq 1 ]
	then
		for image in ${MOUNTED_IMAGES}
		do
			unmount_tag ${_param_finalize:+--finalize} ${_param_finalize:+--kill} ${image}
		done
	else
		local MOUNT_DIR=${PLATFORM_PATH}/${_param_1}

		echo -n "Unmounting ${_param_1}... "

		if [ ${_param_kill:-0} -eq 1 ]
		then
			echo -n "killing processes using filesystem... "
			local PROC="$(lsof -t -w ${MOUNT_DIR} | xargs)"
			while [ ! "${PROC}" == "" ]
			do
				echo -n "killing ${PROC}"
				sudo kill -9 ${PROC}
				sleep 1
				local PROC="$(lsof -t -w ${MOUNT_DIR} | xargs)"
			done
			echo -n "... "
		fi

		# Restore configuration for mounted image
		echo -n "Restore local resolv.conf... "
		if [ -f ${MOUNT_DIR}/etc/resolv.conf.bbxb ]
		then
			sudo mv ${MOUNT_DIR}/etc/resolv.conf.bbxb ${MOUNT_DIR}/etc/resolv.conf >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		fi
		# Unmount everything
		echo -n "Unmount all partitions... "
		if [ "x${MOUNTPOINTS[${MOUNT_DIR}]}" != "x" ]
		then
			for dir in ${MOUNTPOINTS[${MOUNT_DIR}]}
			do
				echo -n "Unmounting ${dir}... " >> ${LOG_PATH}/images_${_param_1}.log 2>&1
				local STATUS=1
				while [ ! ${STATUS} -eq 0 ]
				do
					sudo umount -f ${dir} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
					local STATUS=${?}
					case ${STATUS} in
						0)
							echo "done." >> ${LOG_PATH}/images_${_param_1}.log 2>&1
							;;
						*)
							echo "failed ${STATUS}, sleeping... " >> ${LOG_PATH}/images_${_param_1}.log 2>&1
							sleep 1
							;;
					esac
				done
			done
		fi
		MOUNTED_IMAGES=$(echo ${MOUNTED_IMAGES} | sed "s/ *${_param_1}//")
		# Delete the loopback devices
		echo -n "Delete loopback device... "
		sudo losetup -D ${LOOPDEV} >> ${LOG_PATH}/images_${_param_1}.log 2>&1
		echo "Done."
	fi

	[ ${_param_finalize:-0} -eq 1 ] && mv ${LODEVIMAGES[${_param_1}]} ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.img || true

	echo
	set +x
	trap - ERR
}

function mount_from () {
	# mount_from --url <URL> --imgfile <Image2Mount> --tag <MountPointName> --resize <partnumber:size> \
	#	--mountlist "<partnumber1:/> [partnumber2:mountpoint2]...[partnumbern:mountpointn]"
	trap 'STATUS=${?}; \
		echo "$0 fail."; \
		echo; \
		if [ -f ${LOG_PATH}/images_${_param_tag}.log ];
		then \
			echo "Log ${LOG_PATH}/images_${_param_tag}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${_param_tag}.log; \
		fi; \
		set +x; \
		trap - ERR; \
		return ${STATUS};' ERR

	OPTS="" OPTS_WITH_VALUE="--url --imgfile --tag --mountlist --resize" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	if [ ! -d ${DISKIMAGES_PATH} ] ; then mkdir -p ${DISKIMAGES_PATH} ; fi
	if [ ! -f ${DISKIMAGES_PATH}/${_param_tag}.img ]
	then
		echo -n "Downloading and uncompress ${_param_imgfile}... "
		NODELETEDESTDIR=1 download_uncompress ${_param_url} ${DISKIMAGES_PATH} ${_param_imgfile} >> ${LOG_PATH}/images_${_param_tag}.log 2>&1
		echo "done."
		mv ${DISKIMAGES_PATH}/${_param_imgfile} ${DISKIMAGES_PATH}/${_param_tag}.img
	else
		echo "Image ${_param_tag}.img already ready."
	fi
	echo -n "Mounting ${_param_imgfile} to ${_param_tag} as ${_param_tag}.img... "
	# mount_from --tag <MountPointName> --resize <partnumber:size> --mountlist <partnumber1:/> [partnumber2:mountpoint2]...[partnumbern:mountpointn]

	mount_tag "${_param_tag}" --mountlist "${_param_mountlist}" --resize "${_param_resize}"
	echo "done."
	echo
	set +x
	trap - ERR
}

function run_on_root_dir () {
	# run_on_root_dir <mount tag> <user> "<command>"
	trap 'STATUS=${?}; \
		echo; \
		echo "fail [run_on_root_dir]." >> ${LOG_PATH}/images_${_param_1}.log; \
		echo; \
		set +x; \
		trap - ERR; \
		if [ -f ${LOG_PATH}/images_${_param_1}.log ]; \
		then \
			echo "Log ${LOG_PATH}/images_${_param_1}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${_param_1}.log; \
		fi; \
		return ${STATUS};' ERR
			
	OPTS="--allocate_pty" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local CHROOT_DIR=$(echo ${_param_1} | sed 's/^//g')
	local CHROOT_PROMPT=${_param_2}
	local CHROOT_PWD=$(sudo chroot ${PLATFORM_PATH}/${_param_1} su - ${_param_2} -c "pwd")
	local CHROOT_PROMPT="${_param_2}:${CHROOT_PWD}"

	if [ ${_param_2} = "root" ]
	then
		local CHROOT_PROMPT+='# '
	else
		local CHROOT_PROMPT+='$ '
	fi
	echo "${CHROOT_PROMPT}${_param_3}" >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo chroot ${PLATFORM_PATH}/${_param_1} su - $( [ ${_param_allocate_pty:-0} -eq 1 ] && echo "--pty" || true ) \
		${_param_2} -c "${_param_3}" >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo >> ${LOG_PATH}/images_${_param_1}.log 2>&1

	[ ${_param_v:-0} -eq 1 ] && set +x || true
	trap - ERR
}

function inject_into_mount_tag () {
	# inject_into_mount_tag <mount_tag> <object> <directory> <owner>
	#   mount_tag: name of the mount tag
	#   object:
	#		binary: copy the built binary targets into mount tag
	#		<filename>: copy the filename into mount tag
	#	directory: directory where to copy under mount_tag
	#   owner: file ownership (default: "root:root")

	trap 'STATUS=${?}; \
		echo "fail. Unmounting ${ROOT_DIR}."; \
		echo; \
		set +x; \
		trap - ERR; \
		if [ -f ${LOG_PATH}/images_${ROOT_DIR}.log ];
		then \
			echo "Log ${LOG_PATH}/images_${ROOT_DIR}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${ROOT_DIR}.log; \
		fi; \
		return ${STATUS};' ERR

	OPTS="--remove_devfiles" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local ROOT_DIR=$(echo ${_param_1} | sed 's/^//g')
	local OBJECT=${_param_2}
	local TARGET_DIR=$(echo ${_param_3} | sed 's/^//g')
	local TARGET_OWNER=${_param_4:-"root:root"}

	setbuildenv

	case ${OBJECT} in
		binaries)
			local SOURCE_PATH=${PLATFORM_PATH}/binaries
			local TARGET_FILE=*
			;;
		gcclibs)
			local GCCLIB=$(find ${GCCSEARCHLIBS} -maxdepth 1 \( -name 'libgcc_s.so*' -o -name 'libssp.so*' -o -name 'libstdc++.so.*' ! -name 'libstdc++.so.*-*.py' \) 2>/dev/null )
			local GCCLIBNAME="$( ( for name in ${GCCLIB}; do echo $(basename ${name}); done ) | sort | uniq )"
			local GCCLIBPATH="$( ( for name in ${GCCLIB}; do echo $(dirname ${name}); done ) | sort | uniq )"
			local TARGET_FILE="${GCCLIBNAME}"
			local SOURCE_PATH="${GCCLIBPATH}"
			local TARGET_DIR="${TARGET_DIR:-${BUILD_LIBDIR}${BUILD_LIBSUFFIX}}"
			;;
		*)
			local TARGET_FILE=$(basename ${OBJECT})
			local SOURCE_PATH=$(dirname ${OBJECT})
			;;
	esac

	echo "Source path: ${SOURCE_PATH}" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	echo "Target path: ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	echo -e "Target files:\n${TARGET_FILE}\n" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1

	echo -n "Injecting ${OBJECT} into ${ROOT_DIR}${TARGET_DIR}... "
	[ ${_param_remove_devfiles:-0} -eq 1 ] && remove_devfiles no-exitstatus || true
	if [ ! -d ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR} ]
	then
		sudo mkdir -p ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
		sudo chown -h ${TARGET_OWNER} ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}
	fi
	echo -n "Syncing ${SOURCE_PATH} to ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}... " >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	cd ${SOURCE_PATH}
	sudo rsync -K -a --no-owner --no-group ${TARGET_FILE} ${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR} >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	cd - > /dev/null
	echo -e "Done.\n" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
	echo -n "Setting ownership... "
	case ${OBJECT} in
		binaries)
			find ${BIN_PATH} -printf "%P\n" | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
				sudo chown -v -h ${TARGET_OWNER} \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				# Check SUID from source path to change it on destination path
				if [ -u \"${BIN_PATH}/{}\" ]
				then
					sudo chmod -v u+s \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				fi
				if [ -g \"${BIN_PATH}/{}\" ]
				then
					sudo chmod -v g+s \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				fi
			" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
			;;
		*)
			echo "${TARGET_FILE}" | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
				sudo chown -v -h ${TARGET_OWNER} \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				# Check SUID from source path to change it on destination path
				if [ -u \"${BIN_PATH}/{}\" ]
				then
					sudo chmod -v u+s \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				fi
				if [ -g \"${BIN_PATH}/{}\" ]
				then
					sudo chmod -v g+s \"${PLATFORM_PATH}/${ROOT_DIR}${TARGET_DIR}/{}\"
				fi
			" >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1
			;;
	esac
	[ ${_param_remove_devfiles:-0} -eq 1 ] && resume_devfiles no-exitstatus || true

	echo -e "Done.\n"
	echo >> ${LOG_PATH}/images_${ROOT_DIR}.log 2>&1

	set +x
	trap - ERR
}

function run_postinstall_scripts () {
	trap 'STATUS=${?}; \
		echo; \
		echo "fail [run_postinstall_scripts]." >> ${LOG_PATH}/images_${_param_1}.log; \
		echo; \
		set +x; \
		trap - ERR; \
		if [ -f ${LOG_PATH}/images_${_param_1}.log ]; \
		then \
			echo "Log ${LOG_PATH}/images_${_param_1}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/images_${_param_1}.log; \
		fi; \
		return ${STATUS};' ERR
			
	OPTS="" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	echo -n "Running post install scripts on ${_param_1}... "
	echo "run_postinstall_scripts ${_param_1}" >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	export PLATFORM_PATH LOG_PATH
	export -f param2value run_on_root_dir
	find ${PLATFORM_PATH}/${_param_1}/postinst_scripts -type f -printf '%P\n' | sort -n | xargs -I{} bash -c "run_on_root_dir ${_param_1} root \"set -x; source /postinst_scripts/{}\"" >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	sudo rm -rfv ${PLATFORM_PATH}/${_param_1}/postinst_scripts >> ${LOG_PATH}/images_${_param_1}.log 2>&1
	echo "Done."
	[ ${_param_v:-0} -eq 1 ] && set +x || true
	trap - ERR
}

unset LODEVIMAGES
unset MOUNTPOINTS
declare -A LODEVIMAGES
declare -A MOUNTPOINTS

MOUNTED_IMAGES=""

is_images_functions () {
	return 0
}
