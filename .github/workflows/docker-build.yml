name: Docker Build and Push

on:
  push:
    branches: 
      - master
      - development
    paths:
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'src/**'
  pull_request:
    branches: 
      - master
      - development
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: ${{ endsWith(github.ref, '/development') && 'Development' || 'Production' }}
    
    steps:
    - name: Debug Info
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "GitHub Branch: ${{ github.ref_name }}"
        echo "Is Development: ${{ endsWith(github.ref, '/development') }}"
        echo "Selected Environment: ${{ endsWith(github.ref, '/development') && 'Development' || 'Production' }}"

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ endsWith(github.ref, '/development') && 'Development' || 'Production' }}
      run: |
        echo "Building for environment: $ENVIRONMENT"
        echo "AWS Role ARN: ${{ vars.AWS_ROLE_ARN }}"
        echo "AWS Region: ${{ vars.AWS_REGION }}"
        echo "ECR Repository: ${{ vars.ECR_REPOSITORY }}"
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Tag based on branch
        if [ "${{ github.ref }}" = "refs/heads/master" ]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        else
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:development
        fi
        
        # Push the Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        if [ "${{ github.ref }}" = "refs/heads/master" ]; then
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        else
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:development
        fi

    - name: Clean up
      if: always()
      run: |
        docker system prune -f
