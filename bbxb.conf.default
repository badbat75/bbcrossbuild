DATA_PATH=${HOME}/.bbxb

###### Program directories
# PATCH_DIR=patches
# PKG_DIR=packages
# PLATFORM_DIR=platforms
# PRJ_DIR=projects
# IMG_DIR=images
######

###### Project build directories
# DISTOS_DIR=distos
# SRC_DIR=sources
# BLD_DIR=builds
# BIN_DIR=binaries
# LOG_DIR=logs
# STATUS_DIR=status
# TOOLCHAIN_DIR=toolchain
# USERDATA_DIR=data
######

##### Set parameters for PKI
# PKI_KEY_NAME=$(whoami)
PKI_KEY_NAME=badbat75
# PKI_SUBJECT="/C=IT/ST=Bologna/L=Bologna/O=BadBat75 LTD/CN=$(whoami)/emailAddress=$(whoami)@$(hostname -f)"
PKI_SUBJECT="/C=IT/ST=Bologna/L=Bologna/O=BadBat75 LTD/CN=badbat75/emailAddress=emiliano.desimoni@outlook.com"
######

### Specify C Toolkit to use
# gnu:  gcc, g++, gfortran...
# llvm: clang, clang++...
#
# TOOLCHAIN=gnu

### Specify boot C compiler (default: gcc)
# TOOLCHAIN_CC="cc"
### Default linker for gcc toolchain
# CC_DEFAULT_LD=gold
### Default linker for llvm toolchain
# LLVM_DEFAULT_LD=lld

### Enable and set if you are using a compiler wrapper like ccache or distcc (sccache has complete support via build_sccache)
# CCWRAPPER="ccache"
### Set make verbosity (0 disabled, 1 enabled)
MAKEVERBOSE=${MAKEVERBOSE:-0}

###### Application toolchain flags and parameters
### Application optimization level (s, 0, 1, 2, 3). Set -O options to compiler
OPTLEVEL=3
### Optional C/C++ compiler flags
# OPTCOMP_FLAGS="-pipe"
### Optional C/C++ compiler flags to enable profiling
# OPTCOMP_FLAGS="${OPTCOMP_FLAGS} -fprofile-generate=/tmp/pgo --coverage"
# OPTCOMP_FLAGS="${OPTCOMP_FLAGS} -fprofile-use=/tmp/pgo -fprofile-correction -Wno-error=coverage-mismatch -Wno-error=missing-profile"
### Optional RUSTC compiler flags
# OPTCOMP_RUSTFLAGS=
### Optional linker flags
OPTLINK_FLAGS+=" -Wl,-z,relro -Wl,-z,now"
### Enable LTO building for the applications (can be set up in the project definition)
# 0:         Disabled
# 1 or fat:  Fat LTO
# 2 or thin: Thin LTO
###
# LTOENABLE=1
######

###### Kernel toolchain flags and parameters
### Kernel optimization level (s, 0, 1, 2, 3). Set -O options to compiler
KERNEL_OPTLEVEL=3
### Optional gcc compiler flags
KERNEL_OPTCOMP_FLAGS=
### Optional ld linker flags
KERNEL_OPTLINK_FLAGS=
### Enable LTO building for the kernel (can be set up in the project definition)
# 0:         Disabled
# 1 or fat:  Fat LTO
# 2 or thin: Thin LTO
###
# KERNEL_LTOENABLE=1
######

### Kernel optimization level (s, 0, 1, 2, 3). Set -O options to compiler
GCC_OPTLEVEL=3
### Enable LTO building for GCC and its libraries (can be set up in the project definition)
# GCC_LTOENABLE=1

### Extra flags for GNU or LLVM compilers
# LLVM_EXTRACLANGFLAGS=
# LLVM_EXTRALDFLAGS=
## Enable LLVM Polly Features:
## polly:            Enable polly
## vectorizer:     Enable polly vectoralization
## parallel:         Enable polly parallel
## all:              Enable all features
# LLVM_POLLY_FEATURES=
# GNU_EXTRACOMPFLAGS=
# GNU_EXTRALDFLAGS=

###### To be moved somewhere outside this
#CARGO_PATH=${HOME}/.cargo

#### GNU gcc tools versions
#BINUTILS_VER=${BINUTILS_VER:-2.39}
#GCC_VER=${GCC_VER:-12.2.0}
#GMP_VER=${GMP_VER:-6.2.1}
#MPFR_VER=${MPFR_VER:-4.1.0}
#MPC_VER=${MPC_VER:-1.2.1}
#ISL_VER=${ISL_VER:-0.25}
#### LLVM version
#LLVM_VER=${LLVM_VER:-15.0.3}
#### Python version
#PYTHON_VER=${PYTHON_VER:-3.11.0}
##### Tools version
#SCCACHE_VER=${SCCACHE_VER:-0.3.0}
#MAKE_VER=${MAKE_VER:-4.4}
#PKGCONFIG_VER=${PKGCONFIG_VER:-0.29.2}
#AUTOCONF_VER=${AUTOCONF_VER:-2.71}
#AUTOCONFARCHIVE_VER=${AUTOCONFARCHIVE_VER:-2022.09.03}
#AUTOMAKE_VER=${AUTOMAKE_VER:-1.16.5}
#LIBTOOL_VER=${LIBTOOL_VER:-2.4.7}
#GETTEXT_VER=${GETTEXT_VER:-0.21.1}
#BISON_VER=${BISON_VER:-3.8.2}
#CMAKE_VER=${CMAKE_VER:-3.24.3}
#NINJA_VER=${NINJA_VER:-1.11.1}
#MESON_VER=${MESON_VER:-0.63.3}
#export AUTOMAKE_VER
#### Bootstrap libraries and headers versions
#BS_KERNEL_VER=${BS_KERNEL_VER:-6.0.3}
#BS_GLIBC_VER=${BS_GLIBC_VER:-2.36}
#BS_LIBXCRYPT_VER=${BS_LIBXCRYPT_VER:-4.4.28}
