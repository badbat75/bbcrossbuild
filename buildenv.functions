#!/bin/bash

check_core_functions
check_build_functions

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi

function create_sysroot () {
	function libraries_relink () {
		test -z "${DISTOS_PATH:-}" && echo "DISTOS_PATH not set" && exit 1
		test -z "${HARCH:-}" && echo "HARCH not set" && exit 1

		echo "DISTOS_PATH: ${DISTOS_PATH}"
		echo

		for i in $(find -L ${DISTOS_PATH}/usr/lib/${HARCH} -lname "/lib/${HARCH}*");
		do
			echo -n "Relinking $i... "
			ln -f -s ../../..$(readlink $i) $i
			echo "done."
		done
	}

	echo -n "Creating sysroot with $(basename ${1})..."
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
			local STATUS=${?}
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
			local STATUS=${?}
		fi
		if [ ${STATUS} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		libraries_relink >> ${LOG_PATH}/sysroot.log 2>&1
		local STATUS=${?}
		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			sed -i "s|/usr/lib/${HARCH:+${HARCH}/}libicu|${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu|g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		if [ ${STATUS} -eq 0 ]
		then
			echo "done."
			echo
			return 0
		else
			echo "fail."
			echo
			return 1
		fi
	else
		echo "already present. Run rm -rf ${DISTOS_PATH} if you want to update it."
		echo
		return 1
	fi
}

function check_target_gcc () {
	${HARCH}-gcc -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function setup_gcc () {
	function download_gcc () {
		set -x
		local GMPURL=https://gmplib.org/download/gmp/gmp-${GMP_VER}.tar.xz
		local MPFRURL=https://www.mpfr.org/mpfr-current/mpfr-${MPFR_VER}.tar.xz
		local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz
		local ISLURL=https://gcc.gnu.org/pub/gcc/infrastructure/isl-${ISL_VER}.tar.bz2
		local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz
		local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.xz
		
		download_uncompress ${BINUTILSURL} ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} &&
		download_uncompress ${GCCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} &&
		NODELETEDESTDIR=1 download_uncompress ${GMPURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gmp &&
		NODELETEDESTDIR=1 download_uncompress ${MPFRURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpfr &&
		NODELETEDESTDIR=1 download_uncompress ${MPCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpc &&
		NODELETEDESTDIR=1 download_uncompress ${ISLURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/isl
		local STATUS=${?}
		set +x
		return ${STATUS}
	}

	function build_gcc () {
		function create_binutils_lto_wrappers () {
			mkdir -p ${BINUTILS_LTO_WRAPPERS_PATH}
			cat > ${BINUTILS_LTO_WRAPPERS_PATH}/ar <<-EOF
				#/bin/bash
				PARAMS=\${1}
				shift
				REST_OF_PARAMS=\${@}

				CMD="${TOOLCHAIN_PATH}/${1}/bin/ar \${PARAMS} --plugin=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/gcc/liblto_plugin.so \${REST_OF_PARAMS}"

				echo \${CMD}
				eval \${CMD}
			EOF
			cat > ${BINUTILS_LTO_WRAPPERS_PATH}/nm <<-EOF
				#/bin/bash
				PARAMS=\${@}

				CMD="${TOOLCHAIN_PATH}/${1}/bin/nm --plugin=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/gcc/liblto_plugin.so \${PARAMS}"

				echo \${CMD}
				eval \${CMD}
			EOF
			cat > ${BINUTILS_LTO_WRAPPERS_PATH}/ranlib <<-EOF
				#/bin/bash
				PARAMS=\${@}

				CMD="${TOOLCHAIN_PATH}/${1}/bin/ranlib --plugin=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/gcc/liblto_plugin.so \${PARAMS}"

				echo \${CMD}
				eval \${CMD}
			EOF
			chmod +x ${BINUTILS_LTO_WRAPPERS_PATH}/ar ${BINUTILS_LTO_WRAPPERS_PATH}/nm ${BINUTILS_LTO_WRAPPERS_PATH}/ranlib
		}

		set -x
		local BINUTILS_LTO_WRAPPERS_PATH=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/binutils_lto_wrappers
		local GCC_LANGUAGES=${GCC_LANGUAGES:-c,c++,lto}
		local GCC_COMMON_CONFIG="--enable-languages=${GCC_LANGUAGES} --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
		--with-default-libstdcxx-abi=new \
		--disable-option-checking --disable-libitm --disable-libmpx"
		local GCC_BUILD_CONFIG="--disable-multilib --disable-bootstrap"
		local GCC_HOST_CONFIG="--with-arch-directory=${HM}${HMARCH:+ --with-arch=${HMARCH}}${HMFPU:+ --with-fpu=${HMFPU}}${HMFLOATABI:+ --with-float=${HMFLOATABI}}"
		local BINUTILS_COMMON_CONFIG="--enable-shared --enable-gold --enable-plugins --disable-option-checking"
		local BINUTILS_BUILD_CONFIG=""
		local BINUTILS_HOST_CONFIG=""
		local GCC_OPTCOMP_FLAGS="${GCC_OPTCOMP_FLAGS}${GCC_OPTLEVEL:+ -O${GCC_OPTLEVEL}}"
		local NATIVE=${NATIVE:-0}
		if [ ${GCC_LTOENABLE} -eq 1 ]
		then
			local GCC_OPTCOMP_FLAGS="${GCC_OPTCOMP_FLAGS} ${COMMON_LTOFLAGS}"
		fi
		local HOST_CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
		local HOST_CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
		local HOST_CFLAGS="${COMMON_CFLAGS} ${GCC_OPTCOMP_FLAGS} -march=native"
		local HOST_CXXFLAGS="${HOST_CFLAGS}"
		local HOST_LDFLAGS="${COMMON_LDFLAGS} ${GCC_OPTLINK_FLAGS}"
		local HOST_AR="${BARCH:+${BARCH}-}gcc-ar"
		local HOST_NM="${BARCH:+${BARCH}-}gcc-nm"
		local HOST_RANLIB="${BARCH:+${BARCH}-}gcc-ranlib"
		if [ ${NATIVE} -eq 1 ]
		then
			local GCC_CONFIG="${GCC_BUILD_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_BUILD_CONFIG}"
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${BARCH}"
			local TARGET_CFLAGS="${HOST_CFLAGS}"
			local TARGET_CXXFLAGS="${HOST_CXXFLAGS}"
			local TARGET_LDFLAGS="${HOST_LDFLAGS}"
		else
			local GCC_CONFIG="${GCC_HOST_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_HOST_CONFIG}"
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${HARCH} --with-sysroot=${DISTOS_PATH}"
			local TARGET_CFLAGS="${COMMON_CFLAGS} ${GCC_OPTCOMP_FLAGS}${HMARCH:+ -march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}"
			local TARGET_CXXFLAGS="${TARGET_CFLAGS}"
			local TARGET_LDFLAGS="${COMMON_LDFLAGS} ${GCC_OPTLINK_FLAGS}"
		fi
		local TARGET_AR="${HARCH:+${HARCH}-}gcc-ar"
		local TARGET_NM="${HARCH:+${HARCH}-}gcc-nm"
		local TARGET_RANLIB="${HARCH:+${HARCH}-}gcc-ranlib"

		local BUILD_CONFIG_ARGS="CC_FOR_BUILD='${HOST_CC}' CXX_FOR_BUILD='${HOST_CXX}' \
			CFLAGS_FOR_BUILD='${HOST_CFLAGS}' CXXFLAGS_FOR_BUILD='${HOST_CXXFLAGS}' LDFLAGS_FOR_BUILD='${HOST_LDFLAGS}' \
			AR_FOR_BUILD='${HOST_AR}' NM_FOR_BUILD='${HOST_NM}' RANLIB_FOR_BUILD='${HOST_RANLIB}'"
		local HOST_CONFIG_ARGS="CC='${HOST_CC}' CXX='${HOST_CXX}' \
			CFLAGS='${HOST_CFLAGS}' CXXFLAGS='${HOST_CXXFLAGS}' LDFLAGS='${HOST_LDFLAGS}' \
			AR='${HOST_AR}' NM='${HOST_NM}' RANLIB='${HOST_RANLIB}'"
		local TARGET_CONFIG_ARGS="CFLAGS_FOR_TARGET='${TARGET_CFLAGS}' CXXFLAGS_FOR_TARGET='${TARGET_CXXFLAGS}' LDFLAGS_FOR_TARGET='${TARGET_LDFLAGS}' \
			AR_FOR_TARGET='${TARGET_AR}' NM_FOR_TARGET='${TARGET_NM}' RANLIB_FOR_TARGET='${TARGET_RANLIB}'"

		### Build binutils
		if [ -d ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILS_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILS_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILS_VER}
		cd ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILS_VER} &&
		eval "${BUILD_CONFIG_ARGS} ${HOST_CONFIG_ARGS} ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}/configure -v \
			--prefix=${TOOLCHAIN_PATH} --mandir=${TOOLCHAIN_PATH}/share/man --infodir=${TOOLCHAIN_PATH}/share/info \
			${CONFIG_ARCH_PARAMS} ${BINUTILS_COMMON_CONFIG} ${BINUTILS_CONFIG}" &&
		make V=${MAKEVERBOSE:-0} &&
		make V=${MAKEVERBOSE:-0} install-strip
		local STATUS=${?}
		if [ ${STATUS} -ne 0 ]
		then
			set +x
			return ${STATUS}
		fi
		#sed -i '/^LDFLAGS =/ s/$/ -static/' gold/Makefile &&
		### Build GCC
		if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
		if [  ${NATIVE} -eq 1 ]
		then
			if [ ${GCC_LTOENABLE} -eq 1 ]
			then
				create_binutils_lto_wrappers ${BARCH}
				local TARGET_AR="${BINUTILS_LTO_WRAPPERS_PATH}/ar"
				local TARGET_NM="${BINUTILS_LTO_WRAPPERS_PATH}/nm"
				local TARGET_RANLIB="${BINUTILS_LTO_WRAPPERS_PATH}/ranlib"
				local TARGET_CONFIG_ARGS="CFLAGS_FOR_TARGET='${TARGET_CFLAGS}' CXXFLAGS_FOR_TARGET='${TARGET_CXXFLAGS}' LDFLAGS_FOR_TARGET='${TARGET_LDFLAGS}' \
					AR_FOR_TARGET='${TARGET_AR}' NM_FOR_TARGET='${TARGET_NM}' RANLIB_FOR_TARGET='${TARGET_RANLIB}'"
			else
				create_binutils_lto_wrappers ${HARCH}
			fi
		fi
		cd ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} &&
		eval "${BUILD_CONFIG_ARGS} ${HOST_CONFIG_ARGS} ${TARGET_CONFIG_ARGS} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure -v \
			--prefix=${TOOLCHAIN_PATH} --mandir=${TOOLCHAIN_PATH}/share/man --infodir=${TOOLCHAIN_PATH}/share/info \
			${CONFIG_ARCH_PARAMS} ${GCC_COMMON_CONFIG} ${GCC_CONFIG}" &&
		make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0} &&
		make V=${MAKEVERBOSE:-0} install-strip
		local STATUS=${?}
		set +x
		return ${STATUS}
	}

	echo -n "Setting up gcc"
	local BINUTILS_VER=${BINUTILS_VER:-2.32}
	local GCC_VER=${GCC_VER:-8.3.0}
	local GMP_VER=${GMP_VER:-6.1.2}
	local MPFR_VER=${MPFR_VER:-4.0.2}
	local MPC_VER=${MPC_VER:-1.1.0}
	local ISL_VER=${ISL_VER:-0.18}
	local GCC_LTOENABLE=${GCC_LTOENABLE:-0}
	echo -n "-${GCC_VER}..."
	
	if ! ${TOOLCHAIN_PATH}/bin/${HARCH:+${HARCH}-}gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH:+${HARCH}-}g++ -v > /dev/null 2>&1
	then
		echo -n "downloading..."
		download_gcc > ${LOG_PATH}/toolchain_gcc${GCC_VER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo -n "building "
		if ! ${TOOLCHAIN_PATH}/bin/${BARCH:+${BARCH}-}gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${BARCH:+${BARCH}-}g++ -v > /dev/null 2>&1
		then
			echo -n "native..."
			NATIVE=1 build_gcc >> ${LOG_PATH}/toolchain_gcc${GCC_VER}.log 2>&1
			if [ ${?} -ne 0 ]
			then
				echo "fail."
				echo
				return 1
			fi
		fi
		echo -n "cross..."
		build_gcc >> ${LOG_PATH}/toolchain_gcc${GCC_VER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
}

function setup_rust () {
	check_target_gcc
	echo -n "Setting up RUST..."
	export CARGO_HOME=${TOOLCHAIN_PATH}
	export RUSTUP_HOME=${TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading..."
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init &&
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			return 1
		fi
		echo -n "installing..."
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${LOG_PATH}/toolchain_rust.log 2>&1 &&
		rm -f /tmp/rustup-init
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries..."
	rustup -v target add ${CARGO_TARGET} >> ${LOG_PATH}/toolchain_rust.log 2>&1
	if [ ${?} -ne 0 ]
	then
		echo "fail."
		echo
		return 1
	fi
	echo "done."
	echo
}

function setup_python () {
	function download_pyton () {
		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz"
		download_uncompress ${PYTHONURL} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER} &&
		NODELETEDESTDIR=1 download_uncompress https://bootstrap.pypa.io/get-pip.py ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}
		local STATUS=${?}
		set +x
		return ${STATUS}
	}

	function build_python () {
		set -x
		if [ -d ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		local LTO_PLUGIN_PATH="$(${BARCH:+${BARCH}-}gcc --print-prog-name=liblto_plugin.so)"
		cd ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH:+${BARCH}-}gcc" \
		CFLAGS="${OPTCOMP_FLAGS} ${COMMON_LTOFLAGS} -march=native" \
		AR="${BARCH:+${BARCH}-}gcc-ar" \
		NM="${BARCH:+${BARCH}-}gcc-nm" \
		RANLIB="${BARCH:+${BARCH}-}gcc-ranlib" \
		LDFLAGS="${OPTLINK_FLAGS}" \
		${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared &&
		make &&
		make install &&
		${BUILD_PYTHON} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py &&
		${BUILD_PYTHONPIP} install crossenv
		local STATUS=${?}
		set +x
		return ${STATUS}
	}
	function build_python_crossenv () {
		set -x
		settoolflags
		local LTO_PLUGIN_PATH="$(${BARCH:+${BARCH}-}gcc --print-prog-name=liblto_plugin.so)"
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH:+${BARCH}-}gcc" \
		CFLAGS="${OPTCOMP_FLAGS} ${COMMON_LTOFLAGS} -march=native" \
		AR="${BARCH:+${BARCH}-}gcc-ar" \
		NM="${BARCH:+${BARCH}-}gcc-nm" \
		RANLIB="${BARCH:+${BARCH}-}gcc-ranlib" \
		LDFLAGS="${OPTLINK_FLAGS}" \
		${BUILD_PYTHONPIP} install --upgrade -t ${TOOLCHAIN_PATH}/venv-${HARCH}/cross/lib/python${PYTHONBIN_VER}/site-packages --no-binary :all: cython m2crypto future pycryptodome &&
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate &&
		STATUS=${?}
		set +x
		return ${STATUS}
	}

	check_target_gcc
	echo -n "Setting up Pyton"
	if [ -z ${1} ]
	then
		local PYTHON_VER=$(find ${DISTOS_PATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHON_VER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting..."
			echo
			return 1
		else
			echo -n "-${PYTHON_VER} (guessed)..."
		fi
	else
		local PYTHON_VER=${1}
		echo -n "-${PYTHON_VER}..."
	fi
	export PYTHONBIN_VER=$( echo ${PYTHON_VER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${TOOLCHAIN_PATH}/bin/python${PYTHONBIN_VER}
	BUILD_PYTHONPIP=${TOOLCHAIN_PATH}/bin/pip${PYTHONBIN_VER}
	HOST_PYTHON=${DISTOS_PATH}/usr/bin/python${PYTHONBIN_VER}
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
	if [ ! -x ${HOST_PYTHON} ]
	then
		echo "no host python present (${HOST_PYTHON}). Exiting..."
		echo
		return 1
	fi
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading..."
		download_pyton > ${LOG_PATH}/toolchain_python${PYTHONBIN_VER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo -n "building..."
		build_python >> ${LOG_PATH}/toolchain_python${PYTHONBIN_VER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
	if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ]
	then
		mv ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/_sysconfigdata.py
	fi
	if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m ]
	then
		ln -s config-${PYTHONBIN_VER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m
	fi
	echo -n "Creating virtual cross environment..."
	if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
	then
		build_python_crossenv >> ${LOG_PATH}/toolchain_python${PYTHONBIN_VER}.log 2>&1
		echo "done."
		echo
		return ${?}
	else
		echo "already there."
		echo
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python${PYTHONBIN_VER}.log 2>&1
		return ${?}
	fi
}

# Check the toolchains
gcc -v > /dev/null 2>&1
if [ ! ${?} -eq 0 ]
then
	echo "The toolchain for host compile does not exist."
	exit 1
fi
BARCH=$(gcc -dumpmachine)
