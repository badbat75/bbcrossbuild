#!/bin/bash

check_core_functions
check_build_functions

function prepare_sysroot () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Preparing sysroot... "
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi

		echo "DISTOS_PATH: ${DISTOS_PATH}" >> ${LOG_PATH}/sysroot.log 2>&1
		echo >> ${LOG_PATH}/sysroot.log 2>&1

		find -L ${DISTOS_PATH}/usr/lib/${HARCH} \( -lname "/lib/${HARCH}*" -o -lname "/etc/alternatives*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1
		find -L ${DISTOS_PATH}/etc/alternatives \( -lname "/lib/${HARCH}*" -o -lname "/usr/lib/${HARCH}*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1

		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			eval ${SUDO_CMD} sed -i "s#/usr/lib/${HARCH:+${HARCH}/}libicu#${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu#g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		echo "done."
		echo
	else
		echo "fail. No image mounted."
		return 1
	fi

	trap ERR
}

function create_sysroot () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Creating sysroot with $(basename ${1})... "
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
		fi
		prepare_sysroot
		echo "done."
		echo
	else
		echo "already present. Run rm -rf ${DISTOS_PATH} if you want to update it."
		echo
	fi
	trap ERR
}

function check_gnu_c () {
	${HARCH}-gcc -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function check_llvm_c () {
	clang --target=${HARCH} -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function setup_gcc () {

	function gcc_buildenv () {
		MULTI_ARCH=${MULTIARCH:-1}
		BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
		if [ ${MULTI_ARCH} -eq 1 ]
		then
			BUILD_LIBSUFFIX="/${HARCH}"
		fi

		if [ ${MAKEVERBOSE:-0} -eq 0 ]
		then
			local SILENTCONFIG="--enable-silent-rules"
			build_configargs="${SILENTCONFIG}"
			host_configargs="${SILENTCONFIG}"
			target_configargs="${SILENTCONFIG}"
		fi

		unset GCC_SYSROOT ECHO_BOOTSTRAP
		# Check where glibc is installed
		if ( [ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crtn.o ] && \
				[ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crti.o ] && \
				[ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crt1.o ] )
		then
			GCC_SYSROOT=${BIN_PATH}
		else
			if [ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crtn.o ] && \
				[ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crti.o ] && \
				[ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crt1.o ]
			then
				GCC_SYSROOT=${DISTOS_PATH}
			else
				ECHO_BOOTSTRAP="bootstrap "
				LOG_BOOTSTRAP="bs-"
			fi
		fi

		GCC_CONFIG="--enable-checking=release --enable-multiarch --enable-gnu-indirect-function --enable-initfini-array --enable-gnu-unique-object --with-system-zlib --with-glibc-version=2.11 --with-gcc-major-version-only --enable-linker-build-id --disable-option-checking ${SILENTCONFIG}"

		if [ -n "${GCC_SYSROOT}" ]
		then
			GCC_CONFIG+=" --enable-lto --enable-threads=posix --enable-languages=${GCC_LANGUAGES:-c,c++} --enable-shared --enable-plugin --enable-clocale=gnu --enable-nls --enable-__cxa_atexit --with-default-libstdcxx-abi=new --enable-gcov --enable-libmudflap --enable-libgomp --enable-libssp --enable-libsanitizer --enable-install-libiberty --disable-libitm --disable-libmpx"
			if [ "$(echo ${GCC_LANGUAGES} | grep -o fortran)" == "fortran" ]
			then
				GCC_CONFIG+=" --enable-libquadmath --enable-libquadmath-support"
			fi
			BINUTILS_CONFIG=" --enable-gold --enable-plugins --enable-64-bit-bfd --enable-install-libbfd"	
		else
			GCC_CONFIG+=" --disable-lto --disable-threads --enable-languages=c --with-newlib --disable-shared --disable-decimal-float --disable-plugin --disable-multilib --disable-nls --disable-libstdcxx --disable-gcov --without-headers --disable-libatomic --disable-libgomp --disable-libssp --disable-libvtv --disable-libsanitizer --disable-libitm --disable-libmpx"
			BINUTILS_CONFIG=" --enable-ld=default --disable-plugins --enable-64-bit-bfd"
		fi
		COMPFLAGS="${GNU_EXTRACOMPFLAGS}"
		LINKERFLAGS="${GNU_EXTRALDFLAGS}"
		if [ ${GCC_LTOENABLE:-0} -eq 1 ] && [ -n "${GCC_SYSROOT}" ]
		then
			LTO_COMPFLAGS=" -flto=${NPROCS}"
			LTO_LINKERFLAGS=" -fuse-linker-plugin"
		fi
		if [ -n "${GCC_SYSROOT}" ]
		then
			GCC_SYSROOT_FLAGS=" --with-sysroot=${GCC_SYSROOT}"
		fi
	}

	function gcc_download () {
		trap 'local STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR

		set -x
		local GMPURL=https://gmplib.org/download/gmp/gmp-${GMP_VER}.tar.xz
		local MPFRURL=https://www.mpfr.org/mpfr-${MPFR_VER}/mpfr-${MPFR_VER}.tar.xz
		local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz
		#local ISLURL=http://isl.gforge.inria.fr/isl-${ISL_VER}.tar.xz
		local ISLURL=https://mirror.sobukus.de/files/src/isl/isl-${ISL_VER}.tar.xz
		local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz
		#local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.xz
		local GCCURL=https://github.com/gcc-mirror/gcc/archive/releases/gcc-${GCC_VER}.tar.gz

		download_uncompress ${BINUTILSURL} ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
		download_uncompress ${GCCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		download_uncompress ${GMPURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gmp
		download_uncompress ${MPFRURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpfr
		download_uncompress ${MPCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpc
		download_uncompress ${ISLURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/isl
		pushd ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		find ../binutils-${BINUTILS_VER} -maxdepth 1 -type d -exec ln -fs {} . \;
		if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.33
		then
			echo "GCC version older than 10 and BINUTILS 2.33 or earlier... "
			cp -f ../binutils-${BINUTILS_VER}/configure.ac .
			cp -f ../binutils-${BINUTILS_VER}/Makefile.* .
		fi
		if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.34
		then
			echo "GCC version older than 10 and BINUTILS 2.34 or earlier... "
			ln -fs ../binutils-${BINUTILS_VER}/config/debuginfod.m4 config/debuginfod.m4
		fi
		if test_version ${GCC_VER} -eq 11.2.0 && test_version ${BINUTILS_VER} -ge 2.37
		then
			echo "GCC version is 11.2.0 and BINUTILS 2.37 or earlier... "
			mv libiberty libiberty.gcc
			ln -fs ../binutils-${BINUTILS_VER}/libiberty .
		fi
		if [ ../binutils-${BINUTILS_VER}/libiberty/cp-demangle.c -nt libiberty/cp-demangle.c ]
		then
			echo "binutils-${BINUTILS_VER}/libiberty newer than gcc-${GCC_VER}/libiberty... "
			mv libiberty libiberty.gcc
			ln -fs ../binutils-${BINUTILS_VER}/libiberty .
		fi
		popd
		set +x
		trap ERR
	}

	function gcc_configuration () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x

		if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}

		local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${HARCH}"
		case ${HARCH} in
			*)	local PLATFORM_ARCHFLAGS="--with-arch-directory=${HM} ${HMARCH:+ --with-arch=${HMARCH}}${HMFPU:+ --with-fpu=${HMFPU}}${HMFLOATABI:+ --with-float=${HMFLOATABI}}"
				;;
		esac

		echo "GCC_BUILD_PATH: ${TOOLCHAIN_PATH}/gcc-${GCC_VER}"
		pushd ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
		CC_FOR_BUILD="${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc)" \
		CXX_FOR_BUILD="${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++)" \
		AR_FOR_BUILD="$(which ${BARCH}-gcc-ar)" \
		NM_FOR_BUILD="$(which ${BARCH}-gcc-nm)" \
		RANLIB_FOR_BUILD="$(which ${BARCH}-gcc-ranlib)" \
		CFLAGS_FOR_BUILD="${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}" \
		CXXFLAGS_FOR_BUILD="${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}" \
		LDFLAGS_FOR_BUILD="${LINKERFLAGS}" \
		CC="${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc)" \
		CXX="${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++)" \
		AR="$(which ${BARCH}-gcc-ar)" \
		NM="$(which ${BARCH}-gcc-nm)" \
		RANLIB="$(which ${BARCH}-gcc-ranlib)" \
		CFLAGS="${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}${LTO_COMPFLAGS}" \
		CXXFLAGS="${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}${LTO_LINKERFLAGS}" \
		LDFLAGS="${LINKERFLAGS}" \
		CFLAGS_FOR_TARGET="${COMPFLAGS} ${OPTCOMP_FLAGS}" \
		CXXFLAGS_FOR_TARGET="${COMPFLAGS} ${OPTCOMP_FLAGS}" \
		LDFLAGS_FOR_TARGET="${LINKERFLAGS} ${OPTLINK_FLAGS}" \
		${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure \
			${CONFIG_ARCH_PARAMS} ${GCC_SYSROOT_FLAGS} ${PLATFORM_ARCHFLAGS} \
			${BINUTILS_CONFIG} ${GCC_CONFIG} \
			--prefix="${TOOLCHAIN_PATH}"
			build_configargs="${build_configargs}" \
			host_configargs="${host_configargs}" \
			target_configargs="${target_configargs}"

		popd
		if [ -n "${GCC_SYSROOT}" ]
		then
			mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/${HARCH}/libgcc
			echo "Create a symlink that allows libgcc to be built with posix threads support"
			ln -s ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/libgcc/gthr-posix.h ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/${HARCH}/libgcc/gthr-default.h
		fi
		set +x
		trap - ERR
	}

	function gcc_make_host () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x

		echo "Making compiler."
		make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} all-host
		make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} install-strip-host

		GCC_MAJVER=$(${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -dumpversion)

		echo "Finalize the installation of the limits.h header"
		${TOOLCHAIN_PATH}/libexec/gcc/${HARCH}/${GCC_MAJVER}/install-tools/mkheaders

		set +x
		trap ERR
	}

	function gcc_make_target_libs () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x

		local LIB_LA_SEDTRANS="s&^dependency_libs=' -L${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/./ld&dependency_libs='&; s&^libdir='${TOOLCHAIN_PATH}&libdir='${BUILD_PREFIX}&"

		### Define objects to be built
		echo "Targets to build: ${_param_targets:-all}"
		if [ "${_param_targets:-all}" = "all" ]
		then
			local OBJECTS="libgcc libstdc++-v3 libgomp libssp libatomic"
			if [ "$(echo ${GCC_LANGUAGES} | grep -o fortran)" == "fortran" ]
			then
				OBJECTS+=" libquadmath"
			fi
		else
			local OBJECTS="${_param_targets}"
		fi
		local BUILD_OBJECTS=
		for object in $( echo ${OBJECTS} | tr ',' ' ' )
		do
			local BUILD_OBJECTS+=" all-target-${object}"
		done
		make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} ${BUILD_OBJECTS}

		for object in $( echo ${OBJECTS} | tr ',' ' ' )
		do
			### Install in the toolchain dir
			make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} install-strip-target-${object}
			### Create package if it is not bootstrapping
			if [ -n "${GCC_SYSROOT}" ]
			then
				[ -d ${PACKAGES_PATH}/gcc-libs-${GCC_VER} ] && rm -rf ${PACKAGES_PATH}/gcc-${object}_${GCC_VER} || true
				make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} DESTDIR="${PACKAGES_PATH}/gcc-${object}_${GCC_VER}" prefix=${BUILD_PREFIX} install-strip-target-${object}
				echo "Adapt .la libraries to ${BIN_PATH}${BIN_PREFIX}"
				find ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}${BUILD_PREFIX}/lib/gcc/${HARCH}/${GCC_MAJVER} -mindepth 1 -name "*.la" -type f | xargs -r \
					sed -i "${LIB_LA_SEDTRANS}"
				tar cfp - --owner=0 --group=0 -C ${PACKAGES_PATH}/gcc-${object}_${GCC_VER} . | xz -T${NPROCS} - > ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}.tar.xz
				rm -rf ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}
			fi
			### Install in BIN_PATH if requested via --install
			if [ ${_param_install:-0} -eq 1 ]
			then
				make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} DESTDIR="${BIN_PATH}" prefix=${BUILD_PREFIX} install-strip-target-${object}
			fi
		done

		echo "Adapt .la libraries to ${BIN_PATH}${BIN_PREFIX}"
		find ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_MAJVER} $( [ ${_param_install:-0} -eq 1 ] && echo "${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH}/${GCC_MAJVER}" || true ) -mindepth 1 -name "*.la" -type f | xargs -r \
			sed -i "${LIB_LA_SEDTRANS}" 

		make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} all-target-libsanitizer
		make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} install-strip-target-libsanitizer

		set +x
		trap ERR
	}

	trap 'local STATUS=${?}; \
		trap - ERR; \
		echo "fail."; \
		echo "Remove ${TOOLCHAIN_PATH} folder before start over again."; \
		echo; \
		return ${STATUS}' ERR

	OPTS="--install" OPTS_WITH_VALUE="--targets" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	
	echo -n "Setting up gcc"
	echo -n "-${GCC_VER}... "

	if [ ! -f ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc ] && [ ! -f ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ ]
	then
		gcc_buildenv
		> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log
		if [ ! -d ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} ] || [ ! -d ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
		then
			echo -n "downloading... "
			gcc_download >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log 2>&1
		fi
		echo -n "${ECHO_BOOTSTRAP}configuration... "
		gcc_configuration >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log 2>&1
		echo -n "${ECHO_BOOTSTRAP}building host binaries... "
		gcc_make_host ${HARCH} >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log 2>&1
		### Check if bootstrap sysroot before building target libraries
		if [ -n "${GCC_SYSROOT}" ]
		then
			echo -n "building target libraries... "
			gcc_make_target_libs > ${LOG_PATH}/toolchain_target-gcclibs-${GCC_VER}.log 2>&1
		else
			### Bootstrapping sysroot
			echo "done."
			echo "Bootstrapping foundation libraries in ${BIN_PATH}... "
			local SPACES="   "
			echo -n "${SPACES}"
			echo -n "building bootstrap libgcc... "
			_param_targets="libgcc" _param_install=0 gcc_make_target_libs > ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}target-gcclibs-${GCC_VER}.log 2>&1
			echo "done."
			### Build & install kernel headers
			echo -n "${SPACES}"
			KERNEL_HDRS_ONLY=1 build --no_gcc_check --no_save_status ${BS_KERNEL:-bootstrap/bs_kernel}
			### Build & install glibc
			echo -n "${SPACES}"
			PKG_TOOLCHAIN=gnu NUMSPACES=1 WITH_LIBXCRYPT=1 build --no_save_status bootstrap/bs_glibc
			### Build & install libxcrypt
			echo -n "${SPACES}"
			PKG_TOOLCHAIN=gnu NUMSPACES=1 build --no_save_status bootstrap/bs_libxcrypt
			rm -rf ${TOOLCHAIN_PATH}
			echo -n "Rebuild final gcc... "
			gcc_buildenv
			echo -n "configuration... "
			gcc_configuration >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log 2>&1
			echo -n "building for host... "
			gcc_make_host ${HARCH} >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log 2>&1
			echo -n "building target libraries... "
			gcc_make_target_libs >> ${LOG_PATH}/toolchain_target-gcclibs-${GCC_VER}.log 2>&1
		fi
	fi

	if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} ] && false
	then
		echo -n "removing build directory... "
		rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
	fi
	if [ -d ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
	then
		echo -n "removing source directory... "
		rm -rf ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		rm -rf ${TOOLCHAIN_SRCPATH}/gcc-${BINUTILS_VER}
	fi
	echo "done."

	trap - ERR
}

function setup_llvm () {
	function download_llvm () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR

		set -x
		local GCCURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VER}/llvm-project-${LLVM_VER}.src.tar.xz
		download_uncompress ${GCCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
		set +x
		trap ERR
	}

	function build_llvm () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR
		set -x

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}

		local PLATFORM_CFLAGS="-march=native"

		sed -i "s/-flto\"/-flto=auto\"/g" ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/AddLLVM.cmake
		sed -i "s/-flto\"/-flto=auto\"/g" ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/HandleLLVMOptions.cmake

		cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} -G Ninja \
			-W no-dev \
			-DLLVM_PARALLEL_COMPILE_JOBS=${NPROCS} \
			-DLLVM_PARALLEL_LINK_JOBS=1 \
			\
			-DLLVM_CCACHE_BUILD:BOOL=ON \
			-DCMAKE_C_COMPILER=$(which ${BARCH}-gcc) \
			-DCMAKE_CXX_COMPILER=$(which ${BARCH}-g++) \
			-DCMAKE_AR=$(which gcc-ar) \
			-DCMAKE_NM=$(which gcc-nm) \
			-DCMAKE_RANLIB=$(which gcc-ranlib) \
			-DCMAKE_CROSSCOMPILING=True \
			-DLLVM_USE_LINKER=gold \
			-DCMAKE_C_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_CXX_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_ASM_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS}" \
			-DCMAKE_SKIP_RPATH:BOOL=ON \
			\
			-DCMAKE_INSTALL_PREFIX=${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER} \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_TARGETS_TO_BUILD="all" \
			-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb;lld;polly" \
			-DLLVM_ENABLE_RUNTIMES="compiler-rt" \
			-DLLVM_BINUTILS_INCDIR=/usr/include \
			-DLLVM_LIBDIR_SUFFIX=64 \
			\
			-DBUILD_SHARED_LIBS:BOOL=OFF \
			-DLLVM_ENABLE_LTO:BOOL=OFF \
			-DLLVM_ENABLE_LIBCXX:BOOL=OFF \
			-DLLVM_ENABLE_ZLIB:BOOL=ON \
			-DLLVM_ENABLE_FFI:BOOL=ON \
			-DLLVM_ENABLE_RTTI:BOOL=ON \
			-DLLVM_ENABLE_EH:BOOL=ON \
			-DLLVM_ENABLE_NEW_PASS_MANAGER:BOOL=ON \
			-DLLVM_ENABLE_BINDINGS:BOOL=OFF \
			-DLLVM_USE_PERF:BOOL=ON \
			-DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=ON \
			-DLLVM_LIT_ARGS=-v \
			-DLLVM_INCLUDE_EXAMPLES:BOOL=ON \
			-DLLVM_INCLUDE_UTILS:BOOL=ON \
			-DLLVM_INCLUDE_TESTS:BOOL=OFF \
			-DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=OFF \
			-DLLVM_BUILD_EXAMPLES:BOOL=OFF \
			-DLLVM_BUILD_TESTS:BOOL=OFF \
			-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
			-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
			-DLLVM_INSTALL_UTILS:BOOL=ON \
			\
			-DCLANG_PLUGIN_SUPPORT:BOOL=ON \
			-DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
			-DENABLE_LINKER_BUILD_ID:BOOL=ON \
			-DCLANG_DEFAULT_RTLIB=libgcc \
			-DCLANG_DEFAULT_UNWINDLIB=libgcc \
			\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON

		ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} \
			-C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} install/strip

		set +x
		trap ERR
	}

	function build_llvm_builtins () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR
		set -x
		local LLVM_TARGET=${1}
		# To be changed with: ${TOOLCHAIN_PATH}
		local LLVM_INSTALL_PATH=$(llvm-config --prefix)

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		if [ -d ${DISTOS_PATH} ]
		then
			if [ $(find ${DISTOS_PATH}/usr/lib ${DISTOS_PATH}/lib -type f -name crti.o -mindepth 1 2>/dev/null | wc -l) -ge 1 ]
			then
				local SYSROOT=${DISTOS_PATH}
				export QEMU_LD_PREFIX="${DISTOS_PATH}"
			fi
		else
			local SYSROOT=${BIN_PATH}
			export QEMU_LD_PREFIX="${BIN_PATH}"
		fi
		#cd ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		local PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
		### Can we build the RT builtins?
		case x${HMARCH} in
			xarmv*)
					if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
					then
						echo -n "${HMARCH} is not supported, RT Builtins disabled... "
						local COMPILER_RT_BUILD_BUILTINS=OFF
					else
						local COMPILER_RT_BUILD_BUILTINS=ON
					fi
				;;
			*) local COMPILER_RT_BUILD_BUILTINS=ON
				;;
		esac
		cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/compiler-rt -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} -G Ninja \
			\
			-DCMAKE_C_COMPILER=${LLVM_INSTALL_PATH}/bin/clang \
			-DCMAKE_CXX_COMPILER=${LLVM_INSTALL_PATH}/bin/clang++ \
			-DCMAKE_AR=${LLVM_INSTALL_PATH}/bin/llvm-ar \
			-DCMAKE_NM=${LLVM_INSTALL_PATH}/bin/llvm-nm \
			-DCMAKE_RANLIB=${LLVM_INSTALL_PATH}/bin/llvm-ranlib \
			-DCMAKE_C_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_CXX_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_ASM_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="--target=${LLVM_TARGET} -fuse-ld=lld" \
			-DCMAKE_C_COMPILER_TARGET="${LLVM_TARGET}" \
			-DCMAKE_ASM_COMPILER_TARGET="${LLVM_TARGET}" \
			\
			-DCMAKE_INSTALL_PREFIX=/lib/clang/${LLVM_VER} \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_SYSROOT=${SYSROOT} \
			\
			-DLLVM_CONFIG_PATH=${LLVM_INSTALL_PATH}/bin/llvm-config \
			\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
			-DCOMPILER_RT_BUILD_BUILTINS:BOOL=${COMPILER_RT_BUILD_BUILTINS} \
			-DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=ON \
			-DCOMPILER_RT_BUILD_MEMPROF:BOOL=ON \
			-DCOMPILER_RT_BUILD_PROFILE:BOOL=ON \
			-DCOMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-DCOMPILER_RT_BUILD_XRAY:BOOL=ON \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
			-DBUILD_SHARED_LIBS:BOOL:BOOL=OFF

		DESTDIR=${TOOLCHAIN_PATH} ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} \
			-C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} install/strip

		### Create rt_builtins package
		[ -d ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER} ] && rm -rf ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER} || true
		DESTDIR=${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}${BUILD_PREFIX} \
			ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} -C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} install/strip
		tar cfp - --owner=0 --group=0 -C ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER} . | xz -T${NPROCS} - > ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}.tar.xz
		rm -rf ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}

		if [ ${_param_install:-0} -eq 1 ]
		then
			DESTDIR=${BIN_PATH}${BUILD_PREFIX} \
				ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} -C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} install/strip
		fi

		set +x
		trap ERR
	}

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log ]; \
		then \
			echo "Log ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log; \
		fi; \
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	OPTS="--install" OPTS_WITH_VALUE="--targets" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	echo -n "Setting up clang-${LLVM_VER}... "
	if ( ! clang -v > /dev/null 2>&1 || ! ld.lld -v > /dev/null 2>&1 ) && ( ! ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/clang -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/ld.lld -v > /dev/null 2>&1 )
	then
		> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
		if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
		fi
		echo -n "downloading... "
		download_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		echo -n "building native... "
		build_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin ] && [ -d ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/lib64 ]
	then
		echo -n "setting up search paths... "
		export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/lib64}:${LD_LIBRARY_PATH}"
		export PATH="${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin:${PATH}"
	fi
	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*)
			local LLVM_ARCH=${HM}
			;;
	esac
	if [ ! -f ${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/clang_rt.crtbegin-${LLVM_ARCH}.o ]
	then
		if [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			echo -n "downloading... "
			download_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		fi
		echo -n "building builtins for ${HARCH}... "
		build_llvm_builtins ${HARCH} >> ${GLOBAL_LOG_PATH}/toolchain_llvm-builtins-${LLVM_VER}.log 2>&1
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
	then
		rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
	then
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
	fi
	echo "done."

	trap ERR
}

function install_gccheaders () {
	setbuildenv
	set -e
	echo -n "Installing GCC headers... "
	echo "INSTALL_PATH: ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER}" >> ${LOG_PATH}/gccheaders.log
	if [ ! -d ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER} ]
	then
		mkdir -p ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER} >> ${LOG_PATH}/gccheaders.log 2>&1
	fi
	cp -prv ${TOOLCHAIN_PATH}/${HARCH}/include/c++/${GCC_VER}/* ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER}/ >> ${LOG_PATH}/gccheaders.log 2>&1
	echo -e "done" >> ${LOG_PATH}/gccheaders.log 2>&1
	echo >> ${LOG_PATH}/gccheaders.log 2>&1
	echo "done."
	set +e
}

function install_gcclibs () {
	setbuildenv
	set -e
	echo -n "Installing GCC libraries... "
	echo "INSTALL_PATH: ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}" >> ${LOG_PATH}/gcclibs.log
	if [ ! -d ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER} ]
	then
		mkdir -p ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER} >> ${LOG_PATH}/gcclibs.log 2>&1
	fi
	if [ -d ${TOOLCHAIN_PATH}/${HARCH}/lib64 ]
		then
			local SYSLIB=lib64
		else
			local SYSLIB=lib
	fi
	for file in $( find ${TOOLCHAIN_PATH}/${HARCH}/${SYSLIB} -maxdepth 1 \( -name '*.so*' -a ! -name 'libstdc++.so.*-*.py' -o -name '*.a' \) -printf '%P ')
	do
		echo -n "Copying ${file} into ${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}... " >> ${LOG_PATH}/gcclibs.log 2>&1
		cp -Pf ${TOOLCHAIN_PATH}/${HARCH}/${SYSLIB}/${file} ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		if [[ ${file} =~ ^(libgcc_s.so|libstdc++.so|libgfortran.so|libgomp.so).* ]]
		then
			echo -n "linking into ${BUILD_LIBDIR}${BUILD_LIBSUFFIX}..." >> ${LOG_PATH}/gcclibs.log 2>&1
			ln -sf ../gcc/${HARCH}/${GCC_MAJVER}/${file} ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		fi
		echo -e "done" >> ${LOG_PATH}/gcclibs.log
	done
	for file in $( find ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_VER} -maxdepth 1 \( -name "crt*.o" -o -name "*.a" \) -printf '%P ')
	do
		echo -n "Copying ${file} into ${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}... " >> ${LOG_PATH}/gcclibs.log 2>&1
		cp -Pf ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_VER}/${file} ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		echo -e "done" >> ${LOG_PATH}/gcclibs.log
	done
	echo >> ${LOG_PATH}/gcclibs.log 2>&1
	echo "done."
	set +e
}

function setup_rust () {
	check_${TOOLCHAIN}_c

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/rust.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/rust.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/rust.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up RUST... "
	export CARGO_HOME=${GLOBAL_TOOLCHAIN_PATH}
	export RUSTUP_HOME=${GLOBAL_TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading... "
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init
		echo -n "installing... "
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
		rm -f /tmp/rustup-init
		echo "done."
	else
		echo "already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries... "
	rustup -v target add ${CARGO_TARGET} >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
	echo "done."
	echo

	trap ERR
}

function setup_python () {
	function download_pyton () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz"
		download_uncompress ${PYTHONURL} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER} &&
		curl -LsR -o ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py https://bootstrap.pypa.io/get-pip.py
		set +x
		trap ERR
	}

	function build_python () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		if [ -d ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		cd ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		case ${TOOLCHAIN} in
			gnu)
				if which ${BARCH}-gcc-ar > /dev/null 2>&1
				then
					local HOST_AR="${BARCH}-gcc-ar"
				else
					local HOST_AR="gcc-ar"
				fi
				if which ${BARCH}-gcc-nm > /dev/null 2>&1
				then
					local HOST_NM="${BARCH}-gcc-nm"
				else
					local HOST_NM="gcc-nm"
				fi
				if which ${BARCH}-gcc-ranlib > /dev/null 2>&1
				then
					local HOST_RANLIB="${BARCH}-gcc-ranlib"
				else
					local HOST_RANLIB="gcc-ranlib"
				fi
				export CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
				export CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
				export CFLAGS="-march=native"
				export CXXFLAG="-march=native"
				export AR="${HOST_AR}"
				export NM="${HOST_NM}"
				export RANLIB="${HOST_RANLIB}"
				export LDFLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS} ${GNU_EXTRALDFLAGS} ${OPTLINK_FLAGS}"
				;;
			llvm)
				export CC="${CCWRAPPER:+${CCWRAPPER} }clang"
				export CFLAGS="-march=native"
				export AR="llvm-ar"
				export NM="llvm-nm"
				export RANLIB="llvm-ranlib"
				export LDFLAGS="-fuse-ld=lld -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS} ${OPTLINK_FLAGS}"
				;;
		esac
		${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared --with-lto \
			--with-system-ffi ax_cv_c_float_words_bigendian=no
		#--with-address-sanitizer --with-undefined-behavior-sanitizer
		make
		make install
		${BUILD_PYTHON} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py
		#pip${PYTHONBIN_VER} install meson ninja
		cd ${START_PWD}
		rm -rf ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		set +x
		trap ERR
	}

	function build_python_crossenv () {
		trap 'STATUS=${?}; \
			set +x; \
			[ -d ${TOOLCHAIN_PATH}/venv-${HARCH} ] && rm -rf || true; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		${BUILD_PYTHONPIP} install crossenv
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH}
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate
		build-python -m pip install --upgrade cython setuptools wheel 2>&1
		mkdir -p ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		pushd ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		TOOLCHAIN=gnu create_environment_source
		source environment.source
		cross-pip -v install --upgrade cython 2>&1
		popd
		rm -rf ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		set +x
		trap ERR
	}

	check_${TOOLCHAIN}_c

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log ];
		then \
			echo "Log ${LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up Python"
	if [ -d ${DISTOS_PATH} ]
	then
		local PYTHON_SEARCHPATH=${DISTOS_PATH}
	else
		local PYTHON_SEARCHPATH=${BIN_PATH}
	fi
	if [ -z ${1} ]
	then
		local PYTHON_VER=$(find ${PYTHON_SEARCHPATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHON_VER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting... "
			echo
			return 1
		else
			echo -n "-${PYTHON_VER} (guessed)... "
		fi
	else
		local PYTHON_VER=${1}
		echo -n "-${PYTHON_VER}... "
	fi
	PYTHONBIN_VER=$( echo ${PYTHON_VER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${TOOLCHAIN_PATH}/bin/python${PYTHONBIN_VER}
	BUILD_PYTHONPIP=${TOOLCHAIN_PATH}/bin/pip${PYTHONBIN_VER}
	HOST_PYTHON=${PYTHON_SEARCHPATH}/usr/bin/python${PYTHONBIN_VER}
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
	export PATH=${TOOLCHAIN_PATH}/bin:${PATH}
	export LD_LIBRARY_PATH=${TOOLCHAIN_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading... "
		download_pyton > ${LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log 2>&1
		echo -n "building... "
		build_python >> ${LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log 2>&1
		echo "done."
		rm -rf ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}
	else
		echo "already there."
	fi
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi
		if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ]
		then
			eval ${SUDO_CMD} mv ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/_sysconfigdata.py
		fi
		if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m ]
		then
			eval ${SUDO_CMD} ln -s config-${PYTHONBIN_VER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m
		fi
	fi
	trap ERR
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_python-crossenv.log ];
		then \
			echo "Log ${LOG_PATH}/toolchain_python-crossenv.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_python-crossenv.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	if [ ${SKIP_PYTHONVENV:-0} -eq 0 ]
	then
		echo -n "Creating virtual cross environment... "
		if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
		then
			build_python_crossenv >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
			echo "done."
			echo
		else
			echo "already there."
			echo
			source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
		fi
	fi
	trap ERR
}

function setup_pkgconfig () {
	if [ ! -d ${TOOLCHAIN_PATH}/bin ]
	then
		mkdir ${TOOLCHAIN_PATH}/bin
	fi
	setbuildenv
	cat > ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config <<-EOF
		#!/bin/sh
		set -o pipefail
		echo "PKG_CONFIG_LIBDIR=\${PKG_CONFIG_LIBDIR} \\\\" >> pkg-config.log
		echo "PKG_CONFIG_SYSROOT_DIR=\${PKG_CONFIG_SYSROOT_DIR} \\\\" >> pkg-config.log
		echo $(which pkg-config) \$@ >> pkg-config.log
		$(which pkg-config) \$@ | tee -a pkg-config.log
		STATUS=\$?
		echo >> pkg-config.log
		set +o pipefail
		exit \${STATUS}
	EOF
	chmod +x ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config
}

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi
GLOBAL_TOOLCHAIN_SRCPATH=${GLOBAL_SRC_PATH}
GLOBAL_TOOLCHAIN_BLDPATH=${GLOBAL_BLD_PATH}
if [ ! -d ${GLOBAL_TOOLCHAIN_PATH} ]
then
	mkdir -p ${GLOBAL_TOOLCHAIN_PATH}
fi

BINUTILS_VER=${BINUTILS_VER:-2.37}
GCC_VER=${GCC_VER:-11.2.0}
GMP_VER=${GMP_VER:-6.2.1}
MPFR_VER=${MPFR_VER:-4.1.0}
MPC_VER=${MPC_VER:-1.2.1}
ISL_VER=${ISL_VER:-0.24}

LLVM_VER=${LLVM_VER:-13.0.1}

# Check the toolchains
gcc -v > /dev/null 2>&1
if [ ! ${?} -eq 0 ]
then
	echo "The toolchain for host compile does not exist."
	exit 1
fi
BARCH=$(gcc -dumpmachine)

setup_pkgconfig