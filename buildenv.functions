#!/bin/bash

check_core_functions
check_build_functions

function prepare_sysroot () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Preparing sysroot... "
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi

		echo "DISTOS_PATH: ${DISTOS_PATH}" >> ${LOG_PATH}/sysroot.log 2>&1
		echo >> ${LOG_PATH}/sysroot.log 2>&1

		find -L ${DISTOS_PATH}/usr/lib/${HARCH} \( -lname "/lib/${HARCH}*" -o -lname "/etc/alternatives*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1
		find -L ${DISTOS_PATH}/etc/alternatives \( -lname "/lib/${HARCH}*" -o -lname "/usr/lib/${HARCH}*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1

		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			eval ${SUDO_CMD} sed -i "s#/usr/lib/${HARCH:+${HARCH}/}libicu#${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu#g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		echo "done."
		echo
	else
		echo "fail. No image mounted."
		return 1
	fi

	trap ERR
}

function create_sysroot () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Creating sysroot with $(basename ${1})... "
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
		fi
		prepare_sysroot
		echo "done."
		echo
	else
		echo "already present. Run rm -rf ${DISTOS_PATH} if you want to update it."
		echo
	fi
	trap ERR
}

function bootstrap_sysroot () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	if [ -z ${1} ]
	then
		echo "Kernel package not specified!!!"
		trap ERR
		return 1
	fi
	if [ -z ${2} ]
	then
		echo "GLIBC package not specified!!!"
		trap ERR
		return 1
	fi

	local KERN_PACKAGE=${1}
	local GLIBC_PACKAGE=${2}
	local LIBXCRYPT_PACKAGE=${3:-none}

	#setbuildenv
	local MULTI_ARCH=${MULTIARCH:-1}
	local BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
	local BUILD_EXECPREFIX="${BUILD_EXECPREFIX:-${BUILD_PREFIX}}"
	local BUILD_INCLUDEDIR="${BUILD_INCLUDEDIR:-$(readlink -m ${BUILD_PREFIX}/include)}"
	local BUILD_LIBDIR="${BUILD_LIBDIR:-$(readlink -m ${BUILD_EXECPREFIX}/lib)}"
	local BUILD_SYSCONFDIR="${BUILD_SYSCONFDIR:-/etc}"
	local BUILD_LOCALSTATEDIR="${BUILD_LOCALSTATEDIR:-/var}"
	if [ ${MULTI_ARCH} -eq 1 ]
	then
		local BUILD_LIBSUFFIX="/${HARCH}"
	fi

	echo "Bootstrapping sysroot in ${BIN_PATH}... "
	local SPACES="   "

	# Build Kernel Headers
	echo -n "${SPACES}"
	if [ ! -f ${BIN_PATH}${BUILD_INCLUDEDIR}/linux/kernel.h ]
	then
		KERN_HDRS_ONLY=1 build --no_gcc_check --no_save_status ${KERN_PACKAGE}
	else
		echo "${KERN_PACKAGE} headers already installed."
	fi
	# Build gcc binary (GCC stage 1)
	echo -n "${SPACES}"
	if ! ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -v > /dev/null 2>&1
	then
		GCC_LTOENABLE=0 setup_gcc stage1
	else
		echo "GCC stage1 (gcc) already installed."
	fi
	# Build glibc headers (requisite for GCC stage 1)
	echo -n "${SPACES}"
	if [ ! -f ${BIN_PATH}${BUILD_INCLUDEDIR}/gnu/libc-version.h ]
	then
		TOOLCHAIN=gnu OVERRIDE_INST_CMD="install-bootstrap-headers=yes install-headers" build --no_gcc_check --no_save_status ${GLIBC_PACKAGE}
		if [ ! -f ${BIN_PATH}${BUILD_INCLUDEDIR}/gnu/stubs.h ]
		then
			touch ${BIN_PATH}${BUILD_INCLUDEDIR}/gnu/stubs.h
		fi
	else
		echo "${GLIBC_PACKAGE} headers already installed."
	fi
	# Build gcc (GCC stage 2)
	echo -n "${SPACES}"
	if [ ! -f ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_VER}/libgcc.a ]
	then
		GCC_LTOENABLE=0 setup_gcc stage2
		install_gcclibs
	else
		echo "GCC stage2 (libgcc) already installed."
	fi
	# Build glibc (requisite for GCC final)
	echo -n "${SPACES}"
	if [ "${LIBXCRYPT_PACKAGE}" != "none" ]
	then
		local WITH_LIBXCRYPT=1
	else
		local WITH_LIBXCRYPT=0
	fi
	if [ ! -f ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libc.so ]
	then
		TOOLCHAIN=gnu NUMSPACES=1 WITH_LIBXCRYPT=${WITH_LIBXCRYPT} build --no_gcc_check --no_save_status ${GLIBC_PACKAGE}
	else
		echo "${GLIBC_PACKAGE} libraries already installed."
	fi
	# Build libxcrypt
	if [ ${WITH_LIBXCRYPT} -eq 1 ]
	then
		echo -n "${SPACES}"
		if [ ! -f ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/libcrypt.so ]
		then
			TOOLCHAIN=gnu NUMSPACES=1 INSTALL_ONLYHEADERS=1 build --no_gcc_check --no_save_status ${LIBXCRYPT_PACKAGE}
		else
			echo "${LIBXCRYPT_PACKAGE} libraries already installed."
		fi
	fi
	# Build gcc final
	echo -n "${SPACES}"
	setup_gcc stage3

	local GCC_MAJVER=$(echo ${GCC_VER} | cut -d'.' -f1,1 )
	if [ ! -d ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER} ]
	then
		echo -n "   "
		install_gcclibs
	fi
	if [ ! -d ${BIN_PATH}${BUILD_INCLUDEDIR}/c++ ]
	then
		echo -n "   "
		install_gccheaders
	fi

	echo "Done."
	echo

	trap ERR
}

function check_gnu_c () {
	${HARCH}-gcc -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function check_llvm_c () {
	clang --target=${HARCH} -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function download_gcc () {
	trap 'STATUS=${?}; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	set -x
	local GMPURL=https://gmplib.org/download/gmp/gmp-${GMP_VER}.tar.xz
	local MPFRURL=https://www.mpfr.org/mpfr-${MPFR_VER}/mpfr-${MPFR_VER}.tar.xz
	local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz
	#local ISLURL=http://isl.gforge.inria.fr/isl-${ISL_VER}.tar.xz
	local ISLURL=https://mirror.sobukus.de/files/src/isl/isl-${ISL_VER}.tar.xz
	local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz
	#local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.xz
	local GCCURL=https://github.com/gcc-mirror/gcc/archive/releases/gcc-${GCC_VER}.tar.gz

	download_uncompress ${BINUTILSURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
	download_uncompress ${GCCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
	download_uncompress ${GMPURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gmp
	download_uncompress ${MPFRURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpfr
	download_uncompress ${MPCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpc
	download_uncompress ${ISLURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/isl
	cd ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
	find ../binutils-${BINUTILS_VER} -maxdepth 1 -type d -exec ln -fs {} . \;
	if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.33
	then
		echo "GCC version older than 10 and BINUTILS 2.33 or earlier... "
		cp -f ../binutils-${BINUTILS_VER}/configure.ac .
		cp -f ../binutils-${BINUTILS_VER}/Makefile.* .
	fi
	if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.34
	then
		echo "GCC version older than 10 and BINUTILS 2.34 or earlier... "
		ln -fs ../binutils-${BINUTILS_VER}/config/debuginfod.m4 config/debuginfod.m4
	fi
	if test_version ${GCC_VER} -eq 11.2.0 && test_version ${BINUTILS_VER} -ge 2.37
	then
		echo "GCC version is 11.2.0 and BINUTILS 2.37 or earlier... "
		mv libiberty libiberty.gcc
		ln -fs ../binutils-${BINUTILS_VER}/libiberty .
	fi
	if [ ../binutils-${BINUTILS_VER}/libiberty/cp-demangle.c -nt libiberty/cp-demangle.c ]
	then
		echo "binutils-${BINUTILS_VER}/libiberty newer than gcc-${GCC_VER}/libiberty... "
		mv libiberty libiberty.gcc
		ln -fs ../binutils-${BINUTILS_VER}/libiberty .
	fi
	autoreconf${AUTOCONF_VER} -fiv
	set +x
	trap ERR
}

function setup_gcc () {

	function build_gcc () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local BUILD_ARCH=${1:-${HARCH}}
		if [ ${MAKEVERBOSE:-0} -eq 0 ]
		then
			local SILENTCONFIG="--enable-silent-rules"
		fi
		if [ ${GCC_LTOENABLE} -eq 1 ]
		then
			local BOOTSTRAP_FLAGS="bootstrap-lto"
		fi
		if [ ${OPTLEVEL} -eq 3 ]
		then
			local BOOTSTRAP_FLAGS+=" bootstrap-O3"
		fi
		case ${GCC_STAGE} in
			stage1 | stage2 )
				local GCC_LANGUAGES=c,lto
				local GCC_COMMON_CONFIG="${SILENTCONFIG} --enable-languages=${GCC_LANGUAGES} --disable-shared --enable-linker-build-id --disable-nls --enable-gnu-unique-object --disable-plugin --enable-checking=release --disable-libmudflap --disable-libgomp --disable-libssp --enable-lto --disable-threads --enable-initfini-array --enable-multiarch \
					--disable-option-checking --disable-libitm --disable-libmpx --without-headers --without-ppl"
				local GCC_COMMON_CONFIG+=" --with-system-zlib"
			;;
			* )
				local GCC_LANGUAGES=${GCC_LANGUAGES:-c,c++,fortran,lto}
				local GCC_COMMON_CONFIG="${SILENTCONFIG} --with-build-config=\"${BOOTSTRAP_FLAGS}\" \
					--enable-languages=${GCC_LANGUAGES} --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
					--enable-install-libiberty \
					--with-default-libstdcxx-abi=new \
					--disable-option-checking --disable-libitm --disable-libmpx"
				local GCC_COMMON_CONFIG+=" --with-system-zlib"
			;;
		esac
		local GCC_BUILD_CONFIG="--disable-multilib --disable-bootstrap"
		local GCC_HOST_CONFIG="--with-multilib=default --with-arch-directory=${HM}${HMARCH:+ --with-arch=${HMARCH}}${HMFPU:+ --with-fpu=${HMFPU}}${HMFLOATABI:+ --with-float=${HMFLOATABI}}"
		# from binutils 2.34 enable-instal-libbfd
		local BINUTILS_COMMON_CONFIG="--enable-gold --enable-install-libbfd --enable-64-bit-bfd --enable-threads"
		local BINUTILS_BUILD_CONFIG=""
		local BINUTILS_HOST_CONFIG=""
		local GCC_OPTCOMP_FLAGS="${GCC_OPTCOMP_FLAGS}${GCC_OPTLEVEL:+ -O${GCC_OPTLEVEL}}"
		local HOST_CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
		local HOST_CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
		if which ${BARCH}-gcc-ar > /dev/null 2>&1
		then
			local HOST_AR="${BARCH}-gcc-ar"
		else
			local HOST_AR="gcc-ar"
		fi
		if which ${BARCH}-gcc-nm > /dev/null 2>&1
		then
			local HOST_NM="${BARCH}-gcc-nm"
		else
			local HOST_NM="gcc-nm"
		fi
		if which ${BARCH}-gcc-ranlib > /dev/null 2>&1
		then
			local HOST_RANLIB="${BARCH}-gcc-ranlib"
		else
			local HOST_RANLIB="gcc-ranlib"
		fi
		local HOST_CFLAGS="${GCC_OPTCOMP_FLAGS} -Wno-pedantic"
		local HOST_CFLAGS+=" -march=native"
		local HOST_CXXFLAGS="${HOST_CFLAGS}"
		local HOST_LDFLAGS="${GCC_OPTLINK_FLAGS}"

		if [ "${BUILD_ARCH}" == "${BARCH}" ]
		then
			# If BUILD_ARCH then install in GLOBAL_TOOLCHAIN_PATH
			local GCC_BUILD_PATH=${GLOBAL_TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
			local GCC_INSTALL_PATH=${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}
			local GCC_CONFIG="${GCC_BUILD_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_BUILD_CONFIG}"
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${BARCH}"
			local TARGET_CFLAGS="${HOST_CFLAGS}"
			local TARGET_CXXFLAGS="${HOST_CXXFLAGS}"
			local TARGET_LDFLAGS="${HOST_LDFLAGS}"
		else
			# if TARGET_ARCH then install in TOOLCHAIN_PATH
			local GCC_BUILD_PATH=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
			local GCC_INSTALL_PATH=${TOOLCHAIN_PATH}
			local GCC_CONFIG="${GCC_HOST_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_HOST_CONFIG}"
			if [ -d ${DISTOS_PATH} ]
			then
				local GCC_SYSROOT_PATH=${DISTOS_PATH}
			else
				local GCC_SYSROOT_PATH=${BIN_PATH}
			fi
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${HARCH} --with-sysroot=${GCC_SYSROOT_PATH}"
			local TARGET_CFLAGS="-fPIC ${COMMON_CFLAGS} ${GCC_OPTCOMP_FLAGS}${HMARCH:+ -march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
			local TARGET_CXXFLAGS="${TARGET_CFLAGS}"
			local TARGET_LDFLAGS="${COMMON_LDFLAGS} ${GCC_OPTLINK_FLAGS}"
		fi
		if [ ${GCC_LTOENABLE} -eq 1 ]
		then
			local HOST_CFLAGS+=" ${COMMON_GNULTOFLAGS}"
			local HOST_CXXFLAGS+=" ${COMMON_GNULTOFLAGS}"
		fi
		local BUILD_ENV_SHELL="CC_FOR_BUILD='${HOST_CC}' CXX_FOR_BUILD='${HOST_CXX}' AR_FOR_BUILD='${HOST_AR}' NM_FOR_BUILD='${HOST_NM}' RANLIB_FOR_BUILD='${HOST_RANLIB}' \
			CFLAGS_FOR_BUILD='${HOST_CFLAGS}' CXXFLAGS_FOR_BUILD='${HOST_CXXFLAGS}' LDFLAGS_FOR_BUILD='${HOST_LDFLAGS}' \
			CC='${HOST_CC}' CXX='${HOST_CXX}' AR='${HOST_AR}' NM='${HOST_NM}' RANLIB='${HOST_RANLIB}' \
			CFLAGS='${HOST_CFLAGS}' CXXFLAGS='${HOST_CXXFLAGS}' LDFLAGS='${HOST_LDFLAGS}' \
			CFLAGS_FOR_TARGET='${TARGET_CFLAGS}' CXXFLAGS_FOR_TARGET='${TARGET_CXXFLAGS}' LDFLAGS_FOR_TARGET='${TARGET_LDFLAGS}'"

		echo "GCC_BUILD_PATH: ${GCC_BUILD_PATH}"
		### Build GCC
		if [ -d ${GCC_BUILD_PATH} ] && [[ ! "${GCC_STAGE}" =~ ^stage[24] ]]
		then
			echo "Removing build directory."
			rm -rf ${GCC_BUILD_PATH}
		fi
		if [ ! -d ${GCC_BUILD_PATH} ]
		then
			mkdir -p ${GCC_BUILD_PATH}
		fi
		cd ${GCC_BUILD_PATH}
		case ${GCC_STAGE} in
			stage1 )
				(eval "trap 'exit ${?}' ERR; ${BUILD_ENV_SHELL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure -v \
					--prefix=${GCC_INSTALL_PATH} --mandir=${GCC_INSTALL_PATH}/share/man --infodir=${GCC_INSTALL_PATH}/share/info \
					${CONFIG_ARCH_PARAMS} ${BINUTILS_COMMON_CONFIG} ${BINUTILS_CONFIG} ${GCC_COMMON_CONFIG} ${GCC_CONFIG} ${TARGET_CONFIG_ARGS}")
				make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0} all-gcc
				make V=${MAKEVERBOSE:-0} install-strip-ld install-strip-gold install-strip-gas install-strip-binutils install-strip-gcc
			;;
			stage2 )
				make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0} all-target-libgcc
				make V=${MAKEVERBOSE:-0} install-strip-target-libgcc
				cat ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gcc/{limitx.h,glimits.h,limity.h} > \
					$(dirname $(${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -print-libgcc-file-name))/install-tools/include/limits.h
			;;
			* )
				(eval "trap 'exit ${?}' ERR; ${BUILD_ENV_SHELL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure -v \
					--prefix=${GCC_INSTALL_PATH} --mandir=${GCC_INSTALL_PATH}/share/man --infodir=${GCC_INSTALL_PATH}/share/info \
					${CONFIG_ARCH_PARAMS} ${BINUTILS_COMMON_CONFIG} ${BINUTILS_CONFIG} ${GCC_COMMON_CONFIG} ${GCC_CONFIG} ${TARGET_CONFIG_ARGS}")				
				make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0}
				make V=${MAKEVERBOSE:-0} install-strip
				if [ -d libctf ]
				then
					make V=${MAKEVERBOSE:-0} -C libctf install-strip
				fi
			;;
		esac
		cd ${START_PWD}
		if [ -d ${GCC_BUILD_PATH} ] && [[ ! "${GCC_STAGE}" =~ ^stage[1234] ]]
		then
			echo "Removing build directory."
			rm -rf ${GCC_BUILD_PATH}
		fi
		set +x
		trap ERR;
	}

	trap 'STATUS=${?}; \
		set +x; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log ]; \
		then \
			echo "Log ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log; \
		fi; \
		trap ERR; \
		exit ${STATUS}' ERR

	local GCC_STAGE=${1}

	echo -n "Setting up gcc"

	local GCC_LTOENABLE=${GCC_LTOENABLE:-0}
	export PATH=${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin:${PATH}
	local CURRENT_AUTOCONF_VER=$(autoconf -V | head -n1 | awk '{print $NF}')

	# Determine autoconf version to use and set the right autoreconf suffix command
	if $(test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -lt 9)
	then
		AUTOCONF_VER=2.64
	fi

	if $(test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -ge 9)
	then
		AUTOCONF_VER=2.69
	fi

	if [ ${CURRENT_AUTOCONF_VER} = ${AUTOCONF_VER} ]
	then
		unset AUTOCONF_VER
	fi

	echo -n "-${GCC_VER}... "
	
	if ! ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ -v > /dev/null 2>&1 \
		|| (( ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-gcc-${GCC_VER} -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-g++ -v > /dev/null 2>&1 ) \
		&& [ ${BUILD_GCCNATIVE:-0} -eq 1 ] )
	then
		> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log
		if [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} ] || [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
		then
			echo -n "downloading... "
			download_gcc >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
		fi
		echo -n "building "
		if ( ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-gcc-${GCC_VER} -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-g++ -v > /dev/null 2>&1 ) \
			&& [ ${BUILD_GCCNATIVE:-0} -eq 1 ]
		then
			echo -n "native... "
			build_gcc ${BARCH}>> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
		fi
		if ! ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ -v > /dev/null 2>&1
		then
			echo -n "${GCC_STAGE:-cross}... "
			build_gcc ${HARCH} >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
		fi
		echo "done."
		if [[ ! "${GCC_STAGE}" =~ ^stage[12] ]]
		then
			echo "Removing sources."
			rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
			rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		fi
	else
		echo "already there."
	fi

	if [ ! -f ${TOOLCHAIN_PATH}/gcc_la_libraries.tar.xz ]
	then
		echo -n "   Removing .la libraries... "
		local LA_LIBS="$(find ${TOOLCHAIN_PATH} -name "*.la" -printf "%P\n")"
		tar cvJf ${TOOLCHAIN_PATH}/gcc_la_libraries.tar.xz -C ${TOOLCHAIN_PATH} ${LA_LIBS} >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
		(cd ${TOOLCHAIN_PATH}; rm -f ${LA_LIBS})
		echo "Done."
	fi

	if [ -d ${GLOBAL_TOOLCHAIN_PATH}/lib ]
	then
		export LD_LIBRARY_PATH=${GLOBAL_TOOLCHAIN_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
	fi
	if [ -d ${TOOLCHAIN_PATH}/lib ]
	then
		export LD_LIBRARY_PATH=${TOOLCHAIN_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
	fi

	GCCSEARCHLIBS="$( ( for lib in $(${HARCH:+${HARCH}-}gcc -print-search-dirs | grep 'libraries:' | sed 's/^libraries: =//;s/\:/ /g' ); do realpath "${lib}" 2>/dev/null; done ) | grep -v "${BIN_PATH}" | grep -v "${DISTOS_PATH}" | sort | uniq | xargs )" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	LD_GCCLIBS=$( echo ${GCCSEARCHLIBS} | sed 's/ /:/g' ) >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	echo "GCCSEARCHLIBS: ${GCCSEARCHLIBS}" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	echo "LD_GCCLIBS: ${LD_GCCLIBS}" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	trap ERR
}

function setup_targetgcc () {

	function build_targetgcc {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x

		set +x
		trap ERR
	}

	trap 'STATUS=${?}; \
		set +x; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log ]; \
		then \
			echo "Log ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log; \
		fi; \
		trap ERR; \
		exit ${STATUS}' ERR

	echo -n "Setting up target gcc"

	local GCC_LTOENABLE=${GCC_LTOENABLE:-0}
	export PATH=${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin:${PATH}
	local CURRENT_AUTOCONF_VER=$(autoconf -V | head -n1 | awk '{print $NF}')

	# Determine autoconf version to use and set the right autoreconf suffix command
	if $(test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -lt 9)
	then
		AUTOCONF_VER=2.64
	fi

	if $(test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -ge 9)
	then
		AUTOCONF_VER=2.69
	fi

	if [ ${CURRENT_AUTOCONF_VER} = ${AUTOCONF_VER} ]
	then
		unset AUTOCONF_VER
	fi

	echo -n "-${GCC_VER}... "

	if [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} ] || [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
	then
		echo -n "downloading... "
		download_gcc >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	fi
	echo -n "building"
	build_targetgcc ${HARCH} >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}${GCC_STAGE:+-${GCC_STAGE}}.log 2>&1
	echo "done."

	trap ERR
}

function setup_llvm () {
	function download_llvm () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR

		set -x
		local GCCURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VER}/llvm-project-${LLVM_VER}.src.tar.xz
		download_uncompress ${GCCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
		set +x
		trap ERR
	}

	function build_llvm_builtins () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR
		set -x
		local LLVM_TARGET=${1}
		# To be changed with: ${TOOLCHAIN_PATH}
		local LLVM_INSTALL_PATH=$(llvm-config --prefix)

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		if [ -d ${DISTOS_PATH} ]
		then
			if [ $(find ${DISTOS_PATH}/usr/lib ${DISTOS_PATH}/lib -type f -name crti.o -mindepth 1 2>/dev/null | wc -l) -ge 1 ]
			then
				local SYSROOT=${DISTOS_PATH}
				export QEMU_LD_PREFIX="${DISTOS_PATH}"
			fi
		else
			local SYSROOT=${BIN_PATH}
			export QEMU_LD_PREFIX="${BIN_PATH}"
		fi
		cd ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}
		local PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
		### Can we build the RT builtins?
		case x${HMARCH} in
			xarmv*)
					if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
					then
						echo -n "${HMARCH} is not supported, RT Builtins disabled... "
						local COMPILER_RT_BUILD_BUILTINS=OFF
					else
						local COMPILER_RT_BUILD_BUILTINS=ON
					fi
				;;
			*) local COMPILER_RT_BUILD_BUILTINS=ON
				;;
		esac
		cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/compiler-rt -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} -G Ninja \
			\
			-DCMAKE_C_COMPILER=${LLVM_INSTALL_PATH}/bin/clang \
			-DCMAKE_CXX_COMPILER=${LLVM_INSTALL_PATH}/bin/clang++ \
			-DCMAKE_AR=${LLVM_INSTALL_PATH}/bin/llvm-ar \
			-DCMAKE_NM=${LLVM_INSTALL_PATH}/bin/llvm-nm \
			-DCMAKE_RANLIB=${LLVM_INSTALL_PATH}/bin/llvm-ranlib \
			-DCMAKE_C_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_CXX_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_ASM_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="--target=${LLVM_TARGET} -fuse-ld=lld" \
			-DCMAKE_C_COMPILER_TARGET="${LLVM_TARGET}" \
			-DCMAKE_ASM_COMPILER_TARGET="${LLVM_TARGET}" \
			\
			-DCMAKE_INSTALL_PREFIX=${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER} \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_SYSROOT=${SYSROOT} \
			\
			-DLLVM_CONFIG_PATH=${LLVM_INSTALL_PATH}/bin/llvm-config \
			\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
			-DCOMPILER_RT_BUILD_BUILTINS:BOOL=${COMPILER_RT_BUILD_BUILTINS} \
			-DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=ON \
			-DCOMPILER_RT_BUILD_MEMPROF:BOOL=ON \
			-DCOMPILER_RT_BUILD_PROFILE:BOOL=ON \
			-DCOMPILER_RT_BUILD_SANITIZERS:BOOL=ON \
			-DCOMPILER_RT_BUILD_XRAY:BOOL=ON \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
			-DBUILD_SHARED_LIBS:BOOL:BOOL=OFF

		ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} \
			-C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} install/strip

		set +x
		trap ERR
	}

	function build_llvm () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR
		set -x

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}

		local PLATFORM_CFLAGS="-march=native"

		sed -i "s/-flto\"/-flto=auto\"/g" ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/AddLLVM.cmake
		sed -i "s/-flto\"/-flto=auto\"/g" ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/HandleLLVMOptions.cmake

		cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} -G Ninja \
			-W no-dev \
			-DLLVM_PARALLEL_COMPILE_JOBS=${NPROCS} \
			-DLLVM_PARALLEL_LINK_JOBS=1 \
			\
			-DLLVM_CCACHE_BUILD:BOOL=ON \
			-DCMAKE_C_COMPILER=$(which ${BARCH}-gcc) \
			-DCMAKE_CXX_COMPILER=$(which ${BARCH}-g++) \
			-DCMAKE_AR=$(which gcc-ar) \
			-DCMAKE_NM=$(which gcc-nm) \
			-DCMAKE_RANLIB=$(which gcc-ranlib) \
			-DCMAKE_CROSSCOMPILING=True \
			-DLLVM_USE_LINKER=gold \
			-DCMAKE_C_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_CXX_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_ASM_FLAGS="${PLATFORM_CFLAGS}" \
			-DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS}" \
			-DCMAKE_SKIP_RPATH:BOOL=ON \
			\
			-DCMAKE_INSTALL_PREFIX=${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER} \
			-DCMAKE_BUILD_TYPE=Release \
			-DLLVM_TARGETS_TO_BUILD="all" \
			-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lldb;lld;polly" \
			-DLLVM_ENABLE_RUNTIMES="compiler-rt" \
			-DLLVM_BINUTILS_INCDIR=/usr/include \
			-DLLVM_LIBDIR_SUFFIX=64 \
			\
			-DBUILD_SHARED_LIBS:BOOL=OFF \
			-DLLVM_ENABLE_LTO:BOOL=OFF \
			-DLLVM_ENABLE_LIBCXX:BOOL=OFF \
			-DLLVM_ENABLE_ZLIB:BOOL=ON \
			-DLLVM_ENABLE_FFI:BOOL=ON \
			-DLLVM_ENABLE_RTTI:BOOL=ON \
			-DLLVM_ENABLE_EH:BOOL=ON \
			-DLLVM_ENABLE_NEW_PASS_MANAGER:BOOL=ON \
			-DLLVM_ENABLE_BINDINGS:BOOL=OFF \
			-DLLVM_USE_PERF:BOOL=ON \
			-DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=ON \
			-DLLVM_LIT_ARGS=-v \
			-DLLVM_INCLUDE_EXAMPLES:BOOL=ON \
			-DLLVM_INCLUDE_UTILS:BOOL=ON \
			-DLLVM_INCLUDE_TESTS:BOOL=OFF \
			-DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=OFF \
			-DLLVM_BUILD_EXAMPLES:BOOL=OFF \
			-DLLVM_BUILD_TESTS:BOOL=OFF \
			-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
			-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
			-DLLVM_INSTALL_UTILS:BOOL=ON \
			\
			-DCLANG_PLUGIN_SUPPORT:BOOL=ON \
			-DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
			-DENABLE_LINKER_BUILD_ID:BOOL=ON \
			-DCLANG_DEFAULT_RTLIB=libgcc \
			-DCLANG_DEFAULT_UNWINDLIB=libgcc \
			\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON

		ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} \
			-C ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} install/strip

		set +x
		trap ERR
	}


	trap 'STATUS=${?}; \
		set +x; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log ]; \
		then \
			echo "Log ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log; \
		fi; \
		trap ERR; \
		exit ${STATUS}' ERR
	
	echo -n "Setting up clang-${LLVM_VER}... "
	if ( ! clang -v > /dev/null 2>&1 || ! ld.lld -v > /dev/null 2>&1 ) && ( ! ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/clang -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/ld.lld -v > /dev/null 2>&1 )
	then
		> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
		if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
		fi
		echo -n "downloading... "
		download_llvm >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		echo -n "building native... "
		build_llvm >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin ] && [ -d ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/lib64 ]
	then
		echo -n "setting up search paths... "
		export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/lib64}:${LD_LIBRARY_PATH}"
		export PATH="${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin:${PATH}"
	fi
	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*)
			local LLVM_ARCH=${HM}
			;;
	esac
	if [ ! -f ${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/clang_rt.crtbegin-${LLVM_ARCH}.o ]
	then
		if [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			echo -n "downloading... "
			download_llvm >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		fi
		echo -n "building builtins for ${HARCH}... "
		build_llvm_builtins ${HARCH} >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
	then
		rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
	then
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
	fi
	echo "done."

	trap ERR
}

function install_gccheaders () {
	setbuildenv
	set -e
	echo -n "Installing GCC headers... "
	echo "INSTALL_PATH: ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER}" >> ${LOG_PATH}/gccheaders.log
	if [ ! -d ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER} ]
	then
		mkdir -p ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER} >> ${LOG_PATH}/gccheaders.log 2>&1
	fi
	cp -prv ${TOOLCHAIN_PATH}/${HARCH}/include/c++/${GCC_VER}/* ${BIN_PATH}${BUILD_INCLUDEDIR}/c++/${GCC_MAJVER}/ >> ${LOG_PATH}/gccheaders.log 2>&1
	echo -e "done" >> ${LOG_PATH}/gccheaders.log 2>&1
	echo >> ${LOG_PATH}/gccheaders.log 2>&1
	echo "done."
	set +e
}

function install_gcclibs () {
	setbuildenv
	set -e
	echo -n "Installing GCC libraries... "
	echo "INSTALL_PATH: ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}" >> ${LOG_PATH}/gcclibs.log
	if [ ! -d ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER} ]
	then
		mkdir -p ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER} >> ${LOG_PATH}/gcclibs.log 2>&1
	fi
	if [ -d ${TOOLCHAIN_PATH}/${HARCH}/lib64 ]
		then
			local SYSLIB=lib64
		else
			local SYSLIB=lib
	fi
	for file in $( find ${TOOLCHAIN_PATH}/${HARCH}/${SYSLIB} -maxdepth 1 \( -name '*.so*' -a ! -name 'libstdc++.so.*-*.py' -o -name '*.a' \) -printf '%P ')
	do
		echo -n "Copying ${file} into ${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}... " >> ${LOG_PATH}/gcclibs.log 2>&1
		cp -Pf ${TOOLCHAIN_PATH}/${HARCH}/${SYSLIB}/${file} ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		if [[ ${file} =~ ^(libgcc_s.so|libstdc++.so|libgfortran.so|libgomp.so).* ]]
		then
			echo -n "linking into ${BUILD_LIBDIR}${BUILD_LIBSUFFIX}..." >> ${LOG_PATH}/gcclibs.log 2>&1
			ln -sf ../gcc/${HARCH}/${GCC_MAJVER}/${file} ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		fi
		echo -e "done" >> ${LOG_PATH}/gcclibs.log
	done
	for file in $( find ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_VER} -maxdepth 1 \( -name "crt*.o" -o -name "*.a" \) -printf '%P ')
	do
		echo -n "Copying ${file} into ${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}... " >> ${LOG_PATH}/gcclibs.log 2>&1
		cp -Pf ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_VER}/${file} ${BIN_PATH}${BUILD_LIBDIR}/gcc/${HARCH}/${GCC_MAJVER}/${file} >> ${LOG_PATH}/gcclibs.log 2>&1
		echo -e "done" >> ${LOG_PATH}/gcclibs.log
	done
	echo >> ${LOG_PATH}/gcclibs.log 2>&1
	echo "done."
	set +e
}

function setup_rust () {
	check_${TOOLCHAIN}_c

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/rust.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/rust.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/rust.log; \
		fi;
		trap ERR; \
		exit ${STATUS}' ERR

	echo -n "Setting up RUST... "
	export CARGO_HOME=${GLOBAL_TOOLCHAIN_PATH}
	export RUSTUP_HOME=${GLOBAL_TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading... "
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init
		echo -n "installing... "
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
		rm -f /tmp/rustup-init
		echo "done."
	else
		echo "already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries... "
	rustup -v target add ${CARGO_TARGET} >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
	echo "done."
	echo

	trap ERR
}

function setup_python () {
	function download_pyton () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz"
		download_uncompress ${PYTHONURL} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER} &&
		curl -LsR -o ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py https://bootstrap.pypa.io/get-pip.py
		set +x
		trap ERR
	}

	function build_python () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		if [ -d ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		cd ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		case ${TOOLCHAIN} in
			gnu)
				if which ${BARCH}-gcc-ar > /dev/null 2>&1
				then
					local HOST_AR="${BARCH}-gcc-ar"
				else
					local HOST_AR="gcc-ar"
				fi
				if which ${BARCH}-gcc-nm > /dev/null 2>&1
				then
					local HOST_NM="${BARCH}-gcc-nm"
				else
					local HOST_NM="gcc-nm"
				fi
				if which ${BARCH}-gcc-ranlib > /dev/null 2>&1
				then
					local HOST_RANLIB="${BARCH}-gcc-ranlib"
				else
					local HOST_RANLIB="gcc-ranlib"
				fi
				export CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
				export CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
				export CFLAGS="-march=native"
				export CXXFLAG="-march=native"
				export AR="${HOST_AR}"
				export NM="${HOST_NM}"
				export RANLIB="${HOST_RANLIB}"
				export LDFLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS} ${GNU_EXTRALDFLAGS} ${OPTLINK_FLAGS}"
				;;
			llvm)
				export CC="${CCWRAPPER:+${CCWRAPPER} }clang"
				export CFLAGS="-march=native"
				export AR="llvm-ar"
				export NM="llvm-nm"
				export RANLIB="llvm-ranlib"
				export LDFLAGS="-fuse-ld=lld -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS} ${OPTLINK_FLAGS}"
				;;
		esac
		${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared --with-lto \
			--with-system-ffi ax_cv_c_float_words_bigendian=no
		#--with-address-sanitizer --with-undefined-behavior-sanitizer
		make
		make install
		${BUILD_PYTHON} ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py
		#pip${PYTHONBIN_VER} install meson ninja
		cd ${START_PWD}
		rm -rf ${TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		set +x
		trap ERR
	}

	function build_python_crossenv () {
		trap 'STATUS=${?}; \
			set +x; \
			[ -d ${TOOLCHAIN_PATH}/venv-${HARCH} ] && rm -rf || true; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		create_environment_source
		source environment.source
		${BUILD_PYTHONPIP} install crossenv
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH}
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate
		build-python -m pip install --upgrade cython setuptools wheel
		cross-pip -v install --upgrade cython
		set +x
		trap ERR
	}

	check_${TOOLCHAIN}_c

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up Python"
	if [ -d ${DISTOS_PATH} ]
	then
		local PYTHON_SEARCHPATH=${DISTOS_PATH}
	else
		local PYTHON_SEARCHPATH=${BIN_PATH}
	fi
	if [ -z ${1} ]
	then
		local PYTHON_VER=$(find ${PYTHON_SEARCHPATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHON_VER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting... "
			echo
			return 1
		else
			echo -n "-${PYTHON_VER} (guessed)... "
		fi
	else
		local PYTHON_VER=${1}
		echo -n "-${PYTHON_VER}... "
	fi
	PYTHONBIN_VER=$( echo ${PYTHON_VER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${TOOLCHAIN_PATH}/bin/python${PYTHONBIN_VER}
	BUILD_PYTHONPIP=${TOOLCHAIN_PATH}/bin/pip${PYTHONBIN_VER}
	HOST_PYTHON=${PYTHON_SEARCHPATH}/usr/bin/python${PYTHONBIN_VER}
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
	export PATH=${TOOLCHAIN_PATH}/bin:${PATH}
	export LD_LIBRARY_PATH=${TOOLCHAIN_PATH}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading... "
		download_pyton > ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log 2>&1
		echo -n "building... "
		build_python >> ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log 2>&1
		echo "done."
		rm -rf ${TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}
	else
		echo "already there."
	fi
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi
		if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ]
		then
			eval ${SUDO_CMD} mv ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/_sysconfigdata.py
		fi
		if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m ]
		then
			eval ${SUDO_CMD} ln -s config-${PYTHONBIN_VER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m
		fi
	fi
	trap ERR
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_python-crossenv.log ];
		then \
			echo "Log ${LOG_PATH}/toolchain_python-crossenv.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_python-crossenv.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	if [ ${SKIP_PYTHONVENV:-0} -eq 0 ]
	then
		echo -n "Creating virtual cross environment... "
		if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
		then
			build_python_crossenv >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
			echo "done."
			echo
		else
			echo "already there."
			echo
			source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
		fi
	fi
	trap ERR
}

function setup_pkgconfig () {
	if [ ! -d ${TOOLCHAIN_PATH}/bin ]
	then
		mkdir ${TOOLCHAIN_PATH}/bin
	fi
	setbuildenv
	cat > ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config <<-EOF
		#!/bin/sh
		set -o pipefail
		echo "PKG_CONFIG_LIBDIR=\${PKG_CONFIG_LIBDIR} \\\\" >> pkg-config.log
		echo "PKG_CONFIG_SYSROOT_DIR=\${PKG_CONFIG_SYSROOT_DIR} \\\\" >> pkg-config.log
		echo $(which pkg-config) \$@ >> pkg-config.log
		$(which pkg-config) \$@ | tee -a pkg-config.log
		STATUS=\$?
		echo >> pkg-config.log
		set +o pipefail
		exit \${STATUS}
	EOF
	chmod +x ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config
}

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi
GLOBAL_TOOLCHAIN_SRCPATH=${GLOBAL_SRC_PATH}
GLOBAL_TOOLCHAIN_BLDPATH=${GLOBAL_BLD_PATH}
if [ ! -d ${GLOBAL_TOOLCHAIN_PATH} ]
then
	mkdir -p ${GLOBAL_TOOLCHAIN_PATH}
fi

BINUTILS_VER=${BINUTILS_VER:-2.37}
GCC_VER=${GCC_VER:-11.2.0}
GMP_VER=${GMP_VER:-6.2.1}
MPFR_VER=${MPFR_VER:-4.1.0}
MPC_VER=${MPC_VER:-1.2.1}
ISL_VER=${ISL_VER:-0.24}

LLVM_VER=${LLVM_VER:-13.0.0}

# Check the toolchains
gcc -v > /dev/null 2>&1
if [ ! ${?} -eq 0 ]
then
	echo "The toolchain for host compile does not exist."
	exit 1
fi
BARCH=$(gcc -dumpmachine)

setup_pkgconfig