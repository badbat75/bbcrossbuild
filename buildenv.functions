#!/bin/bash

check_core_functions
check_build_functions

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi

function create_sysroot () {
	function libraries_relink () {
		while (( "$#" )); do
			case ${1} in
			-s|--sysroot)
				shift
				test -z "${1:-}" && echo "--sysroot specified without DISTOS_PATH path." && exit 1
						DISTOS_PATH="${1}"
				;;
			-a|--arch)
				shift
				test -z "${1:-}" && echo "--arch specified without architecture." && exit 1
				HARCH="${1}"
				;; 
			-h|--help)
				cat <<-EOF
					$0 -s <sysroot> [parameters]

					-a --arch:      Optional. Specify architecture tuple. Default: arm-linux-gnueabihf.
					-s --sysroot:   Mandatory. Specify DISTOS_PATH path.
					-h --help:      This message.
				EOF
				exit 0
				;;             
			esac
			shift
		done

		test -z "${DISTOS_PATH:-}" && echo "DISTOS_PATH not set" && exit 1
		test -z "${HARCH:-}" && HARCH="arm-linux-gnueabihf"

		echo "DISTOS_PATH: ${DISTOS_PATH}"
		echo

		for i in $(find -L ${DISTOS_PATH}/usr/lib/${HARCH} -lname "/lib/${HARCH}*");
		do
			echo -n "Relinking $i... "
			ln -f -s ../../..$(readlink $i) $i
			echo "done."
		done
	}
	echo -n "Creating sysroot with ${1}..."
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
			local STATUS=${?}
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
			local STATUS=${?}
		fi
		if [ ${STATUS} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		libraries_relink >> ${LOG_PATH}/sysroot.log 2>&1
		local STATUS=${?}
		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			sed -i "s|/usr/lib/${HARCH:+${HARCH}/}libicu|${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu|g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		if [ ${STATUS} -eq 0 ]
		then
			echo "done."
			echo
			return 0
		else
			echo "fail."
			echo
			return 1
		fi
	else
		echo "already present."
		echo
		return 1
	fi
}

function setup_gcc () {
	function download_gcc () {
		set -x
		local GMPURL=https://gmplib.org/download/gmp/gmp-${GMPVER}.tar.xz
		local MPFRURL=https://www.mpfr.org/mpfr-current/mpfr-${MPFRVER}.tar.xz
		local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPCVER}.tar.gz
		local ISLURL=https://gcc.gnu.org/pub/gcc/infrastructure/isl-${ISLVER}.tar.bz2
		local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILSVER}.tar.xz
		local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCCVER}/gcc-${GCCVER}.tar.xz
		
		download_uncompress ${BINUTILSURL} ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILSVER} &&
		download_uncompress ${GCCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCCVER} &&
		NODELETEDESTDIR=1 download_uncompress ${GMPURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCCVER}/gmp &&
		NODELETEDESTDIR=1 download_uncompress ${MPFRURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCCVER}/mpfr &&
		NODELETEDESTDIR=1 download_uncompress ${MPCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCCVER}/mpc &&
		NODELETEDESTDIR=1 download_uncompress ${ISLURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCCVER}/isl
		local STATUS=${?}
		set +x
		return ${STATUS}
	}

	function build_gcc () {
		set -x
		local GCCCOMMONCONFIG="--enable-languages=c,c++,lto --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
		--with-default-libstdcxx-abi=new \
		--disable-option-checking --disable-libitm --disable-libmpx"
		local GCCBUILDCONFIG="--disable-multilib --disable-bootstrap"
		local GCCHOSTCONFIG="--with-arch-directory=${HM} --with-arch=${HMARCH}"
		local BINUTILSCOMMONCONFIG="--enable-gold"
		local BINUTILSBUILDCONFIG="--enable-64-bit-bfd"
		OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
		[ ${LTOENABLE:-0} -eq 1 ] && OPTCOMP_FLAGS+=" ${COMMON_LTOFLAGS}"
		local STD_CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
		local STD_CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
		local STD_CFLAGS="${COMMON_CFLAGS} ${OPTCOMP_FLAGS} -march=native"
		local STD_CXXFLAGS="${STD_CFLAGS}"
		local STD_LDFLAGS="${COMMON_LDFLAGS} ${OPTLINK_FLAGS}"
		local STD_AR=${BARCH:+${BARCH}-}gcc-ar
		local STD_AS=${BARCH:+${BARCH}-}as
		local STD_NM=${BARCH:+${BARCH}-}gcc-nm
		local STD_RANLIB=${BARCH:+${BARCH}-}gcc-ranlib
		local STD_STRIP=${BARCH:+${BARCH}-}strip
		local STD_OBJDUMP=${BARCH:+${BARCH}-}objdump
		NATIVE=${NATIVE:-0}
		if [ ${NATIVE} -eq 1 ]
		then
			(
				### Build Native binutils
				if [ -d ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILSVER} ]
				then
					rm -rf ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILSVER}
				fi
			) &&
			mkdir -p ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILSVER}
			cd ${TOOLCHAIN_BLDPATH}/binutils-${BINUTILSVER} &&
			CC="${STD_CC}" \
			CXX="${STD_CXX}" \
			CFLAGS="${STD_CFLAGS}" \
			CXXFLAGS="${STD_CXXFLAGS}" \
			LDFLAGS="${STD_LDFLAGS}" \
			AR="${STD_AR}" \
			AS="${STD_AS}" \
			NM="${STD_NM}" \
			RANLIB="${STD_RANLIB}" \
			STRIP="${STD_STRIP}" \
			OBJDUMP="${STD_OBJDUMP}" \
			${TOOLCHAIN_SRCPATH}/binutils-${BINUTILSVER}/configure -v \
				--build=${BARCH} --host=${BARCH} --target=${BARCH} \
				--prefix=${TOOLCHAIN_PATH} --mandir=${TOOLCHAIN_PATH}/share/man --infodir=${TOOLCHAIN_PATH}/share/info \
				${BINUTILSCOMMONCONFIG} ${BINUTILSBUILDCONFIG} &&
			make V=${MAKEVERBOSE:-0} &&
			make V=${MAKEVERBOSE:-0} install-strip &&
			which ld &&
			(
				### Build Native GCC
				if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCCVER} ]
				then
					rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCCVER}
				fi
				mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCCVER}
			) &&
			cd ${TOOLCHAIN_BLDPATH}/gcc-${GCCVER} &&
			CC_FOR_BUILD="${STD_CC}" \
			CXX_FOR_BUILD="${STD_CXX}" \
			CFLAGS_FOR_BUILD="${STD_CFLAGS}" \
			CXXFLAGS_FOR_BUILD="${STD_CXXFLAGS}" \
			LDFLAGS_FOR_BUILD="${STD_LDFLAGS}" \
			AR_FOR_BUILD="${STD_AR}" \
			AS_FOR_BUILD="${STD_AS}" \
			NM_FOR_BUILD="${STD_NM}" \
			RANLIB_FOR_BUILD="${STD_RANLIB}" \
			STRIP_FOR_BUILD="${STD_STRIP}" \
			OBJDUMP_FOR_BUILD="${STD_OBJDUMP}" \
			CC="${STD_CC}" \
			CXX="${STD_CXX}" \
			CFLAGS="${STD_CFLAGS}" \
			CXXFLAGS="${STD_CXXFLAGS}" \
			LDFLAGS="${STD_LDFLAGS}" \
			AR="${STD_AR}" \
			AS="${STD_AS}" \
			NM="${STD_NM}" \
			RANLIB="${STD_RANLIB}" \
			STRIP="${STD_STRIP}" \
			OBJDUMP="${STD_OBJDUMP}" \
			CC_FOR_TARGET="${STD_CC}" \
			CXX_FOR_TARGET="${STD_CXX}" \
			CFLAGS_FOR_TARGET="${STD_CFLAGS}" \
			CXXFLAGS_FOR_TARGET="${STD_CXXFLAGS}" \
			LDFLAGS_FOR_TARGET="${STD_LDFLAGS}" \
			AR_FOR_TARGET="${STD_AR}" \
			AS_FOR_TARGET="${STD_AS}" \
			NM_FOR_TARGET="${STD_NM}" \
			STRIP_FOR_TARGET="${STD_STRIP}" \
			OBJDUMP_FOR_TARGET="${STD_OBJDUMP}" \
			${TOOLCHAIN_SRCPATH}/gcc-${GCCVER}/configure -v \
				--build=${BARCH} --host=${BARCH} --target=${BARCH} \
				--prefix=${TOOLCHAIN_PATH} --mandir=${TOOLCHAIN_PATH}/share/man --infodir=${TOOLCHAIN_PATH}/share/info \
				${GCCCOMMONCONFIG} ${GCCBUILDCONFIG} &&
			make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0} \
				AR_FOR_TARGET="${STD_AR}" \
				NM_FOR_TARGET="${STD_NM}" \
				RANLIB_FOR_TARGET="${STD_RANLIB}" &&
			make V=${MAKEVERBOSE:-0} install-strip
			local STATUS=${?}
		else
			echo "To be built"
		fi
		set +x
		return ${STATUS}
	}

	echo -n "Setting up gcc"
	local BINUTILSVER=2.32
	local GCCVER=8.3.0
	local GMPVER=6.1.2
	local MPFRVER=4.0.2
	local MPCVER=1.1.0
	local ISLVER=0.18
	echo -n "-${GCCVER}..."
	
	if ! ${TOOLCHAIN_PATH}/bin/${HARCH:+${HARCH}-}gcc > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH:+${HARCH}-}g++ -v > /dev/null 2>&1
	then
		echo -n "downloading..."
		download_gcc > ${LOG_PATH}/toolchain_gcc${GCCVER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo -n "building..."
		NATIVE=1 build_gcc >> ${LOG_PATH}/toolchain_gcc${GCCVER}.log 2>&1 &&
		build_gcc >> ${LOG_PATH}/toolchain_gcc${GCCVER}.log 2>&1 &&
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
}

function setup_rust () {
	echo -n "Setting up RUST..."
	export CARGO_HOME=${TOOLCHAIN_PATH}
	export RUSTUP_HOME=${TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading..."
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init &&
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			return 1
		fi
		echo -n "installing..."
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${LOG_PATH}/toolchain_rust.log 2>&1 &&
		rm -f /tmp/rustup-init
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries..."
	rustup -v target add ${CARGO_TARGET} >> ${LOG_PATH}/toolchain_rust.log 2>&1
	if [ ${?} -ne 0 ]
	then
		echo "fail."
		echo
		return 1
	fi
	echo "done."
	echo
}

function setup_python () {
	function download_pyton () {
		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHONVER}/Python-${PYTHONVER}.tar.xz"
		download_uncompress ${PYTHONURL} ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER} &&
		NODELETEDESTDIR=1 download_uncompress https://bootstrap.pypa.io/get-pip.py ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}
		local STATUS=${?}
		set +x
		return ${STATUS}
	}

	function build_python () {
		set -x
		if [ -d ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		cd ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }gcc" \
		CFLAGS="-pipe -march=native -flto=jobserver -fno-fat-lto-objects -fuse-linker-plugin" \
		LDFLAGS="-fuse-ld=gold" \
		${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared &&
		make &&
		make install &&
		${BUILD_PYTHON} ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/get-pip.py &&
		${BUILD_PYTHONPIP} install crossenv
		local STATUS=${?}
		set +x
		return ${STATUS}
	}
	function build_python_crossenv () {
		set -x
		settoolflags
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }gcc" \
		CFLAGS="-pipe -march=native -O3 -flto=jobserver -fno-fat-lto-objects -fuse-linker-plugin" \
		LDFLAGS="-fuse-ld=gold" \
		${BUILD_PYTHONPIP} install --upgrade -t ${TOOLCHAIN_PATH}/venv-${HARCH}/cross/lib/python${PYTHONBINVER}/site-packages --no-binary :all: cython m2crypto future pycryptodome &&
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate &&
		STATUS=${?}
		set +x
		return ${STATUS}
	}

	echo -n "Setting up Pyton"
	if [ -z ${1} ]
	then
		local PYTHONVER=$(find ${DISTOS_PATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHONVER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting..."
			echo
			return 1
		else
			echo -n "-${PYTHONVER} (guessed)..."
		fi
	else
		local PYTHONVER=${1}
		echo -n "-${PYTHONVER}..."
	fi
	export PYTHONBINVER=$( echo ${PYTHONVER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${TOOLCHAIN_PATH}/bin/python${PYTHONBINVER}
	BUILD_PYTHONPIP=${TOOLCHAIN_PATH}/bin/pip${PYTHONBINVER}
	HOST_PYTHON=${DISTOS_PATH}/usr/bin/python${PYTHONBINVER}
	if [ ! -x ${HOST_PYTHON} ]
	then
		echo "no host python present (${HOST_PYTHON}). Exiting..."
		echo
		return 1
	fi
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading..."
		download_pyton > ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo -n "building..."
		build_python >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "fail."
			echo
			return 1
		fi
		echo "done."
	else
		echo "already there."
	fi
	if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ]
	then
		mv ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/_sysconfigdata.py
	fi
	if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m ]
	then
		ln -s config-${PYTHONBINVER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m
	fi
	echo -n "Creating virtual cross environment..."
	if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
	then
		build_python_crossenv >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		echo "done."
		echo
		return ${?}
	else
		echo "already there."
		echo
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		return ${?}
	fi
}
