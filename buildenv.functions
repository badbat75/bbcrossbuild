#!/bin/bash

check_core_functions

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi

function setup_rust () {
	echo -n "Setting up RUST..."
	export CARGO_HOME=${TOOLCHAIN_PATH}
	export RUSTUP_HOME=${TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "Downloading..."
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init &&
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo -n "Installing..."
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${LOG_PATH}/toolchain_rust.log 2>&1 &&
		rm -f /tmp/rustup-init
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo "Done."
	else
		echo "Already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries..."
	rustup -v target add ${CARGO_TARGET} >> ${LOG_PATH}/toolchain_rust.log 2>&1
	if [ ${?} -ne 0 ]
	then
		echo "Fail."
		echo
		return 1
	fi
	echo "Done."
	echo
}

function setup_python () {
	function build_python () {
		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHONVER}/Python-${PYTHONVER}.tar.xz"
		if [ -d ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER} ]
		then
			rm -rf ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}
		fi
		mkdir -p ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}
		curl -Ls ${PYTHONURL} | tar xJf - --strip-components=1 -C${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER} &&
		curl -Ls https://bootstrap.pypa.io/get-pip.py -o ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/get-pip.py
		if [ -d ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		cd ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }gcc" \
		CFLAGS="-fuse-ld=gold -march=native" \
		${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared &&
		make &&
		make install &&
		${BUILD_PYTHON} ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/get-pip.py &&
		${BUILD_PYTHONPIP} install crossenv
		local STATUS=${?}
		set +x
		return ${STATUS}
	}
	function build_python_crossenv () {
		set -x
		settoolflags
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH} &&
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate &&
		CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc" \
		CFLAGS="${SYSROOT_CFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS}" \
		LDFLAGS="${SYSROOT_CFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} -lpython${PYTHONBINVER}m" \
		pip install cython
		STATUS=${?}
		set +x
		return ${STATUS}
	}

	echo -n "Setting up Pyton"
	if [ -z ${1} ]
	then
		local PYTHONVER=$(find ${DISTOS_PATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHONVER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting..."
			echo
			return 1
		else
			echo -n "-${PYTHONVER} (guessed)..."
		fi
	else
		local PYTHONVER=${1}
		echo -n "-${PYTHONVER}..."
	fi
	PYTHONBINVER=$( echo ${PYTHONVER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${TOOLCHAIN_PATH}/bin/python${PYTHONBINVER}
	BUILD_PYTHONPIP=${TOOLCHAIN_PATH}/bin/pip${PYTHONBINVER}
	HOST_PYTHON=${DISTOS_PATH}/usr/bin/python${PYTHONBINVER}
	if [ ! -x ${HOST_PYTHON} ]
	then
		echo "No host python present (${HOST_PYTHON})"
		echo
		return 1
	fi
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "Building..."
		build_python > ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo "Done."
	else
		echo "Already there."
	fi
	if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ]
	then
		mv ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/_sysconfigdata.py
	fi
	if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m ]
	then
		ln -s config-${PYTHONBINVER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-${PYTHONBINVER}m
	fi
	echo -n "Adding ${CARGO_TARGET} libraries..."
	if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
	then
		build_python_crossenv >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		echo "Done."
		echo
		return ${?}
	else
		echo "Already there."
		echo
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		return ${?}
	fi
}
