#!/bin/bash

check_core_functions
check_build_functions

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi
GLOBAL_TOOLCHAIN_SRCPATH=${GLOBAL_SRC_PATH}
GLOBAL_TOOLCHAIN_BLDPATH=${GLOBAL_BLD_PATH}
if [ ! -d ${GLOBAL_TOOLCHAIN_PATH} ]
then
	mkdir -p ${GLOBAL_TOOLCHAIN_PATH}
fi

function create_sysroot () {
	function libraries_relink () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		echo "DISTOS_PATH: ${DISTOS_PATH}"
		echo

		for i in $(find -L ${DISTOS_PATH}/usr/lib/${HARCH} -lname "/lib/${HARCH}*");
		do
			echo -n "Relinking $i... "
			ln -f -s ../../..$(readlink $i) $i
			echo "done."
		done
		trap ERR
	}

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Creating sysroot with $(basename ${1})..."
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
		fi
		libraries_relink >> ${LOG_PATH}/sysroot.log 2>&1
		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			sed -i "s|/usr/lib/${HARCH:+${HARCH}/}libicu|${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu|g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		echo "done."
		echo
	else
		echo "already present. Run rm -rf ${DISTOS_PATH} if you want to update it."
		echo
	fi
	trap ERR
}

function check_target_gcc () {
	${HARCH}-gcc-${GCC_VER} -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The toolchain for cross-compile does not exist."
		echo "To build one, add build_gcc command to your project before start building anything else."
		echo
		exit 1
	fi
}

function setup_gcc () {

	function download_gcc () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS};' ERR

		set -x
		local GMPURL=https://gmplib.org/download/gmp/gmp-${GMP_VER}.tar.xz
		local MPFRURL=https://www.mpfr.org/mpfr-current/mpfr-${MPFR_VER}.tar.xz
		local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz
		local ISLURL=https://gcc.gnu.org/pub/gcc/infrastructure/isl-${ISL_VER}.tar.bz2
		local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz
		local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.xz

		download_uncompress ${BINUTILSURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
		download_uncompress ${GCCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		download_uncompress ${GMPURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gmp
		download_uncompress ${MPFRURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpfr
		download_uncompress ${MPCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpc
		download_uncompress ${ISLURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/isl
		cd ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		find ../binutils-${BINUTILS_VER} -maxdepth 1 -type d -exec ln -fs {} . \;
		autoreconf${AUTOCONF_VER} -fiv
		set +x
		trap ERR
	}

	function build_gcc () {

		function gcc_binutils_build_patch () {
			trap 'STATUS=${?}; \
				set +x; \
				trap ERR; \
				return ${STATUS}' ERR
	
			set -x
			mkdir -p gcc/../lib/gcc/${BUILD_ARCH}/${GCC_VER}/../../../../${BUILD_ARCH}/bin
			ln -fs ../../gcc/liblto_plugin.so ${BUILD_ARCH}/bin/				
			ln -fs ../../binutils/nm-new ${BUILD_ARCH}/bin/${BUILD_ARCH}-nm
			ln -fs ../../binutils/nm-new ${BUILD_ARCH}/bin/nm
			ln -fs ../../binutils/ar ${BUILD_ARCH}/bin/${BUILD_ARCH}-ar
			ln -fs ../../binutils/ar ${BUILD_ARCH}/bin/ar
			ln -fs ../../binutils/ranlib ${BUILD_ARCH}/bin/${BUILD_ARCH}-ranlib
			ln -fs ../../binutils/ranlib ${BUILD_ARCH}/bin/ranlib
			sed -i 's|^AR_FOR_TARGET=.*|AR_FOR_TARGET=$$r/$(HOST_SUBDIR)/gcc/gcc-ar|' Makefile
			sed -i 's|^NM_FOR_TARGET=.*|NM_FOR_TARGET=$$r/$(HOST_SUBDIR)/gcc/gcc-nm|' Makefile
			sed -i 's|^RANLIB_FOR_TARGET=.*|RANLIB_FOR_TARGET=$$r/$(HOST_SUBDIR)/gcc/gcc-ranlib|' Makefile
			sed -i 's|^COMPILER_NM_FOR_TARGET=.*|COMPILER_NM_FOR_TARGET=$$r/$(HOST_SUBDIR)/gcc/gcc-nm|' Makefile
			set +x
			trap ERR
		}

		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local BUILD_ARCH=${1:-${HARCH}}
		local GCC_LANGUAGES=${GCC_LANGUAGES:-c,c++,lto}
		local GCC_COMMON_CONFIG="--enable-languages=${GCC_LANGUAGES} --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
		--with-default-libstdcxx-abi=new --with-system-zlib \
		--disable-option-checking --disable-libitm --disable-libmpx"
		local GCC_BUILD_CONFIG="--disable-multilib --disable-bootstrap"
		local GCC_HOST_CONFIG="--with-arch-directory=${HM}${HMARCH:+ --with-arch=${HMARCH}}${HMFPU:+ --with-fpu=${HMFPU}}${HMFLOATABI:+ --with-float=${HMFLOATABI}}"
		local BINUTILS_COMMON_CONFIG="--enable-gold"
		local BINUTILS_BUILD_CONFIG=""
		local BINUTILS_HOST_CONFIG=""
		local GCC_OPTCOMP_FLAGS="${GCC_OPTCOMP_FLAGS}${GCC_OPTLEVEL:+ -O${GCC_OPTLEVEL}}"
		local HOST_CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
		local HOST_CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
		local HOST_AR="${BARCH}-gcc-ar"
		local HOST_NM="${BARCH}-gcc-nm"
		local HOST_RANLIB="${BARCH}-gcc-ranlib"
		local HOST_CFLAGS="${COMMON_CFLAGS} ${GCC_OPTCOMP_FLAGS} -march=native"
		local HOST_CXXFLAGS="${HOST_CFLAGS}"
		local HOST_LDFLAGS="${COMMON_LDFLAGS} ${GCC_OPTLINK_FLAGS} -lgcc_s"
		if [ "${BUILD_ARCH}" == "${BARCH}" ]
		then
			# If BUILD_ARCH then install in GLOBAL_TOOLCHAIN_PATH
			local GCC_BUILD_PATH=${GLOBAL_TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
			local GCC_INSTALL_PATH=${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}
			local GCC_CONFIG="${GCC_BUILD_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_BUILD_CONFIG}"
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${BARCH}"
			local TARGET_CFLAGS="${HOST_CFLAGS}"
			local TARGET_CXXFLAGS="${HOST_CXXFLAGS}"
			local TARGET_LDFLAGS="${HOST_LDFLAGS}"
		else
			# if TARGET_ARCH then install in TOOLCHAIN_PATH
			local GCC_BUILD_PATH=${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}
			local GCC_INSTALL_PATH=${TOOLCHAIN_PATH}
			local GCC_CONFIG="${GCC_HOST_CONFIG}"
			local BINUTILS_CONFIG="${BINUTILS_HOST_CONFIG}"
			local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${HARCH} --with-sysroot=${DISTOS_PATH}"
			local TARGET_CFLAGS="${COMMON_CFLAGS} ${GCC_OPTCOMP_FLAGS}${HMARCH:+ -march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}"
			local TARGET_CXXFLAGS="${TARGET_CFLAGS}"
			local TARGET_LDFLAGS="${COMMON_LDFLAGS} ${GCC_OPTLINK_FLAGS}"
		fi
		local BINUTILS_LTO_WRAPPERS_PATH=${GCC_BUILD_PATH}/gcc-${GCC_VER}/binutils_lto_wrappers
		if [ ${GCC_LTOENABLE} -eq 1 ]
		then
			local GCC_OPTCOMP_FLAGS="${GCC_OPTCOMP_FLAGS} ${COMMON_LTOFLAGS}"
			local TARGET_AR="${BINUTILS_LTO_WRAPPERS_PATH}/gcc-ar-new"
			local TARGET_NM="${BINUTILS_LTO_WRAPPERS_PATH}/gcc-nm-new"
			local TARGET_RANLIB="${BINUTILS_LTO_WRAPPERS_PATH}/gcc-ranlib-new"
			local TARGET_CONFIG_ARGS="AR_FOR_TARGET='${TARGET_AR}' NM_FOR_TARGET='${TARGET_NM}' RANLIB_FOR_TARGET='${TARGET_RANLIB}'"
		fi
		local BUILD_ENV_SHELL="CC_FOR_BUILD='${HOST_CC}' CXX_FOR_BUILD='${HOST_CXX}' AR_FOR_BUILD='${HOST_AR}' NM_FOR_BUILD='${HOST_NM}' RANLIB_FOR_BUILD='${HOST_RANLIB}' \
			CFLAGS_FOR_BUILD='${HOST_CFLAGS}' CXXFLAGS_FOR_BUILD='${HOST_CXXFLAGS}' LDFLAGS_FOR_BUILD='${HOST_LDFLAGS}' \
			CC='${HOST_CC}' CXX='${HOST_CXX}' AR='${HOST_AR}' NM='${HOST_NM}' RANLIB='${HOST_RANLIB}' \
			CFLAGS='${HOST_CFLAGS}' CXXFLAGS='${HOST_CXXFLAGS}' LDFLAGS='${HOST_LDFLAGS}' \
			CFLAGS_FOR_TARGET='${TARGET_CFLAGS}' CXXFLAGS_FOR_TARGET='${TARGET_CXXFLAGS}' LDFLAGS_FOR_TARGET='${TARGET_LDFLAGS}'"

		### Build GCC
		if [ -d ${GCC_BUILD_PATH} ]
		then
			rm -rf ${GCC_BUILD_PATH}
		fi
		mkdir -p ${GCC_BUILD_PATH}
		cd ${GCC_BUILD_PATH}
		(eval "trap 'exit ${?}' ERR; ${BUILD_ENV_SHELL} ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure -v \
			--prefix=${GCC_INSTALL_PATH} --mandir=${GCC_INSTALL_PATH}/share/man --infodir=${GCC_INSTALL_PATH}/share/info \
			${CONFIG_ARCH_PARAMS} ${BINUTILS_COMMON_CONFIG} ${BINUTILS_CONFIG} ${GCC_COMMON_CONFIG} ${GCC_CONFIG} ${TARGET_CONFIG_ARGS}")
		gcc_binutils_build_patch ${BARCH}
		make STAGE_CC_WRAPPER="${CCWRAPPER}" V=${MAKEVERBOSE:-0}
		make V=${MAKEVERBOSE:-0} install-strip
		cd ${START_PWD} &&
		rm -rf ${GCC_BUILD_PATH}
		set +x
		trap ERR;
	}

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log; \
		fi;
		trap ERR; \
		exit ${STATUS}' ERR

	echo -n "Setting up gcc"

	local BINUTILS_VER=${BINUTILS_VER:-2.32}
	local GCC_VER=${GCC_VER:-8.3.0}
	local GMP_VER=${GMP_VER:-6.1.2}
	local MPFR_VER=${MPFR_VER:-4.0.2}
	local MPC_VER=${MPC_VER:-1.1.0}
	local ISL_VER=${ISL_VER:-0.18}
	local GCC_LTOENABLE=${GCC_LTOENABLE:-0}
	export PATH=${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin:${PATH}
	local CURRENT_AUTOCONF_VER=$(autoconf -V | head -n1 | awk '{print $NF}')

	# Determine autoconf version to use and set the right autoreconf suffix command
	if $(test_version ${GCC_VER} -lt 9.0.0)
	then
		AUTOCONF_VER=2.64
	fi

	if $(test_version ${GCC_VER} -ge 9.0.0)
	then
		AUTOCONF_VER=2.69
	fi

	if [ ${CURRENT_AUTOCONF_VER} = ${AUTOCONF_VER} ]
	then
		unset AUTOCONF_VER
	fi

	echo -n "-${GCC_VER}..."
	
	if ! ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ -v > /dev/null 2>&1 || \
		! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-gcc -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-g++ -v > /dev/null 2>&1
	then
		echo -n "downloading..."
		download_gcc > ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log 2>&1
		echo -n "building "
		if ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-gcc -v > /dev/null 2>&1 || ! ${GLOBAL_TOOLCHAIN_PATH}/gcc-${GCC_VER}/bin/${BARCH}-g++ -v > /dev/null 2>&1
		then
			echo -n "native..."
			build_gcc ${BARCH}>> ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log 2>&1
		fi
		if ! ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -v > /dev/null 2>&1 || ! ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ -v > /dev/null 2>&1
		then
			echo -n "cross..."
			build_gcc ${HARCH} >> ${GLOBAL_LOG_PATH}/gcc-${GCC_VER}.log 2>&1
		fi
		echo "done."
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
	else
		echo "already there."
	fi
	trap ERR
}

function setup_rust () {
	check_target_gcc

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/rust.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/rust.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/rust.log; \
		fi;
		trap ERR; \
		exit ${STATUS}' ERR

	echo -n "Setting up RUST..."
	export CARGO_HOME=${GLOBAL_TOOLCHAIN_PATH}
	export RUSTUP_HOME=${GLOBAL_TOOLCHAIN_PATH}/var/rustup
	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading..."
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init
		echo -n "installing..."
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
		rm -f /tmp/rustup-init
		echo "done."
	else
		echo "already there."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries..."
	rustup -v target add ${CARGO_TARGET} >> ${GLOBAL_LOG_PATH}/rust.log 2>&1
	echo "done."
	echo

	trap ERR
}

function setup_python () {
	function download_pyton () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz"
		download_uncompress ${PYTHONURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER} &&
		curl -LsR -o ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py https://bootstrap.pypa.io/get-pip.py
		set +x
		trap ERR
	}

	function build_python () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		#local LTO_PLUGIN_PATH="$(${BARCH}-gcc --print-prog-name=liblto_plugin.so)"
		cd ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc" \
		CFLAGS="${OPTCOMP_FLAGS} ${COMMON_LTOFLAGS} -march=native" \
		AR="${BARCH}-gcc-ar" \
		NM="${BARCH}-gcc-nm" \
		RANLIB="${BARCH}-gcc-ranlib" \
		LDFLAGS="${OPTLINK_FLAGS}" \
		${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/configure --prefix=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER} --enable-shared
		make
		make install
		${BUILD_PYTHON} ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py
		${BUILD_PYTHONPIP} install crossenv
		cd ${START_PWD}
		rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		set +x
		trap ERR
	}

	function build_python_crossenv () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		settoolflags
		#local LTO_PLUGIN_PATH="$(${BARCH}-gcc --print-prog-name=liblto_plugin.so)"
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH}
		CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc" \
		CFLAGS="${OPTCOMP_FLAGS} ${COMMON_LTOFLAGS} -march=native" \
		AR="${BARCH}-gcc-ar" \
		NM="${BARCH}-gcc-nm" \
		RANLIB="${BARCH}-gcc-ranlib" \
		LDFLAGS="${OPTLINK_FLAGS}" \
		${BUILD_PYTHONPIP} install --upgrade -t ${TOOLCHAIN_PATH}/venv-${HARCH}/cross/lib/python${PYTHONBIN_VER}/site-packages --no-binary :all: cython m2crypto future pycryptodome
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate
		set +x
		trap ERR
	}

	check_target_gcc

	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up Python"
	if [ -z ${1} ]
	then
		local PYTHON_VER=$(find ${DISTOS_PATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHON_VER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting..."
			echo
			return 1
		else
			echo -n "-${PYTHON_VER} (guessed)..."
		fi
	else
		local PYTHON_VER=${1}
		echo -n "-${PYTHON_VER}..."
	fi
	PYTHONBIN_VER=$( echo ${PYTHON_VER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin/python${PYTHONBIN_VER}
	BUILD_PYTHONPIP=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin/pip${PYTHONBIN_VER}
	HOST_PYTHON=${DISTOS_PATH}/usr/bin/python${PYTHONBIN_VER}
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
	export PATH=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin:${PATH}
	export LD_LIBRARY_PATH=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
	if [ ! -x ${HOST_PYTHON} ]
	then
		echo "no host python present (${HOST_PYTHON}). Exiting..."
		echo
		return 1
	fi
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading..."
		download_pyton > ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log 2>&1
		echo -n "building..."
		build_python >> ${GLOBAL_LOG_PATH}/python-${PYTHONBIN_VER}.log 2>&1
		echo "done."
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}
	else
		echo "already there."
	fi
	if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ]
	then
		mv ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/_sysconfigdata.py
	fi
	if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m ]
	then
		ln -s config-${PYTHONBIN_VER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m
	fi
	trap ERR
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_python-crossenv.log ];
		then \
			echo "Log ${LOG_PATH}/toolchain_python-crossenv.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_python-crossenv.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Creating virtual cross environment..."
	if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
	then
		build_python_crossenv >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
		echo "done."
		echo
	else
		echo "already there."
		echo
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
	fi
	trap ERR
}

# Check the toolchains
gcc -v > /dev/null 2>&1
if [ ! ${?} -eq 0 ]
then
	echo "The toolchain for host compile does not exist."
	exit 1
fi
BARCH=$(gcc -dumpmachine)
