#!/bin/bash

check_core_functions
check_build_functions

function prepare_sysroot () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Preparing sysroot... "
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi

		echo "DISTOS_PATH: ${DISTOS_PATH}" >> ${LOG_PATH}/sysroot.log 2>&1
		echo >> ${LOG_PATH}/sysroot.log 2>&1

		find -L ${DISTOS_PATH}/usr/lib/${HARCH} \( -lname "/lib/${HARCH}*" -o -lname "/etc/alternatives*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1
		find -L ${DISTOS_PATH}/etc/alternatives \( -lname "/lib/${HARCH}*" -o -lname "/usr/lib/${HARCH}*" \) | xargs -I{} -d'\n' -n1 -P${NPROCS} bash -c "
			echo -n 'Relinking {}... ' >> ${LOG_PATH}/sysroot.log 2>&1
			set -x
			eval ${SUDO_CMD} ln -f -s ../..\$(readlink \"{}\") \"{}\" >> ${LOG_PATH}/sysroot.log 2>&1
			set +x
			echo 'done.'
		" >> ${LOG_PATH}/sysroot.log 2>&1

		if [ -f ${DISTOS_PATH}/usr/lib/${HARCH}/pkgconfig/libical.pc ]
		then
			eval ${SUDO_CMD} sed -i "s#/usr/lib/${HARCH:+${HARCH}/}libicu#${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}libicu#g" ${DISTOS_PATH}/usr/lib/${HARCH:+${HARCH}/}pkgconfig/libical.pc
		fi
		echo "done."
		echo
	else
		echo "fail. No image mounted."
		return 1
	fi

	trap ERR
}

function create_sysroot () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/sysroot.log ];
		then \
			echo "Log ${LOG_PATH}/sysroot.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/sysroot.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	echo -n "Creating sysroot with $(basename ${1})... "
	if [ ! -d ${DISTOS_PATH} ]
	then
		local ARCHIVE_DIRS="./boot ./bin ./lib ./usr/bin ./usr/include ./usr/lib ./usr/share ./usr/local/bin ./usr/local/include ./usr/local/lib ./etc ./opt"
		mkdir -p ${DISTOS_PATH}
		[ ! -d ${LOG_PATH} ] && mkdir ${LOG_PATH}
		if [[ ${1} =~ ^http://|^https://|^ftp:// ]]
		then
			ARCHIVE_DIRS=${ARCHIVE_DIRS} STRIP_COMPONENTS=0 download_uncompress ${1} ${DISTOS_PATH} >> ${LOG_PATH}/sysroot.log 2>&1
		else
			tar xf ${IMG_PATH}/${1} -C${DISTOS_PATH} ${ARCHIVE_DIRS} >> ${LOG_PATH}/sysroot.log 2>&1
		fi
		prepare_sysroot
		echo "done."
		echo
	else
		echo "already present. Run rm -rf ${DISTOS_PATH} if you want to update it."
		echo
	fi
	trap ERR
}

function check_gnu_c () {
	${HARCH}-gcc -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The GNU toolchain for cross-compile does not exist."
		echo "To build one, add setup_gcc command to your project before start building anything else."
		echo
		return 1
	fi
}

function check_llvm_c () {
	clang --target=${HARCH} -v > /dev/null 2>&1
	if [ ! ${?} -eq 0 ]
	then
		echo "The LLVM toolchain for cross-compile does not exist."
		echo "To build one, add setup_llvm command to your project before start building anything else."
		echo
		return 1
	fi
}

function setup_gcc () {

	function gcc_buildenv () {
		MULTI_ARCH=${MULTIARCH:-1}
		BUILD_PREFIX="${BUILD_PREFIX:-/usr}"
		if [ ${MULTI_ARCH} -eq 1 ] && [ -z "${HARCH_LIB}" ]
		then
			BUILD_LIBSUFFIX="/${HARCH}"
		else
			BUILD_LIBSUFFIX="${HARCH_LIB}"
		fi

		if [ ${MAKEVERBOSE:-0} -eq 0 ]
		then
			local SILENTCONFIG="--enable-silent-rules"
			build_configargs="${SILENTCONFIG}"
			host_configargs="${SILENTCONFIG}"
			target_configargs="${SILENTCONFIG}"
		fi

		unset GLIBC_SYSROOT ECHO_BOOTSTRAP
		# Check where glibc is installed
		if ( [ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crtn.o ] && \
				[ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crti.o ] && \
				[ -f ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crt1.o ] )
		then
			GLIBC_SYSROOT=${BIN_PATH}
		else
			if [ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crtn.o ] && \
				[ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crti.o ] && \
				[ -f ${DISTOS_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/crt1.o ]
			then
				GLIBC_SYSROOT=${DISTOS_PATH}
			else
				ECHO_BOOTSTRAP="bootstrap "
				LOG_BOOTSTRAP="bs-"
			fi
		fi

		GCC_CONFIG="--enable-checking=release --enable-multiarch --disable-multilib --enable-version-specific-runtime-libs --enable-gnu-indirect-function --enable-initfini-array --enable-gnu-unique-object --with-system-zlib --with-glibc-version=2.11 --with-gcc-major-version-only --enable-linker-build-id --disable-option-checking ${SILENTCONFIG}"

		if [ -n "${GLIBC_SYSROOT}" ]
		then
			GCC_CONFIG+=" --enable-lto --enable-threads=posix --enable-languages=${GCC_LANGUAGES:-c,c++} --enable-shared --enable-plugin --enable-clocale=gnu --enable-nls --enable-__cxa_atexit --with-default-libstdcxx-abi=new --enable-gcov --enable-libmudflap --enable-libgomp --enable-libssp --enable-libsanitizer --enable-install-libiberty --disable-libitm --disable-libmpx"
			if [ "$(echo ${GCC_LANGUAGES} | grep -o fortran)" == "fortran" ]
			then
				GCC_CONFIG+=" --enable-libquadmath --enable-libquadmath-support"
			fi
			BINUTILS_CONFIG=" --enable-gold --enable-plugins --enable-64-bit-bfd --enable-install-libbfd"	
		else
			GCC_CONFIG+=" --disable-lto --disable-threads --enable-languages=c --with-newlib --disable-shared --disable-decimal-float --disable-plugin --disable-nls --disable-libstdcxx --disable-gcov --without-headers --disable-libatomic --disable-libgomp --disable-libssp --disable-libvtv --disable-libsanitizer --disable-libitm --disable-libmpx"
			BINUTILS_CONFIG=" --enable-ld=default --disable-plugins --enable-64-bit-bfd"
		fi
		COMPFLAGS="${GNU_EXTRACOMPFLAGS}"
		LINKERFLAGS="${GNU_EXTRALDFLAGS}"
		if [ ${GCC_LTOENABLE:-0} -eq 1 ] && [ -n "${GLIBC_SYSROOT}" ]
		then
			LTO_COMPFLAGS=" -flto=${NPROCS}"
			LTO_LINKERFLAGS=" -fuse-linker-plugin"
		fi
		if [ -n "${GLIBC_SYSROOT}" ]
		then
			GCC_SYSROOT_FLAGS=" --with-sysroot=${GLIBC_SYSROOT}"
		fi
		### Create sccache_wrapper to work around an issue of not supporting correctly the
		### -B parameter. It is not able to find the local cc1 executable running xgcc
		if [[ ${CCWRAPPER} == *sccache ]]
		then
			if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} ]
			then
				run_cmd "rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}"
			fi
			run_cmd "mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}"
			cat <<-EOF > ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/sccache_wrapper
				#!/bin/sh

				set -e

				dir=\$(dirname \$(realpath \$1))
				cc1=\${dir}/cc1

				if [ -e "\${cc1}"  ]; then
					export PATH=\${dir}:\${PATH}
					echo "${CCWRAPPER} \$@" >> \$dir/sccache_wrapper.log
					exec ${CCWRAPPER} "\$@"
				else
					echo "\$@" >> \$dir/sccache_wrapper.log
					exec "\$@"
				fi
			EOF
			run_cmd "chmod +x ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/sccache_wrapper"
			GCC_CCWRAPPER="${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/sccache_wrapper"
		else
			GCC_CCWRAPPER="${CCWRAPPER}"
		fi
	}

	function gcc_download () {
		trap 'local STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local GMPURL=https://gmplib.org/download/gmp/gmp-${GMP_VER}.tar.xz
		local MPFRURL=https://www.mpfr.org/mpfr-${MPFR_VER}/mpfr-${MPFR_VER}.tar.xz
		local MPCURL=https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz
		local ISLURL=https://libisl.sourceforge.io/isl-${ISL_VER}.tar.xz
		local BINUTILSURL=https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.xz
		#local BINUTILSURL=https://github.com/RTEMS/sourceware-mirror-binutils-gdb/archive/refs/tags/binutils-${BINUTILS_VER}.tar.gz
		#local GCCURL=https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.xz
		local GCCURL=https://github.com/gcc-mirror/gcc/archive/releases/gcc-${GCC_VER}.tar.gz

		download_uncompress ${BINUTILSURL} ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER}
		download_uncompress ${GCCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}
		download_uncompress ${GMPURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/gmp
		download_uncompress ${MPFRURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpfr
		download_uncompress ${MPCURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/mpc
		download_uncompress ${ISLURL} ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/isl
		run_cmd "pushd ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}"
		find ../binutils-${BINUTILS_VER} -maxdepth 1 -type d ! -path ../binutils-${BINUTILS_VER} -exec bash -c 'run_cmd "ln -fs {} ."' \;
		if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.33
		then
			echo "### GCC version older than 10 and BINUTILS 2.33 or earlier... "
			run_cmd "cp -f ../binutils-${BINUTILS_VER}/configure.ac ."
			run_cmd "cp -f ../binutils-${BINUTILS_VER}/Makefile.* ."
		fi
		if test_version $(echo ${GCC_VER} | sed 's/_/./g; s/-.*$//g') -le 9 && test_version ${BINUTILS_VER} -ge 2.34
		then
			echo "### GCC version older than 10 and BINUTILS 2.34 or earlier... "
			run_cmd "ln -fs ../binutils-${BINUTILS_VER}/config/debuginfod.m4 config/debuginfod.m4"
		fi
		if test_version ${GCC_VER} -lt 12.0.0 && test_version ${BINUTILS_VER} -ge 2.37
		then
			echo "### GCC version is less than 12.0.0 and BINUTILS 2.37 or earlier... "
			run_cmd "mv libiberty libiberty.gcc"
			run_cmd "ln -fs ../binutils-${BINUTILS_VER}/libiberty ."
			run_cmd "mv include/demangle.h include/demangle.h.gcc"
			run_cmd "ln -fs ../binutils-${BINUTILS_VER}/include/demangle.h include/"
			#run_cmd "mv include/hashtab.h include/hashtab.h.gcc"
			#run_cmd "ln -fs ../binutils-${BINUTILS_VER}/include/hashtab.h include/"
		fi
		if [ ../binutils-${BINUTILS_VER}/libiberty/cp-demangle.c -nt libiberty/cp-demangle.c ]
		then
			echo "### binutils-${BINUTILS_VER}/libiberty newer than gcc-${GCC_VER}/libiberty... "
			run_cmd "mv libiberty libiberty.gcc"
			run_cmd "ln -fs ../binutils-${BINUTILS_VER}/libiberty ."
			run_cmd "mv include/demangle.h include/demangle.h.gcc"
			run_cmd "ln -fs ../binutils-${BINUTILS_VER}/include/demangle.h include/"
			#run_cmd "mv include/hashtab.h include/hashtab.h.gcc"
			#run_cmd "ln -fs ../binutils-${BINUTILS_VER}/include/hashtab.h include/"
		fi
		#echo "Disabling multilib directory"
		#grep -lR "^ *MULTILIB_OSDIRNAMES" gcc/config/* | xargs -I{} bash -c 'run_cmd "sed -si \"s/^ *MULTILIB_OSDIRNAMES/__MULTILIB_OSDIRNAMES/g\" {}"'
		popd
		trap ERR
	}

	function gcc_configuration () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS}' ERR

		local CONFIG_ARCH_PARAMS="--build=${BARCH} --host=${BARCH} --target=${HARCH}"
		case ${HM} in
			x86_64) local PLATFORM_ARCHFLAGS=""
				;;

			*)	local PLATFORM_ARCHFLAGS=" ${HMFPU:+ --with-fpu=${HMFPU}}${HMFLOATABI:+ --with-float=${HMFLOATABI}}"
				;;
		esac
		local PLATFORM_ARCHFLAGS="--enable-targets=${HM}-${HOS}-${HLIBC} --with-arch-directory=${HM} ${HMARCH:+ --with-arch=${HMARCH}}${PLATFORM_ARCHFLAGS}"
		echo "### GCC_BUILD_PATH: ${TOOLCHAIN_PATH}/gcc-${GCC_VER}"
		run_cmd "pushd ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}"
		run_cmd "CC_FOR_BUILD=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc)\" \\
				CXX_FOR_BUILD=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++)\" \\
				AR_FOR_BUILD=\"$(which ${BARCH}-gcc-ar 2>/dev/null)\" \\
				NM_FOR_BUILD=\"$(which ${BARCH}-gcc-nm 2>/dev/null)\" \\
				RANLIB_FOR_BUILD=\"$(which ${BARCH}-gcc-ranlib 2>/dev/null)\" \\
				CFLAGS_FOR_BUILD=\"${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}\" \\
				CXXFLAGS_FOR_BUILD=\"${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}\" \\
				LDFLAGS_FOR_BUILD=\"${LINKERFLAGS}\" \\
				CC=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc 2>/dev/null)\" \\
				CXX=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++ 2>/dev/null)\" \\
				AR=\"$(which ${BARCH}-gcc-ar 2>/dev/null)\" \\
				NM=\"$(which ${BARCH}-gcc-nm 2>/dev/null)\" \\
				RANLIB=\"$(which ${BARCH}-gcc-ranlib 2>/dev/null)\" \\
				CFLAGS=\"${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}${LTO_COMPFLAGS}\" \\
				CXXFLAGS=\"${COMPFLAGS} -march=native -O${GCC_OPTLEVEL}${LTO_LINKERFLAGS}\" \\
				LDFLAGS=\"${LINKERFLAGS}\" \\
				CFLAGS_FOR_TARGET=\"${COMPFLAGS} ${OPTCOMP_FLAGS}\" \\
				CXXFLAGS_FOR_TARGET=\"${COMPFLAGS} ${OPTCOMP_FLAGS}\" \\
				LDFLAGS_FOR_TARGET=\"${LINKERFLAGS} ${OPTLINK_FLAGS}\" \\
				${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/configure \\
					${CONFIG_ARCH_PARAMS} ${GCC_SYSROOT_FLAGS} ${PLATFORM_ARCHFLAGS} \\
					${BINUTILS_CONFIG} ${GCC_CONFIG} \\
					--prefix=\"${TOOLCHAIN_PATH}\" \\
					build_configargs='${build_configargs}' \\
					host_configargs='${host_configargs}' \\
					target_configargs='${target_configargs}'"
		run_cmd "popd"
		if [ -n "${GLIBC_SYSROOT}" ]
		then
			run_cmd "mkdir -p ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/${HARCH}/libgcc"
			echo "### Create a symlink that allows libgcc to be built with posix threads support"
			run_cmd "ln -s ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}/libgcc/gthr-posix.h ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/${HARCH}/libgcc/gthr-default.h"
		fi
		trap - ERR
	}

	function gcc_make_host () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS}' ERR

		echo "### Making compiler."
		run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} STAGE_CC_WRAPPER=\"${GCC_CCWRAPPER}\" all-host"
		run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} install-strip-host"

		GCC_MAJVER=$(${TOOLCHAIN_PATH}/bin/${HARCH}-gcc -dumpversion)

		echo "### Finalize the installation of the limits.h header"
		run_cmd "${TOOLCHAIN_PATH}/libexec/gcc/${HARCH}/${GCC_MAJVER}/install-tools/mkheaders"

		if [ ! -d ${GLIBC_SYSROOT}${BUILD_PREFIX}/lib ] && [[ "${BUILD_LIBSUFFIX}" == 64* ]]
		then
			echo "### Workaround for ${GLIBC_SYSROOT}${BUILD_PREFIX}/lib/../lib64"
			run_cmd "mkdir -pv \"${GLIBC_SYSROOT}${BUILD_PREFIX}/lib\""
		fi
		trap ERR
	}

	function gcc_make_target_libs () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS}' ERR

		export LIB_LA_SEDTRANS="s&^dependency_libs=' -L${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}/./ld&dependency_libs='&; s&^libdir='${TOOLCHAIN_PATH}&libdir='${BUILD_PREFIX}&"

		### Define objects to be built
		echo "### Targets to build: ${GCC_TARGETS}"
		echo "### Install target: ${GCC_INSTALL_TARGETS}"
		echo "### GCC main: ${GCC_IS_MAIN}"
		if [ "${GCC_TARGETS}" = "all" ]
		then
			local OBJECTS="libgcc libstdc++-v3 libgomp libssp libatomic"
			if [ "$(echo ${GCC_LANGUAGES} | grep -o fortran)" == "fortran" ]
			then
				OBJECTS+=" libquadmath"
			fi
		else
			local OBJECTS="${GCC_TARGETS}"
		fi
		local BUILD_OBJECTS=
		for object in $( echo ${OBJECTS} | tr ',' ' ' )
		do
			local BUILD_OBJECTS+=" all-target-${object}"
		done
		echo "### Making target libraries."
		run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} STAGE_CC_WRAPPER=\"${GCC_CCWRAPPER}\" ${BUILD_OBJECTS}"

		setbuildenv
		for object in $( echo ${OBJECTS} | tr ',' ' ' )
		do
			echo "### Installing in the toolchain dir"
			run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} install-strip-target-${object}"
			###  Create package if it is not bootstrapping
			if [ -n "${GLIBC_SYSROOT}" ]
			then
				echo "### Creating package for ${object}"
				if [ -d ${PACKAGES_PATH}/gcc-libs-${GCC_VER} ]
				then
					run_cmd "rm -rf ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}"
				fi
				run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} DESTDIR="${PACKAGES_PATH}/gcc-${object}_${GCC_VER}" prefix=${BUILD_PREFIX} install-strip-target-${object}"
				echo "### Adapting .la libraries to ${BIN_PATH}${BIN_PREFIX}"
				find ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}${BUILD_PREFIX}/lib/gcc/${HARCH}/${GCC_MAJVER} -mindepth 1 -name "*.la" -type f | xargs -r -I{} bash -c \
					"run_cmd 'sed -i \"\${LIB_LA_SEDTRANS}\" {}'"
				run_cmd "create_sfx_package ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}"
				run_cmd "rm -rf ${PACKAGES_PATH}/gcc-${object}_${GCC_VER}"
			fi
			### Install in BIN_PATH if requested via --install
			if [ ${GCC_INSTALL_TARGETS} -eq 1 ] 
			then
				echo "### Installing in ${BIN_PATH}${BUILD_PREFIX}"
				run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} DESTDIR="${BIN_PATH}" prefix=${BUILD_PREFIX} install-strip-target-${object}"
			fi
		done

		if [ ${GCC_IS_MAIN} -eq 1 ]
		then
			echo "### Linking GCC target libraries in ${BUILD_PREFIX}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} from ${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH}/${GCC_MAJVER}"
			if [ -d ${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH} ]
			then
				find ${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH} -type f,l \( -name "*.so*" -a ! -name "*.so*.py" -o -name "*.a*" -o -name "*.la*" -o -name "crt*.o" \) | xargs -r -I{} bash -c \
					"run_cmd 'ln -fsv \$(realpath --relative-to=${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} {}) ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/\$(basename {})'"
			fi
		fi

		echo "### Adapting .la libraries to ${BIN_PATH}${BIN_PREFIX}"
		find ${TOOLCHAIN_PATH}/lib/gcc/${HARCH}/${GCC_MAJVER} $( [ ${GCC_INSTALL_TARGETS:-0} -eq 1 ] && echo "${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH}/${GCC_MAJVER}" || true ) -mindepth 1 -name "*.la" -type f | xargs -r -I{} bash -c \
				"run_cmd 'sed -i \"\${LIB_LA_SEDTRANS}\" {}'"

		run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} STAGE_CC_WRAPPER="${CCWRAPPER}" all-target-libsanitizer"
		run_cmd "make -C ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} V=${MAKEVERBOSE:-0} install-strip-target-libsanitizer"

		trap ERR
	}

	trap 'local STATUS=${?}; \
		trap - ERR; \
		echo "fail."; \
		echo "Remove ${TOOLCHAIN_PATH} folder before start over again."; \
		echo; \
		return ${STATUS}' ERR

	OPTS="--install --main_gcc" OPTS_WITH_VALUE="--targets" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true
	
	echo -n "Setting up gcc"
	echo -n "-${GCC_VER}... "

	local GCC_TARGETS=${_param_targets:-all}
	local GCC_INSTALL_TARGETS=${_param_install:-0}
	local GCC_IS_MAIN=${_param_main_gcc:-0}

	setup_autotools --default >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	pathadd PATH "${TOOLCHAIN_PATH}/bin"
	if [ ! -f ${TOOLCHAIN_PATH}/bin/${HARCH}-gcc ] && [ ! -f ${TOOLCHAIN_PATH}/bin/${HARCH}-g++ ]
	then
		gcc_buildenv > ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log
		
		if [ ! -d ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} ] || [ ! -d ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
		then
			echo -n "downloading... "
			gcc_download >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log 2>&1
		fi
		echo -n "${ECHO_BOOTSTRAP}configuration... "
		gcc_configuration >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log 2>&1
		echo -n "${ECHO_BOOTSTRAP}building host binaries... "
		gcc_make_host ${HARCH} >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log 2>&1
		### Check if bootstrap sysroot before building target libraries
		if [ -z "${GLIBC_SYSROOT}" ]
		then
			### Bootstrapping sysroot
			echo "done."
			echo "Bootstrapping foundation libraries in ${BIN_PATH}... "
			local SPACES="   "
			echo -n "${SPACES}"
			echo -n "building bootstrap libgcc... "
			GCC_TARGETS="libgcc" GCC_INSTALL_TARGETS=0 gcc_make_target_libs > ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}target-gcclibs-${GCC_VER}.log
			echo "done."
			### Build & install kernel headers
			echo -n "${SPACES}"
			NUMSPACES=1 KERNEL_HDRS_ONLY=1 build --no_gcc_check --no_save_status ${BS_KERNEL:-bootstrap/bs_kernel}
			### Build & install glibc
			echo -n "${SPACES}"
			NUMSPACES=1 WITH_LIBXCRYPT=1 build --toolchain gnu --no_save_status bootstrap/bs_glibc
			### Build & install libxcrypt
			echo -n "${SPACES}"
			NUMSPACES=1 build --toolchain gnu --no_save_status bootstrap/bs_libxcrypt
			run_cmd "rm -rf ${TOOLCHAIN_PATH}" >> ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}target-gcclibs-${GCC_VER}.log
			echo -n "Rebuild final gcc... "
			gcc_buildenv >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
			echo -n "configuration... "
			gcc_configuration >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
			echo -n "building for host... "
			gcc_make_host ${HARCH} >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
			echo -n "building target libraries... "
			gcc_make_target_libs >> ${LOG_PATH}/toolchain_target-gcclibs-${GCC_VER}.log
		else
			# if gcc is not bootstrapping
			echo -n "building target libraries... "
			gcc_make_target_libs >> ${LOG_PATH}/toolchain_target-gcclibs-${GCC_VER}.log
		fi
	else
		# If gcc and g++ are in toolchain but some target libraries are not
		if [ ! -e ${BIN_PATH}${BUILD_PREFIX}/lib/gcc/${HARCH}/*/libgcc.a ] && \
			[ ${GCC_INSTALL_TARGETS} == 1 ]
		then
			echo "exists in the toolchain but not all the foundation libraries are found."
			gcc_buildenv > ${LOG_PATH}/toolchain_${LOG_BOOTSTRAP}gcc-${GCC_VER}.log
			echo "Building foundation libraries in ${BIN_PATH}... "
			local SPACES="   "
			if [ -z "${GLIBC_SYSROOT}" ]
			then
				### Build & install kernel headers
				echo -n "${SPACES}"
				NUMSPACES=1 KERNEL_HDRS_ONLY=1 build --no_gcc_check --no_save_status ${BS_KERNEL:-bootstrap/bs_kernel}
				### Build & install glibc
				echo -n "${SPACES}"
				NUMSPACES=1 WITH_LIBXCRYPT=1 build --toolchain gnu --no_save_status bootstrap/bs_glibc			
			fi
			if [ ! -e ${BIN_PATH}${BUILD_PREFIX}/lib${BUILD_LIBSUFFIX}/libcrypt.so ] && [ "${GLIBC_SYSROOT}" != "${DISTOS_PATH}" ]
			then
				### Build & install libxcrypt
				echo -n "${SPACES}"
				NUMSPACES=1 build --toolchain gnu --no_save_status bootstrap/bs_libxcrypt
			fi
			if [ ! -d ${TOOLCHAIN_SRCPATH}/binutils-${BINUTILS_VER} ] || [ ! -d ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
			then
				echo -n "downloading... "
				gcc_download >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log 2>&1
			fi
			echo -n "configuration... "
			gcc_configuration >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log 2>&1
			echo -n "building target libraries... "
			gcc_make_target_libs > ${LOG_PATH}/toolchain_target-gcclibs-${GCC_VER}.log 2>&1
		fi
	fi

	if [ -d ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER} ]
	then
		run_cmd "rm -rf ${TOOLCHAIN_BLDPATH}/gcc-${GCC_VER}" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	fi
	if [ -d ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER} ]
	then
		run_cmd "rm -rf ${TOOLCHAIN_SRCPATH}/gcc-${GCC_VER}" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
		run_cmd "rm -rf ${TOOLCHAIN_SRCPATH}/gcc-${BINUTILS_VER}" >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	fi
	setup_pkgconfig >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	setup_ldd >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	setup_toolchain_wrapper >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	echo "done."

	trap - ERR
}

function setup_llvm () {
	function download_llvm () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local GCCURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VER}/llvm-project-${LLVM_VER}.src.tar.xz
		download_uncompress ${GCCURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}
		trap ERR
	}

	function configure_llvm () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
		then
			run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}"
		fi
		run_cmd "mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}"

		local PLATFORM_CFLAGS="-march=native"
		# Determine maximum amount of parallel link given each link takes 10G currently
		local PARALLEL_LINK_JOB=$(( $( awk '/MemTotal/ {print $2}' /proc/meminfo )/10485760 ))

		case $(clang -v > /dev/null 2>&1; echo ${?}) in
			0)
				local C="$(which clang)"
				local CXX="$(which clang++)"
				local AR="$(which llvm-ar)"
				local NM="$(which llvm-nm)"
				local RANLIB="$(which llvm-ranlib)"
				local LINKER=lld
				local COMPILER_FLAGS="-I${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/lib64/clang/13.0.1/include"
				local LINKER_FLAGS="-fuse-ld=lld -Wl,--threads=${NPROCS}"
				local LTO=ON
				echo "Clang for build and lto active."
			;;
			*)
				local C="$(which ${BARCH}-gcc)"
				local CXX="$(which ${BARCH}-g++)"
				local AR="$(which gcc-ar)"
				local NM="$(which gcc-nm)"
				local RANLIB="$(which gcc-ranlib)"
				local LINKER=gold
				local LINKER_FLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS}"
				local LTO=OFF
				echo "GNU gcc for build and lto not active."
				run_cmd "sed -i 's/-flto\"/-flto=auto\"/g' ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/AddLLVM.cmake"
				run_cmd "sed -i 's/-flto\"/-flto=auto\"/g' ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm/cmake/modules/HandleLLVMOptions.cmake"
			;;
		esac

		unset CFLAGS CXXFLAGS CPPFLAGS PKG_CONFIG PKG_CONFIG_LIBDIR PKG_CONFIG_SYSROOT_DIR PKG_CONFIG_ALLOW_CROSS
		export LDFLAGS="${LINKER_FLAGS}"
		
		run_cmd "cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/llvm -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} -G Ninja \\
			-W no-dev \\
			-DLLVM_PARALLEL_COMPILE_JOBS=${NPROCS} \\
			-DLLVM_PARALLEL_LINK_JOBS=${PARALLEL_LINK_JOB} \\
			\\
			-DLLVM_CCACHE_BUILD:BOOL=ON \\
			-DCCACHE_PROGRAM=${CCWRAPPER} \\
			-DCMAKE_C_COMPILER="${C}" \\
			-DCMAKE_CXX_COMPILER="${CXX}" \\
			-DCMAKE_AR="${AR}" \\
			-DCMAKE_NM="${NM}" \\
			-DCMAKE_RANLIB="${RANLIB}" \\
			-DCMAKE_CROSSCOMPILING=True \\
			-DLLVM_USE_LINKER=${LINKER} \\
			-DCMAKE_C_FLAGS="${PLATFORM_CFLAGS}" \\
			-DCMAKE_CXX_FLAGS="${PLATFORM_CFLAGS}" \\
			-DCMAKE_ASM_FLAGS="${PLATFORM_CFLAGS}" \\
			-DCMAKE_EXE_LINKER_FLAGS="${LINKER_FLAGS}" \\
			-DCMAKE_SKIP_RPATH:BOOL=ON \\
			\\
			-DCMAKE_INSTALL_PREFIX=${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER} \\
			-DCMAKE_BUILD_TYPE=Release \\
			-DLLVM_TARGETS_TO_BUILD=\"all\" \\
			-DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;lldb;lld;polly\" \\
			-DLLVM_BINUTILS_INCDIR=/usr/include \\
			-DLLVM_LIBDIR_SUFFIX=64 \\
			\\
			-DBUILD_SHARED_LIBS:BOOL=OFF \\
			-DLLVM_ENABLE_LTO:BOOL=${LTO} \\
			-DLLVM_ENABLE_LIBCXX:BOOL=OFF \\
			-DLLVM_ENABLE_ZLIB:BOOL=ON \\
			-DLLVM_ENABLE_FFI:BOOL=ON \\
			-DLLVM_ENABLE_RTTI:BOOL=ON \\
			-DLLVM_ENABLE_EH:BOOL=ON \\
			-DLLVM_ENABLE_NEW_PASS_MANAGER:BOOL=ON \\
			-DLLVM_ENABLE_BINDINGS:BOOL=OFF \\
			-DLLVM_USE_PERF:BOOL=ON \\
			-DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=ON \\
			-DLLVM_LIT_ARGS=-v \\
			-DLLVM_INCLUDE_EXAMPLES:BOOL=ON \\
			-DLLVM_INCLUDE_UTILS:BOOL=ON \\
			-DLLVM_INCLUDE_TESTS:BOOL=OFF \\
			-DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=OFF \\
			-DLLVM_BUILD_EXAMPLES:BOOL=OFF \\
			-DLLVM_BUILD_TESTS:BOOL=OFF \\
			-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \\
			-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \\
			-DLLVM_INSTALL_UTILS:BOOL=ON \\
			\\
			-DCLANG_PLUGIN_SUPPORT:BOOL=ON \\
			-DCLANG_LINK_CLANG_DYLIB:BOOL=ON \\
			-DENABLE_LINKER_BUILD_ID:BOOL=ON \\
			-DCLANG_DEFAULT_RTLIB=libgcc \\
			-DCLANG_DEFAULT_UNWINDLIB=libgcc \\
			\\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \\
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON"

		trap ERR
	}

	function build_llvm () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR
		local LLVM_SHLIBDIR=$(grep -E "install_symlink.*libLLVM-${LLVM_VER}.so" ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/tools/llvm-shlib/cmake_install.cmake | head -n1 | grep -o "lib[36][24]")
		echo "### Shared LLVM libdir: ${LLVM_SHLIBDIR}"
		pathadd LD_LIBRARY_PATH ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_SHLIBDIR}
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}"
		run_cmd "ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} install/strip"
		pathremove LD_LIBRARY_PATH ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_SHLIBDIR}
		run_cmd "popd"
		trap ERR
	}

	function configure_llvm_builtins () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local LLVM_TARGET=${1}
		# To be changed with: ${TOOLCHAIN_PATH}
		local LLVM_INSTALL_PATH=$(llvm-config --prefix)

		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} ]
		then
			run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}"
		fi
		run_cmd "mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}"
		if [ -d ${DISTOS_PATH} ]
		then
			if [ $(find ${DISTOS_PATH}/usr/lib ${DISTOS_PATH}/lib -type f -name crti.o -mindepth 1 2>/dev/null | wc -l) -ge 1 ]
			then
				local SYSROOT=${DISTOS_PATH}
				export QEMU_LD_PREFIX="${DISTOS_PATH}"
			fi
		else
			local SYSROOT=${BIN_PATH}
			export QEMU_LD_PREFIX="${BIN_PATH}"
		fi
		local PLATFORM_CFLAGS="${HMARCH:+-march=${HMARCH}}${HMCPU:+ -mtune=${HMCPU}}${HMFPU:+ -mfpu=${HMFPU}}${HMFLOATABI:+ -mfloat-abi=${HMFLOATABI}}${HMGCCPARAMS:+ ${HMGCCPARAMS}}"
		### Can we build the RT builtins?
		case x${HMARCH} in
			xarmv*)
					if [[ "${HMARCH}" < "armv7" && "${HMARCH}" != "armv6m" ]]
					then
						echo -n "### ${HMARCH} is not supported, RT Builtins disabled... "
						local COMPILER_RT_BUILD_BUILTINS=OFF
					else
						local COMPILER_RT_BUILD_BUILTINS=ON
					fi
				;;
			*) local COMPILER_RT_BUILD_BUILTINS=ON
				;;
		esac
		case x${HM} in
			xarm*)
				if test_version ${LLVM_VER} -ge 15.0.0
				then 
					local WA_CXXFLAGS="-lgcc_s -Wno-unused-command-line-argument"
				fi
				;;
		esac
		run_cmd "cmake -S ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}/compiler-rt -B ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET} -G Ninja \\
			\\
			-DCMAKE_C_COMPILER_LAUNCHER=${CCWRAPPER} \\
			-DCMAKE_CXX_COMPILER_LAUNCHER=${CCWRAPPER} \\
			-DCMAKE_C_COMPILER=${LLVM_INSTALL_PATH}/bin/clang \\
			-DCMAKE_CXX_COMPILER=${LLVM_INSTALL_PATH}/bin/clang++ \\
			-DCMAKE_AR=${LLVM_INSTALL_PATH}/bin/llvm-ar \\
			-DCMAKE_NM=${LLVM_INSTALL_PATH}/bin/llvm-nm \\
			-DCMAKE_RANLIB=${LLVM_INSTALL_PATH}/bin/llvm-ranlib \\
			-DCMAKE_C_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS} ${WA_CFLAGS}" \\
			-DCMAKE_CXX_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS} ${WA_CXXFLAGS}" \\
			-DCMAKE_ASM_FLAGS="--target=${LLVM_TARGET} --sysroot=${SYSROOT} ${PLATFORM_CFLAGS}" \\
			-DCMAKE_EXE_LINKER_FLAGS="--target=${LLVM_TARGET} -fuse-ld=lld ${WA_LDFLAGS}" \\
			-DCMAKE_C_COMPILER_TARGET="${LLVM_TARGET}" \\
			-DCMAKE_ASM_COMPILER_TARGET="${LLVM_TARGET}" \\
			\\
			-DCMAKE_INSTALL_PREFIX=/lib/clang/${LLVM_VER} \\
			-DCMAKE_BUILD_TYPE=Release \\
			-DCMAKE_SYSROOT=${SYSROOT} \\
			\\
			-DLLVM_CONFIG_PATH=${LLVM_INSTALL_PATH}/bin/llvm-config \\
			\\
			-DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \\
			-DCOMPILER_RT_BUILD_BUILTINS:BOOL=${COMPILER_RT_BUILD_BUILTINS} \\
			-DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=ON \\
			-DCOMPILER_RT_BUILD_MEMPROF:BOOL=ON \\
			-DCOMPILER_RT_BUILD_PROFILE:BOOL=ON \\
			-DCOMPILER_RT_BUILD_SANITIZERS:BOOL=ON \\
			-DCOMPILER_RT_BUILD_XRAY:BOOL=ON \\
			-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \\
			-DBUILD_SHARED_LIBS:BOOL:BOOL=OFF"

		trap ERR
	}

	function build_llvm_builtins () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local LLVM_TARGET=${1}
		# To be changed with: ${TOOLCHAIN_PATH}

		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}/${LLVM_TARGET}"

		DESTDIR=${TOOLCHAIN_PATH} ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} install/strip

		### Create rt_builtins package
		if [ -d ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER} ]
		then
			run_cmd "rm -rf ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}"
		fi
		run_cmd "DESTDIR=${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}${BUILD_PREFIX} \\
			ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} install/strip"
		#tar cfp - --owner=0 --group=0 -C ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER} . | xz -T${NPROCS} - > ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}.tar.xz
		create_sfx_package ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}
		run_cmd "rm -rf ${PACKAGES_PATH}/llvm_clang_rt_builtins_${LLVM_VER}"

		if [ ${LLVM_BUILTINS_INSTALL} -eq 1 ]
		then
			run_cmd "DESTDIR=${BIN_PATH}${BUILD_PREFIX} \\
				ninja $( [ ${MAKEVERBOSE:-0} -eq 1 ] && echo -v || true ) -j${NPROCS} install/strip"
		fi

		run_cmd "popd"
		trap ERR
	}

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log ]; \
		then \
			echo "Log ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log; \
		fi; \
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	OPTS="--install" OPTS_WITH_VALUE="--targets" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local LLVM_BUILTINS_INSTALL=${_param_install:-0}

	echo -n "Setting up clang-${LLVM_VER}... "
	if [ ! -f ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/clang ] || [ ! -f ${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin/ld.lld ]
	then
		> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
		if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}" >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
		fi

		echo -n "downloading... "
		download_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		echo -n "configuration... "
		configure_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		echo -n "building host binaries... "
		build_llvm >> ${GLOBAL_LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
	fi
	pathadd LD_LIBRARY_PATH "${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/lib64"
	pathadd PATH "${GLOBAL_TOOLCHAIN_PATH}/llvm-${LLVM_VER}/bin"
	case x${HM} in
		xarm)
			if [ "${HMFLOATABI}" == "hard" ]
			then
				local LLVM_ARCH=armhf
			else
				local LLVM_ARCH=arm
			fi
			;;
		*)
			local LLVM_ARCH=${HM}
			;;
	esac
	if [ ! -f ${TOOLCHAIN_PATH}/lib/clang/${LLVM_VER}/lib/${HOS}/clang_rt.crtbegin-${LLVM_ARCH}.o ]
	then
		> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
		if [ ! -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
		then
			echo -n "downloading... "
			download_llvm >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log 2>&1
		fi
		echo -n "target libraries configuration... "
		configure_llvm_builtins ${HARCH} >> ${LOG_PATH}/toolchain_llvm-builtins-${LLVM_VER}.log 2>&1
		echo -n "building target libraries... "
		build_llvm_builtins ${HARCH} >> ${LOG_PATH}/toolchain_llvm-builtins-${LLVM_VER}.log 2>&1
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER} ]
	then
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/llvm-project-${LLVM_VER}" >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
	fi
	if [ -d ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER} ]
	then
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/llvm-project-${LLVM_VER}" >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
	fi
	setup_autotools --default >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
	setup_pkgconfig >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
	setup_ldd >> ${LOG_PATH}/toolchain_llvm-${LLVM_VER}.log
	setup_toolchain_wrapper >> ${LOG_PATH}/toolchain_gcc-${GCC_VER}.log
	echo "done."

	trap ERR
}

function setup_rust () {
	check_${TOOLCHAIN}_c

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/rust.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/rust.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/rust.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up RUST... "
	export CARGO_HOME=${GLOBAL_TOOLCHAIN_PATH}
	export RUSTUP_HOME=${GLOBAL_TOOLCHAIN_PATH}/var/rustup
	pathadd PATH "${GLOBAL_TOOLCHAIN_PATH}/bin"
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/cargo ] || [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/rustc ]
	then
		echo -n "downloading... "
		run_cmd "curl -sSf https://sh.rustup.rs -o /tmp/rustup-init" >> ${GLOBAL_LOG_PATH}/rust.log
		echo -n "installing... "
		run_cmd "chmod +x /tmp/rustup-init" >> ${GLOBAL_LOG_PATH}/rust.log
		run_cmd "/tmp/rustup-init -v -y --no-modify-path" >> ${GLOBAL_LOG_PATH}/rust.log
		run_cmd "rm -f /tmp/rustup-init" >> ${GLOBAL_LOG_PATH}/rust.log
	else
		echo -n "already there. Check for updates... "
		run_cmd "rustup -v update" >> ${GLOBAL_LOG_PATH}/rust.log
	fi
	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/cargo-install-update ]
	then
		echo -n "installing update tools... "
		run_cmd "cargo install cargo-update" >> ${GLOBAL_LOG_PATH}/rust.log
	fi
	echo -n "upgrading packages... "
	run_cmd "cargo -v install-update -a" >> ${GLOBAL_LOG_PATH}/rust.log

	echo -n "adding ${CARGO_TARGET} libraries... "
	run_cmd "rustup -v target add ${CARGO_TARGET}" >> ${GLOBAL_LOG_PATH}/rust.log
	echo "done."
	echo

	trap ERR
}

function setup_sccache () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/rust.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/rust.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/rust.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	if [ ! -x ${GLOBAL_TOOLCHAIN_PATH}/bin/sccache ]
	then
		if [ "${CARGO_HOME}" != "${GLOBAL_TOOLCHAIN_PATH}" ]
		then
			setup_rust
		fi
		echo -n "Setting up sccache..."
		run_cmd "cargo -v install sccache" >> ${GLOBAL_LOG_PATH}/rust.log
		echo "done."
	else
		echo "sccache already there."		
	fi
	CCWRAPPER="${GLOBAL_TOOLCHAIN_PATH}/bin/sccache"
	export RUSTC_WRAPPER="${CCWRAPPER}"
	export SCCACHE_DIR=${GLOBAL_CACHE_PATH}/sccache
	export SCCACHE_CACHE_SIZE="10G"
	export SCCACHE_NO_DAEMON=0
	if [ ! -d ${SCCACHE_DIR} ]
	then
		run_cmd "mkdir -p ${SCCACHE_DIR}" >> ${GLOBAL_LOG_PATH}/rust.log
	fi
	run_cmd "${GLOBAL_TOOLCHAIN_PATH}/bin/sccache -s" >> ${GLOBAL_LOG_PATH}/rust.log
	echo
	trap ERR
}

function setup_autotools () {
	function download_autotools () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local AUTOCONF_URL="https://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VER}.tar.gz"
		local AUTOMAKE_URL="https://ftp.gnu.org/gnu/automake/automake-${AUTOMAKE_VER}.tar.gz"
		local LIBTOOL_URL="https://ftp.gnu.org/gnu/libtool/libtool-${LIBTOOL_VER}.tar.gz"
		local GETTEXT_URL="https://ftp.gnu.org/pub/gnu/gettext/gettext-${GETTEXT_VER}.tar.gz"
		download_uncompress "${AUTOCONF_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-${AUTOCONF_VER} >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		download_uncompress "${AUTOMAKE_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/automake-${AUTOMAKE_VER} >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		download_uncompress "${LIBTOOL_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/libtool-${LIBTOOL_VER} >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		download_uncompress "${GETTEXT_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/gettext-${GETTEXT_VER} >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		trap ERR
	}

	function download_autotools_support () {
		trap 'STATUS=${?}; \
			trap ERR; \
			return ${STATUS};' ERR

		local AUTOCONFARCHIVE_URL="http://mirror.kumi.systems/gnu/autoconf-archive/autoconf-archive-${AUTOCONFARCHIVE_VER}.tar.xz"
		download_uncompress "${AUTOCONFARCHIVE_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER} >> ${GLOBAL_LOG_PATH}/autoconf-${AUTOCONFARCHIVE_VER}.log
		trap ERR
	}

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	OPTS="--default" OPTS_WITH_VALUE="" param2value "${@}"
	[ ${_param_v:-0} -eq 1 ] && set -x || true

	local AUTOCONF_VER=${_param_1:-${AUTOCONF_VER}}
	local AUTOMAKE_VER=${_param_2:-${AUTOMAKE_VER}}
	local LIBTOOL_VER=${_param_3:-${LIBTOOL_VER}}
	local GETTEXT_VER=${_param_4:-${GETTEXT_VER}}

	AUTOTOOLS_VER=${AUTOCONF_VER}${AUTOMAKE_VER:+-${AUTOMAKE_VER}}${LIBTOOL_VER:+-${LIBTOOL_VER}}${GETTEXT_VER:+-${GETTEXT_VER}}
	AUTOTOOLS_PATH=${GLOBAL_TOOLCHAIN_PATH}/autotools-${AUTOTOOLS_VER}

	echo -n "Setting up autotools... "
	if [ ! -f ${AUTOTOOLS_PATH}/bin/autoconf ] || [ ! ${AUTOTOOLS_PATH}/bin/automake ] || [ ! ${AUTOTOOLS_PATH}/bin/libtoolize ]
	then
		#### Download all auto tools
		download_autotools
		#### Build libtool
		echo -n "libtool-${LIBTOOL_VER}... "
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_SRCPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		local FILETOPATCH="$(find -name ltmain.sh)"
		run_cmd "sed -i '/^      -64|-mips\[0-9\]/ i## BBXB change ##' ${FILETOPATCH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "sed -i '/^      -64|-mips\[0-9\]/,/*)\$/d' ${FILETOPATCH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "sed -i '/^## BBXB change ##/a\\       -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*|-t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*|-O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*|-specs=*|-fsanitize=*|-fuse-ld=*|-Wa,*|--target=*|-B*)' ${FILETOPATCH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		#run_cmd "AUTOCONF=${AUTOTOOLS_PATH}/bin/autoconf ${AUTOTOOLS_PATH}/bin/autoreconf -fiv" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/libtool-${LIBTOOL_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "CC=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc 2>/dev/null)\" \
			CXX=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++ 2>/dev/null)\" \
			AR=\"$(which ${BARCH}-gcc-ar 2>/dev/null)\" \
			NM=\"$(which ${BARCH}-gcc-nm 2>/dev/null)\" \
			RANLIB=\"$(which ${BARCH}-gcc-ranlib 2>/dev/null)\" \
			CFLAGS=\"-march=native -O3 -flto\" \
			CXXFLAGS=\"-march=native -O3 -flto\" \
			LDFLAGS=\"-fuse-ld=gold -fuse-linker-plugin\" \
				${GLOBAL_TOOLCHAIN_SRCPATH}/libtool-${LIBTOOL_VER}/configure --prefix=${AUTOTOOLS_PATH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log"
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/libtool-${LIBTOOL_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		#### Build autoconf
		echo -n "autoconf-${AUTOCONF_VER}... "
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		#run_cmd "autoreconf -fiv" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log 2>&1
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-${AUTOCONF_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-${AUTOCONF_VER}/configure --prefix=${AUTOTOOLS_PATH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd">> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-${AUTOCONF_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		#### Build automake
		echo -n "automake-${AUTOMAKE_VER}... "
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_SRCPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log 2>&1
		#run_cmd "AUTOCONF=${AUTOTOOLS_PATH}/bin/autoconf LIBTOOLIZE=${AUTOTOOLS_PATH}/bin/libtoolize ${AUTOTOOLS_PATH}/bin/autoreconf -fiv" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		popd >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log 2>&1
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/automake-${AUTOMAKE_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "CC=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc 2>/dev/null)\" \\
			CXX=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++ 2>/dev/null)\" \\
			AR=\"$(which ${BARCH}-gcc-ar 2>/dev/null)\" \\
			NM=\"$(which ${BARCH}-gcc-nm 2>/dev/null)\" \\
			RANLIB=\"$(which ${BARCH}-gcc-ranlib 2>/dev/null)\" \\
			CFLAGS=\"-march=native -O3 -flto\" \\
			CXXFLAGS=\"-march=native -O3 -flto\" \\
			LDFLAGS=\"-fuse-ld=gold -fuse-linker-plugin\" \\
				${GLOBAL_TOOLCHAIN_SRCPATH}/automake-${AUTOMAKE_VER}/configure --prefix=${AUTOTOOLS_PATH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/automake-${AUTOMAKE_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		#### Build gettext
		echo -n "gettext-${GETTEXT_VER}... "
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_SRCPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log 2>&1
		#run_cmd "AUTOCONF=${AUTOTOOLS_PATH}/bin/autoconf AUTOCONF=${AUTOTOOLS_PATH}/bin/automake LIBTOOLIZE=${AUTOTOOLS_PATH}/bin/libtoolize \\
		#	${AUTOTOOLS_PATH}/bin/autoreconf -fiv" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		popd >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log 2>&1
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/gettext-${GETTEXT_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "CC=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc 2>/dev/null)\" \\
			CXX=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-g++ 2>/dev/null)\" \\
			AR=\"$(which ${BARCH}-gcc-ar 2>/dev/null)\" \\
			NM=\"$(which ${BARCH}-gcc-nm 2>/dev/null)\" \\
			RANLIB=\"$(which ${BARCH}-gcc-ranlib 2>/dev/null)\" \\
			CFLAGS=\"-march=native -O3 -flto\" \\
			CXXFLAGS=\"-march=native -O3 -flto\" \\
			LDFLAGS=\"-fuse-ld=gold -fuse-linker-plugin\" \\
				${GLOBAL_TOOLCHAIN_SRCPATH}/gettext-${GETTEXT_VER}/configure --prefix=${AUTOTOOLS_PATH}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "popd" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/gettext-${GETTEXT_VER}" >> ${GLOBAL_LOG_PATH}/autotools-${AUTOTOOLS_VER}.log
		echo -n "done. "
	else
		echo -n "already there. "
	fi

	echo -n "checking support tools... "
	if [ ! -f ${GLOBAL_TOOLCHAIN_PATH}/share/info/autoconf-archive.info ]
	then
		#### Download all auto tools support tools
		download_autotools_support
		#### Build autoconf-archive
		echo -n "autoconf-archive-${AUTOCONFARCHIVE_VER}... "
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}/configure --prefix=${GLOBAL_TOOLCHAIN_PATH}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "popd" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		run_cmd "rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}" >> ${GLOBAL_LOG_PATH}/autoconf-archive-${AUTOCONFARCHIVE_VER}.log
		echo -n "done."
	else
		echo -n "already there."
	fi
	if [ ${_param_default:-0} -eq 1 ]
	then
		pathadd PATH "${AUTOTOOLS_PATH}/bin"
		pathadd LD_LIBRARY_PATH "${AUTOTOOLS_PATH}/lib"
	fi
	trap ERR
}


function setup_python () {
	function download_pyton () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tar.xz"
		download_uncompress ${PYTHONURL} ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER} &&
		curl -LsR -o ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py https://bootstrap.pypa.io/get-pip.py
		set +x
		trap ERR
	}

	function build_python () {
		trap 'STATUS=${?}; \
			set +x; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER} ]
		then
			rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		fi
		mkdir -p ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		cd ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		case ${TOOLCHAIN} in
			gnu)
				if which ${BARCH}-gcc-ar > /dev/null 2>&1
				then
					local HOST_AR="${BARCH}-gcc-ar"
				else
					local HOST_AR="gcc-ar"
				fi
				if which ${BARCH}-gcc-nm > /dev/null 2>&1
				then
					local HOST_NM="${BARCH}-gcc-nm"
				else
					local HOST_NM="gcc-nm"
				fi
				if which ${BARCH}-gcc-ranlib > /dev/null 2>&1
				then
					local HOST_RANLIB="${BARCH}-gcc-ranlib"
				else
					local HOST_RANLIB="gcc-ranlib"
				fi
				export CC="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-gcc"
				export CXX="${CCWRAPPER:+${CCWRAPPER} }${BARCH}-g++"
				export CFLAGS="-march=native"
				export CXXFLAG="-march=native"
				export AR="${HOST_AR}"
				export NM="${HOST_NM}"
				export RANLIB="${HOST_RANLIB}"
				export LDFLAGS="-fuse-ld=gold -Wl,--threads -Wl,--thread-count,${NPROCS} ${GNU_EXTRALDFLAGS} ${OPTLINK_FLAGS}"
				;;
			llvm)
				export CC="${CCWRAPPER:+${CCWRAPPER} }clang"
				export CFLAGS="-march=native"
				export AR="llvm-ar"
				export NM="llvm-nm"
				export RANLIB="llvm-ranlib"
				export LDFLAGS="-fuse-ld=lld -Wl,--threads=${NPROCS} ${LLVM_EXTRALDFLAGS} ${LLVM_EXTRAPOLLYFLAGSLIBS} ${OPTLINK_FLAGS}"
				;;
		esac
		${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/configure --prefix=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER} --enable-shared --with-lto \
			--with-system-ffi ax_cv_c_float_words_bigendian=no
		#--with-address-sanitizer --with-undefined-behavior-sanitizer
		make
		make install
		${BUILD_PYTHON} ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}/get-pip.py
		cd ${START_PWD}
		rm -rf ${GLOBAL_TOOLCHAIN_BLDPATH}/python-${PYTHON_VER}
		${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin/pip -v install --upgrade setuptools pip meson ninja jinja2 docutils
		set +x
		trap ERR
	}

	function build_python_crossenv () {
		trap 'STATUS=${?}; \
			set +x; \
			[ -d ${TOOLCHAIN_PATH}/venv-${HARCH} ] && rm -rf || true; \
			trap ERR; \
			return ${STATUS}' ERR

		set -x
		${BUILD_PYTHONPIP} install crossenv
		${BUILD_PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH}
		rmdir -v ${TOOLCHAIN_PATH}/venv-${HARCH}/cross/include
		ln -sfv ${SYSROOT}${BUILD_INCLUDEDIR}/python${PYTHONBIN_VER} ${TOOLCHAIN_PATH}/venv-${HARCH}/cross/include
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate
		build-python -m pip install --upgrade cython setuptools==60.10.0 wheel 2>&1
		mkdir -p ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		pushd ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		TOOLCHAIN=gnu create_environment_source
		source environment.source
		cross-pip -v install --upgrade setuptools cython 2>&1
		build-pip -v install --upgrade setuptools jinja2 2>&1
		popd
		rm -rf ${TOOLCHAIN_BLDPATH}/build_python_crossenv
		set +x
		trap ERR
	}

	check_${TOOLCHAIN}_c

	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up Python"
	if [ -d ${DISTOS_PATH} ]
	then
		local PYTHON_SEARCHPATH=${DISTOS_PATH}
	else
		local PYTHON_SEARCHPATH=${BIN_PATH}
	fi
	if [ -z ${1} ]
	then
		local PYTHON_VER=$(find ${PYTHON_SEARCHPATH}/usr/include -maxdepth 1 -name 'python*' -exec grep '#define PY_VERSION ' {}/patchlevel.h \; | awk '{print $3}' | sed 's/\"//g' | sort -u | tail -n1)
		if [ "x${PYTHON_VER}" == "x" ]
		then
			echo "...no way to guess its version and not specified. Exiting... "
			echo
			return 1
		else
			echo -n "-${PYTHON_VER} (guessed)... "
		fi
	else
		local PYTHON_VER=${1}
		echo -n "-${PYTHON_VER}... "
	fi
	PYTHONBIN_VER=$( echo ${PYTHON_VER} | cut -d'.' -f1,2)
	BUILD_PYTHON=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin/python${PYTHONBIN_VER}
	BUILD_PYTHONPIP=${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin/pip${PYTHONBIN_VER}
	HOST_PYTHON=${PYTHON_SEARCHPATH}/usr/bin/python${PYTHONBIN_VER}
	OPTCOMP_FLAGS+="${OPTLEVEL:+ -O${OPTLEVEL}}"
	pathadd PATH "${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/bin"
	pathadd LD_LIBRARY_PATH "${GLOBAL_TOOLCHAIN_PATH}/python-${PYTHON_VER}/lib"
	if [ ! -x ${BUILD_PYTHON} ] || [ ! -x ${BUILD_PYTHONPIP} ]
	then
		echo -n "downloading... "
		download_pyton > ${GLOBAL_LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log 2>&1
		echo -n "building... "
		build_python >> ${GLOBAL_LOG_PATH}/toolchain_python-${PYTHONBIN_VER}.log 2>&1
		echo "done."
		rm -rf ${GLOBAL_TOOLCHAIN_SRCPATH}/python-${PYTHON_VER}
	else
		echo "already there."
	fi
	if [ -d ${DISTOS_PATH} ]
	then
		if [ ! $(stat -c '%u' ${DISTOS_PATH}) -eq $(id -u) ]
		then
			local SUDO_CMD='sudo'
		fi
		if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ]
		then
			eval ${SUDO_CMD} mv ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/_sysconfigdata.py
		fi
		if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m-${HARCH} ] && [ ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m ]
		then
			eval ${SUDO_CMD} ln -s config-${PYTHONBIN_VER}m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBIN_VER}/config-${PYTHONBIN_VER}m
		fi
	fi
	trap ERR
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${LOG_PATH}/toolchain_python-crossenv.log ];
		then \
			echo "Log ${LOG_PATH}/toolchain_python-crossenv.log:"; \
			echo; \
			tail -n24 ${LOG_PATH}/toolchain_python-crossenv.log; \
		fi;
		trap ERR; \
		return ${STATUS}' ERR

	if [ ${SKIP_PYTHONVENV:-0} -eq 0 ]
	then
		echo -n "Creating virtual cross environment... "
		if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
		then
			build_python_crossenv >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
			echo "done."
			echo
		else
			echo "already there."
			echo
			source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python-crossenv.log 2>&1
		fi
	fi
	trap ERR
}

function setup_pkgconfig () {
	trap 'local STATUS=${?}; \
		echo "fail."; \
		echo; \
		if [ -f ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log ];
		then \
			echo "Log ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log:"; \
			echo; \
			tail -n24 ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log; \
		fi;
		set +x; \
		trap - ERR; \
		return ${STATUS}' ERR

	echo -n "Setting up pkg-config... "

	if [ ! -f ${GLOBAL_TOOLCHAIN_PATH}/bin/pkg-config ]
	then
		local PKGCONFIG_URL="https://pkgconfig.freedesktop.org/releases/pkg-config-${PKGCONFIG_VER}.tar.gz"
		download_uncompress "${PKGCONFIG_URL}" ${GLOBAL_TOOLCHAIN_SRCPATH}/pkg-config-${PKGCONFIG_VER} >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		echo -n "building... "
		pushd ${GLOBAL_TOOLCHAIN_SRCPATH}/pkg-config-${PKGCONFIG_VER} >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log 2>&1
		#run_cmd "autoreconf -fiv" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		popd >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log 2>&1
		if [ -d ${GLOBAL_TOOLCHAIN_BLDPATH}/pkg-config-${PKGCONFIG_VER} ]
		then
			run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/pkg-config-${PKGCONFIG_VER}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		fi
		run_cmd "mkdir -pv ${GLOBAL_TOOLCHAIN_BLDPATH}/pkg-config-${PKGCONFIG_VER}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		pushd ${GLOBAL_TOOLCHAIN_BLDPATH}/pkg-config-${PKGCONFIG_VER} >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log 2>&1
		run_cmd "CC=\"${CCWRAPPER:+${CCWRAPPER} }$(which ${BARCH}-gcc 2>/dev/null)\" \\
				CFLAGS=\"-march=native -O3 -flto\" \\
				LDFLAGS=\"-fuse-ld=gold -fuse-linker-plugin\" \\
					${GLOBAL_TOOLCHAIN_SRCPATH}/pkg-config-${PKGCONFIG_VER}/configure --prefix=${GLOBAL_TOOLCHAIN_PATH}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		run_cmd "make V=${MAKEVERBOSE:-0} install" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		popd >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log 2>&1
		run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_BLDPATH}/pkg-config-${PKGCONFIG_VER}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
		run_cmd "rm -rfv ${GLOBAL_TOOLCHAIN_SRCPATH}/pkg-config-${PKGCONFIG_VER}" >> ${GLOBAL_LOG_PATH}/pkg-config-${PKGCONFIG_VER}.log
	fi

	if  [ ! -f ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config ]
	then
		echo -n "creating ${ARCH} specific script... "
		if [ ! -d ${TOOLCHAIN_PATH}/bin ]
		then
			mkdir ${TOOLCHAIN_PATH}/bin
		fi
		setbuildenv
		cat > ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config <<-EOF
			#!/bin/sh
			set -o pipefail
			echo "PKG_CONFIG_LIBDIR=\${PKG_CONFIG_LIBDIR} \\\" >> pkg-config.log
			echo "PKG_CONFIG_SYSROOT_DIR=\${PKG_CONFIG_SYSROOT_DIR} \\\" >> pkg-config.log
			echo ${GLOBAL_TOOLCHAIN_PATH}/bin/pkg-config \$@ >> pkg-config.log
			${GLOBAL_TOOLCHAIN_PATH}/bin/pkg-config \$@ | tee -a pkg-config.log
			STATUS=\$?
			echo >> pkg-config.log
			set +o pipefail
			exit \${STATUS}
		EOF
		chmod +x ${TOOLCHAIN_PATH}/bin/${HARCH}-pkg-config
	fi

	echo "done."
	trap ERR
}

function setup_ldd () {
	local LDD_PATH=${1:-${DISTOS_PATH}}
	if [ -f "${LDD_PATH}/usr/bin/ldd" ] || [ -f "${LDD_PATH}/bin/ldd" ]
	then
		eval local $(grep "^RTLDLIST=" ${LDD_PATH}/usr/bin/ldd)
		for ldso in ${RTLDLIST}
		do
			if [ -f ${LDD_PATH}${ldso} ]
			then
				local RTD=${RTD:+ }${LDD_PATH}${ldso}
			fi
		done
		if [ -n "${RTD}" ]
		then
			if [ ! -d ${TOOLCHAIN_PATH}/bin ]
			then
				mkdir ${TOOLCHAIN_PATH}/bin
			fi
			sed "/^RTLDLIST=/ s#\".*\"#\"${RTD}\"#" ${LDD_PATH}/usr/bin/ldd > ${TOOLCHAIN_PATH}/bin/ldd
			chmod +x ${TOOLCHAIN_PATH}/bin/ldd
		fi
	fi
}

function setup_toolchain_wrapper () {
	if [ ! -d ${TOOLCHAIN_PATH}/bin ]
	then
		mkdir ${TOOLCHAIN_PATH}/bin
	fi
	for tool in cc cxx cpp fc f90 ar as nm ranlib strip objcopy objdump readelf
	do
	cat <<-EOF > ${TOOLCHAIN_PATH}/bin/toolchain_wrapper
		#!/bin/sh -e
		(
			source \${ENVIRONMENT_SOURCE_PATH}/environment.source
			CMD_NAME=\$(basename \${0})
			PREFIX=\$(echo \${CMD_NAME^^} | cut -d'_' -f3)
			TOOL=\${PREFIX:+\${PREFIX}_FOR_}\$(echo \${CMD_NAME^^} | cut -d'_' -f2)
			eval echo \\\${\${TOOL}} '\${@}' >> \${CMD_NAME}.log
			eval \\\${\${TOOL}} '\${@}'
		)
	EOF
	chmod -v +x ${TOOLCHAIN_PATH}/bin/toolchain_wrapper
		ln -sfv toolchain_wrapper ${TOOLCHAIN_PATH}/bin/toolchain_build_${tool}
		ln -sfv toolchain_wrapper ${TOOLCHAIN_PATH}/bin/toolchain_${tool}
	done
}

export MAKEFLAGS="-j${NPROCS} ${MAKEFLAGS:+ ${MAKEFLAGS}}"

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ ! -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi
GLOBAL_TOOLCHAIN_SRCPATH=${GLOBAL_SRC_PATH}
GLOBAL_TOOLCHAIN_BLDPATH=${GLOBAL_BLD_PATH}
if [ ! -d ${GLOBAL_TOOLCHAIN_PATH} ]
then
	mkdir -p ${GLOBAL_TOOLCHAIN_PATH}
fi

# Check the toolchains
gcc -v > /dev/null 2>&1
if [ ! ${?} -eq 0 ]
then
	echo "The toolchain for host compile does not exist."
	exit 1
fi
BARCH=$(gcc -dumpmachine)
