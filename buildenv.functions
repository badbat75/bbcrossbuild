#!/bin/bash

check_core_functions

TOOLCHAIN_SRCPATH=${SRC_PATH}/toolchain
TOOLCHAIN_BLDPATH=${BLD_PATH}/toolchain
if [ -d ${TOOLCHAIN_PATH} ]
then
	mkdir -p ${TOOLCHAIN_PATH}
fi

function setup_rust () {
	export CARGO_HOME=${TOOLCHAIN_PATH}
	export RUSTUP_HOME=${TOOLCHAIN_PATH}/var/rustup
	which cargo && which rustc
	if [ ! $? -eq 0 ]
	then
		echo -n "No working rustc binary. Installing..."
		curl -sSf https://sh.rustup.rs -o /tmp/rustup-init &&
		chmod +x /tmp/rustup-init &&
		/tmp/rustup-init -v -y --no-modify-path > ${LOG_PATH}/toolchain_rust.log 2>&1 &&
		rm -f /tmp/rustup-init
		if [ ${?} -ne 0 ]
		then
			echo "Fail."
			return 1
		fi
		echo "Done."
	fi
	CARGO_TARGET=$(echo ${HARCH} | sed 's/-/-unknown-/' )
	echo -n "Adding ${CARGO_TARGET} libraries..."
	rustup -v target add ${CARGO_TARGET} >> ${LOG_PATH}/toolchain_rust.log 2>&1
	if [ ${?} -ne 0 ]
	then
		echo "Fail."
		return 1
	fi
	echo "Done."
}

function setup_python () {
	function build_python () {
		set -x
		local PYTHONURL="https://www.python.org/ftp/python/${PYTHONVER}/Python-${PYTHONVER}.tar.xz"
		if [ -d ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER} ]
		then
			rm -rf ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}
		fi
		mkdir -p ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}
		curl -Ls ${PYTHONURL} | tar xJf - --strip-components=1 -C${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER} &&
		curl -Ls https://bootstrap.pypa.io/get-pip.py -o ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/get-pip.py
		if [ -d ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} ]
		then
			rm -rf ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		fi
		mkdir -p ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER}
		cd ${TOOLCHAIN_BLDPATH}/bbxb-python-${PYTHONVER} &&
		CC="${CCWRAPPER:+${CCWRAPPER} }gcc" \
		CFLAGS="-fuse-ld=gold -march=native" \
		${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/configure --prefix=${TOOLCHAIN_PATH} --enable-shared &&
		make &&
		make install &&
		python${PYTHONBINVER} ${TOOLCHAIN_SRCPATH}/bbxb-python-${PYTHONVER}/get-pip.py &&
		pip${PYTHONBINVER} install crossenv &&
		local STATUS=${?}
		set +x
		return ${STATUS}
	}
	function build_python_crossenv () {
		set -x
		settoolflags
		${PYTHON} -m crossenv ${HOST_PYTHON} ${TOOLCHAIN_PATH}/venv-${HARCH} &&
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate &&
		CC="${CCWRAPPER:+${CCWRAPPER} }${HARCH}-gcc" \
		CFLAGS="${SYSROOT_CFLAGS} ${COMMON_CFLAGS} ${PLATFORM_CFLAGS} ${OPTCOMP_FLAGS}" \
		LDFLAGS="${SYSROOT_CFLAGS} ${COMMON_LDFLAGS} ${OPTLINK_FLAGS} -lpython${PYTHONBINVER}m" \
		pip install cython
		STATUS=${?}
		set +x
		return ${STATUS}
	}
	if [ -z ${1} ]
	then
		echo "No version specified"
		return 1
	fi
	if [ ! -d ${TOOLCHAIN_PATH}/venv-${HARCH} ]
	then
		local PYTHONVER=${1}
		PYTHONBINVER=$( echo ${PYTHONVER} | cut -d'.' -f1,2)
		which python${PYTHONBINVER}
		if [ ! $? -eq 0 ]
		then
			echo -n "No working python${PYTHONBINVER} binary. Building..."
			build_python > ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
			if [ ${?} -ne 0 ]
			then
				echo "Fail."
				return 1
			fi
			echo "Done."
		fi
		PYTHON=$(which python${PYTHONBINVER})
		if [ "$(echo $(${PYTHON} -V) | awk '{print $2}')" != "${PYTHONVER}" ]
		then
			echo "Build python version is different from the selected one"
			return 1
		fi
		local HOST_PYTHON=${DISTOS_PATH}/usr/bin/python${PYTHONBINVER}
		if [ ! -x ${HOST_PYTHON} ]
		then
			echo "No host python present (${HOST_PYTHON})"
			return 1
		fi
		if [ -f ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ]
		then
			mv ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/plat-${HARCH}/_sysconfigdata_m.py ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/_sysconfigdata.py
		fi
		if [ -d ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-3.5m-${HARCH} && ! -L ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-3.5m ]
		then
			ln -s config-3.5m-${HARCH} ${DISTOS_PATH}/usr/lib/python${PYTHONBINVER}/config-3.5m
		fi
		build_python_crossenv >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		return ${?}
	else
		source ${TOOLCHAIN_PATH}/venv-${HARCH}/bin/activate >> ${LOG_PATH}/toolchain_python${PYTHONBINVER}.log 2>&1
		return ${?}
	fi
}