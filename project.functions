#!/bin/bash

check_core_functions
check_build_functions

function clean_project () {
	[ -d "${BIN_PATH}" ] && rm -rf "${BIN_PATH}"
	[ -d "${STATUS_PATH}" ] && rm -rf "${STATUS_PATH}"
 	[ -f "${DATA_PATH}/${PROJECT_NAME}/${PROJECT_NAME}.tar.xz" ] && rm -f "${DATA_PATH}/${PROJECT_NAME}/${PROJECT_NAME}.tar.xz"
}

function root_project () {
	pushd "${BIN_PATH}"
	sudo find -gid "$(id -g)" -exec chgrp -h root {} \;
	sudo find -uid "$(id -u)" -exec chown -h root {} \;
	#sudo chown -R root:root *
	popd
}

function remove_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		trap - ERR; \
		return ${STATUS};' ERR

	echo -n "Removing development files... "
	if [ ! -d "${BIN_PATH}" ]
	then
		echo "No binaries directory present. Nothing to do."
		trap ERR
		exit 0
	fi
	local TMP_PATH=$(mktemp -d)
	chmod 755 "${TMP_PATH}"
	pushd "${BIN_PATH}"
	#mkdir -p ${TMP_PATH}/${TARGET_LIBDIR}${TARGET_LIBSUFFIX}
	TMP_PATH=${TMP_PATH} find . -type f \( -name '*.la' -o -name '*.a' \) -exec sh -c \
		'mkdir -p ${TMP_PATH}/$(dirname ${1}) && mv ${1} ${TMP_PATH}/${1}' \
		sh {} \;
	if [ -d ".${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig" ]
	then
		if [ ! -d "${TMP_PATH}/${TARGET_LIBDIR}${TARGET_LIBSUFFIX}" ]
		then
			mkdir -p "${TMP_PATH}/${TARGET_LIBDIR}${TARGET_LIBSUFFIX}"
		fi
		mv ".${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig" "${TMP_PATH}/${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig"
	fi
	if [ -d ".${TARGET_INCLUDEDIR}" ]
	then
		if [ ! -d "${TMP_PATH}/$(dirname ".${TARGET_INCLUDEDIR}")" ]
		then
			mkdir -p "${TMP_PATH}/$(dirname ".${TARGET_INCLUDEDIR}")"
		fi
		mv ".${TARGET_INCLUDEDIR}" "${TMP_PATH}/$(dirname ".${TARGET_INCLUDEDIR}")"
	fi
	if [ -d ".${TARGET_PREFIX}/src" ]
	then
		if [ ! -d "${TMP_PATH}/$(dirname ".${TARGET_PREFIX}/src")" ]
		then
			mkdir -p "${TMP_PATH}/$(dirname ".${TARGET_PREFIX}/src")"
		fi
		mv ".${TARGET_PREFIX}/src" "${TMP_PATH}/$(dirname ".${TARGET_PREFIX}/src")"
	fi
	popd
	pushd "${TMP_PATH}"
	tar -cf - . | xz -T0 > "${DATA_PATH}/${PROJECT_NAME}/${PLATFORM_NAME}/devfiles.tar.xz"
	popd
	rm -rf "${TMP_PATH}"
	if [ ! "$(echo "${@}" | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function resume_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		trap - ERR; \
		return ${STATUS};' ERR

	echo -n "Resuming development files... "
	tar xf "${DATA_PATH}/${PROJECT_NAME}/${PLATFORM_NAME}/devfiles.tar.xz" -C"${BIN_PATH}"
	rm -f "${DATA_PATH}/${PROJECT_NAME}/${PLATFORM_NAME}/devfiles.tar.xz"
	if [ ! "$(echo "${@}" | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function create_sfx_package () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		trap - ERR; \
		return ${STATUS};' ERR

	OPTS="" OPTS_WITH_VALUE="" param2value "${@}"

	local PKG_OBJ="${_param_1}"

	if [ -d "${PKG_OBJ}" ]
	then
		run_cmd "tar cfp - --owner=0 --group=0 -C \"${PKG_OBJ}\" . | xz -T\"${NPROCS}\" - > \"${PKG_OBJ}.tar.xz\""
	fi
	
	cat >"${PKG_OBJ}.sfx" <<-EOF
		#!/usr/bin/env bash
		set -e
		DEV_FILES="--exclude=.${TARGET_INCLUDEDIR} --exclude=.${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/*.a --exclude=.${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/*.la --exclude=.${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/cmake --exclude=.${TARGET_LIBDIR}${TARGET_LIBSUFFIX}/pkgconfig"
		CONF_FILES="--exclude=.${TARGET_SYSCONFDIR}"
		DEST=

		echo ""
		echo "Self Extracting Installer"
		echo ""
		
		while (( "\$#" ))
		do
			case \${1} in
				--with-dev)
					DEV_FILES=
					;;
				--with-conf)
					CONF_FILES=
					;;
				--dest)
					DEST=\${2}
					shift
					;;
				--test)
					X=t
					;;
				-v)
					V=v
					;;
				-d)
					set -ex
					;;
				-h|--help)
					echo "-h|--help:		This help"
					echo "--with-dev:		Extract also development files"
					echo "--with-conf:		Extract also configuration files (overwrite)"
					echo "--dest <dir>:		Specify destination directory (default:/)"
					echo "--test:			Does not extract, only test archive"
					echo "-v:			Verbose output"
					echo "-d:			Debug output"
					echo
					exit 0
					;;
			esac
			shift
		done

		ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`
		tail -n+\$ARCHIVE \$0 | tar \${X:-x}\${V}Jf - --keep-directory-symlink \${DEV_FILES} \${CONF_FILES} -C \${DEST:-/}
		set +ex
		exit 0

		__ARCHIVE_BELOW__
	EOF
	cat "${PKG_OBJ}.tar.xz" >> "${PKG_OBJ}.sfx"
	run_cmd "chmod +x \"${PKG_OBJ}.sfx\""
	run_cmd "rm \"${PKG_OBJ}.tar.xz\""
	echo
	trap ERR
}