#!/bin/bash

check_core_functions
check_build_functions

function clean_project () {
	[ -d "${BIN_PATH}" ] && rm -rf "${BIN_PATH}"
	[ -d "${STATUS_PATH}" ] && rm -rf "${STATUS_PATH}"
 	[ -f "${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz" ] && rm -f ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz
}

function root_project () {
	cd ${BIN_PATH}
	sudo find -gid $(id -g) -exec chgrp -h root {} \;
	sudo find -uid $(id -u) -exec chown -h root {} \;
	#sudo chown -R root:root *
	cd ${BB_HOME}
}

function zip_project () {
	cd ${BIN_PATH}
	[ -f ../${PRJ_NAME}.tar.xz ] && rm -f ../${PRJ_NAME}.tar.xz
	tar cf ../${PRJ_NAME}.tar --owner=0 --group=0 . &&
	cd ${DATA_PATH}/${PRJ_NAME}
	xz -T0 ${PRJ_NAME}.tar
	local BUILD_STATUS=${?}
	cd ${BB_HOME}
	if [ ${BUILD_STATUS} -ne 0 ]
	then
		return ${BUILD_STATUS}
	#	else
	#	rm -rf ${BIN_PATH}
	fi
}

function create_selfextracting_archive () {
	zip_project
	cat >${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.sfx <<-EOF
		#!/bin/bash
		echo ""
		echo "Self Extracting Installer"
		echo ""

		ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`

		tail -n+\$ARCHIVE \$0 | sudo tar xJf - -C /

		if [ -f /root/startup.sh ]
		then
			/root/startup.sh > /root/startup.log 2>&1
		fi

		exit 0

		__ARCHIVE_BELOW__
	EOF
	cat ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz >> ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.sfx
	chmod +x ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.sfx
}

function install_gcclibs () {
	settoolflags
	local GCCSEARCHLIBS="$(${HARCH:+${HARCH}-}gcc -print-search-dirs | grep 'libraries:' | sed 's/^libraries: =//;s/\:/ /g')"
	local GCCCXXLIB=$(find ${GCCSEARCHLIBS} -maxdepth 1 -type f \( -name 'libstdc++.so.*' ! -name 'libstdc++.so.*-*.py' \)  -exec realpath {} \; 2>/dev/null | sort | tail -n1)
	local GCCCXXLIBNAME=$(basename ${GCCCXXLIB})
	local BASEGCCCXXLIBNAME=$(echo ${GCCCXXLIBNAME} | cut -d'.' -f1,2,3)
	echo -n "Installing ${BASEGCCCXXLIBNAME} library..."
	echo "GCCSEARCHLIBS: ${GCCSEARCHLIBS}" > ${LOG_PATH}/gcclibs.log
	echo "GCCCXXLIB: ${GCCCXXLIB}" >> ${LOG_PATH}/gcclibs.log
	echo "GCCCXXLIBNAME: ${GCCCXXLIBNAME}" >> ${LOG_PATH}/gcclibs.log
	echo "BASEGCCCXXLIBNAME: ${BASEGCCCXXLIBNAME}" >> ${LOG_PATH}/gcclibs.log
	cp -v ${GCCCXXLIB} ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} >> ${LOG_PATH}/gcclibs.log 2>&1 &&
	ln -fs ${GCCCXXLIBNAME} ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/${BASEGCCCXXLIBNAME} >> ${LOG_PATH}/gcclibs.log 2>&1
	local BUILD_STATUS=${?}
	if [ ${BUILD_STATUS} -eq 0 ]
	then
		echo "done."
		echo
	else
		echo "fail."
		echo
	fi
	return ${BUILD_STATUS}
}

function remove_devfiles () {
	settoolflags
	echo -n "Removing development files..."
	#rm -rf ${STATUS_PATH} && echo "${STATUS_PATH} removed." &&
	find ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX} -type f -name '*.la' -exec rm -f {} \; && echo "Removed .la files in ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}." &&
	rm -rf ${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig && echo "${BIN_PATH}${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig removed." &&
	rm -rf ${BIN_PATH}${BUILD_INCLUDEDIR} && echo "${BIN_PATH}${BUILD_INCLUDEDIR} removed."
	local BUILD_STATUS=${?}
	if [ ${BUILD_STATUS} -eq 0 ]
	then
		echo "done."
		echo
	else
		echo "fail."
		echo
	fi
	return ${BUILD_STATUS}
}
