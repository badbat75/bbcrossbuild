#!/bin/bash

check_core_functions
check_build_functions

function clean_project () {
	[ -d "${BIN_PATH}" ] && rm -rf "${BIN_PATH}"
	[ -d "${STATUS_PATH}" ] && rm -rf "${STATUS_PATH}"
 	[ -f "${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz" ] && rm -f ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz
}

function root_project () {
	cd ${BIN_PATH}
	sudo find -gid $(id -g) -exec chgrp -h root {} \;
	sudo find -uid $(id -u) -exec chown -h root {} \;
	#sudo chown -R root:root *
	cd ${BB_HOME}
}

function remove_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	settoolflags
	echo -n "Removing development files..."
	if [ ! -d ${BIN_PATH} ]
	then
		echo "No binaries directory present. Nothing to do."
		trap ERR
		exit 0
	fi
	local TMP_PATH=$(mktemp -d)
	chmod 755 ${TMP_PATH}
	cd ${BIN_PATH}
	#mkdir -p ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}
	TMP_PATH=${TMP_PATH} find . -type f \( -name '*.la' -o -name '*.a' \) -exec sh -c \
		'mkdir -p ${TMP_PATH}/$(dirname ${1}) && mv ${1} ${TMP_PATH}/${1}' \
		sh {} \;
	if [ -d .${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig ]
	then
		if [ ! -d ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX} ]
		then
			mkdir -p ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}
		fi
		mv .${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig
	fi
	if [ -d .${BUILD_INCLUDEDIR} ]
	then
		if [ ! -d ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR}) ]
		then
			mkdir -p ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR})
		fi
		mv .${BUILD_INCLUDEDIR} ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR})
	fi
	cd ${TMP_PATH}
	tar -cf - . | xz -T0 > ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz
	cd ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}
	rm -rf ${TMP_PATH}
	if [ ! "$(echo ${@} | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function resume_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	echo -n "Resuming development files..."
	tar xf ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz -C${BIN_PATH}
	rm -f ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz
	if [ ! "$(echo ${@} | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function zip_project () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	if [ "$(echo ${@} | grep -o remove_devfiles)" == "remove_devfiles" ]
	then
		remove_devfiles no-exitstatus
	fi
	echo -n "Creating compressed file ${PRJ_NAME}.tar.xz..."
	cd ${BIN_PATH}	
	[ -f ../${PRJ_NAME}.tar.xz ] && rm -f ../${PRJ_NAME}.tar.xz
	tar cf ../${PRJ_NAME}.tar --owner=0 --group=0 .
	cd ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}
	xz -T0 ${PRJ_NAME}.tar
	cd ${BB_HOME}
	if [ "$(echo ${@} | grep -o remove_devfiles)" == "remove_devfiles" ]
	then
		resume_devfiles no-exitstatus
	fi
	if [ ! "$(echo ${@} | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function create_sfx_archive () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	local ZIP_PARAMS=
	if [ "$(echo ${@} | grep -o remove_devfiles)" == "remove_devfiles" ]
	then
		local ZIP_PARAMS=remove_devfiles
	fi

	zip_project ${ZIP_PARAMS} no-exitstatus
	echo -n "Creating self-extracting file ${PRJ_NAME}.sfx..."
	cat >${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx <<-EOF
		#!/bin/sh -ex
		echo ""
		echo "Self Extracting Installer"
		echo ""

		ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`

	EOF
	if [ -f ${USERDATA_PATH}/pre.sfx ]
	then
		cat ${USERDATA_PATH}/pre.sfx >> ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx
		rm ${USERDATA_PATH}/pre.sfx
	fi
	cat >>${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx <<-EOF

		tail -n+\$ARCHIVE \$0 | tar xJf - -C / --keep-directory-symlink

	EOF
	if [ -f ${USERDATA_PATH}/post.sfx ]
	then
		cat ${USERDATA_PATH}/post.sfx >> ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx
		rm ${USERDATA_PATH}/post.sfx
	fi
	cat >>${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx <<-EOF

		exit 0

		__ARCHIVE_BELOW__
	EOF
	cat ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.tar.xz >> ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx
	chmod +x ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.sfx

	echo "done."
	echo
	trap ERR
}