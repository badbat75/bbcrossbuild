#!/bin/bash

check_core_functions
check_build_functions

function clean_project () {
	[ -d "${BIN_PATH}" ] && rm -rf "${BIN_PATH}"
	[ -d "${STATUS_PATH}" ] && rm -rf "${STATUS_PATH}"
 	[ -f "${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz" ] && rm -f ${DATA_PATH}/${PRJ_NAME}/${PRJ_NAME}.tar.xz
}

function root_project () {
	cd ${BIN_PATH}
	sudo find -gid $(id -g) -exec chgrp -h root {} \;
	sudo find -uid $(id -u) -exec chown -h root {} \;
	#sudo chown -R root:root *
	cd ${BB_HOME}
}

function remove_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	setbuildenv
	echo -n "Removing development files... "
	if [ ! -d ${BIN_PATH} ]
	then
		echo "No binaries directory present. Nothing to do."
		trap ERR
		exit 0
	fi
	local TMP_PATH=$(mktemp -d)
	chmod 755 ${TMP_PATH}
	cd ${BIN_PATH}
	#mkdir -p ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}
	TMP_PATH=${TMP_PATH} find . -type f \( -name '*.la' -o -name '*.a' \) -exec sh -c \
		'mkdir -p ${TMP_PATH}/$(dirname ${1}) && mv ${1} ${TMP_PATH}/${1}' \
		sh {} \;
	if [ -d .${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig ]
	then
		if [ ! -d ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX} ]
		then
			mkdir -p ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}
		fi
		mv .${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig ${TMP_PATH}/${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/pkgconfig
	fi
	if [ -d .${BUILD_INCLUDEDIR} ]
	then
		if [ ! -d ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR}) ]
		then
			mkdir -p ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR})
		fi
		mv .${BUILD_INCLUDEDIR} ${TMP_PATH}/$(dirname .${BUILD_INCLUDEDIR})
	fi
	if [ -d .${BUILD_PREFIX}/src ]
	then
		if [ ! -d ${TMP_PATH}/$(dirname .${BUILD_PREFIX}/src) ]
		then
			mkdir -p ${TMP_PATH}/$(dirname .${BUILD_PREFIX}/src)
		fi
		mv .${BUILD_PREFIX}/src ${TMP_PATH}/$(dirname .${BUILD_PREFIX}/src)
	fi
	cd ${TMP_PATH}
	tar -cf - . | xz -T0 > ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz
	cd ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}
	rm -rf ${TMP_PATH}
	if [ ! "$(echo ${@} | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function resume_devfiles () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	echo -n "Resuming development files... "
	tar xf ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz -C${BIN_PATH}
	rm -f ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/devfiles.tar.xz
	if [ ! "$(echo ${@} | grep -o no-exitstatus)" == "no-exitstatus" ]
	then
		echo "done."
		echo
	fi
	trap ERR
}

function create_sfx_package () {
	trap 'STATUS=${?}; \
		echo "fail."; \
		echo; \
		set +x; \
		trap ERR; \
		return ${STATUS};' ERR

	OPTS="" OPTS_WITH_VALUE="" param2value "${@}"

	local PKG_OBJ="${_param_1}"
	local PKG_NAME="$(basename "${PKG_OBJ}")"
	local PKG_PKGPATH="$(dirname "${PKG_OBJ}")"

	echo -n "Creating self-extracting file ${PRJ_NAME}.sfx... "
	if [ -d "${PKG_OBJ}" ]
	then
		tar cfp - --owner=0 --group=0 -C ${PKG_OBJ} . | xz -T${NPROCS} - > ${PKG_OBJ}.tar.xz 
	fi
	
	cat >${PKG_OBJ}.sfx <<-EOF
		#!/bin/sh -e
		DEV_FILES="--exclude=.${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/*.a --exclude=.${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/*.la --exclude=.${BUILD_LIBDIR}${BUILD_LIBSUFFIX}/cmake"
		CONF_FILES="--exclude=.${BUILD_SYSCONFDIR}"
		DEST=

		echo ""
		echo "Self Extracting Installer"
		echo ""
		
		while (( "\$#" ))
		do
			case \${1} in
				--with-dev)
					DEV_FILES=
					;;
				--with-conf)
					CONF_FILES=
					;;
				--dest)
					DEST=\${2}
					shift
					;;
				--test)
					X=t
					;;
				-v)
					V=v
					;;
				-d)
					set -x
					;;
			esac
			shift
		done

		ARCHIVE=\`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' \$0\`
		tail -n+\$ARCHIVE \$0 | tar \${X:-x}\${V}Jf - --keep-directory-symlink \${DEV_FILES} \${CONF_FILES} -C \${DEST:-/}
		set +x
		exit 0

		__ARCHIVE_BELOW__
	EOF
	cat ${PKG_OBJ}.tar.xz >> ${PKG_OBJ}.sfx
	chmod +x ${PKG_OBJ}.sfx
	rm ${PKG_OBJ}.tar.xz

	echo "done."
	echo
	trap ERR
}