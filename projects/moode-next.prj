# Build recipe for moode mediacenter

case ${PLATFORM_NAME} in
	rpi|rpi2|rpi3)
		RASPBIAN_IMAGE=2022-01-28-raspios-bullseye-armhf-lite
		RASPBIAN_URL=https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2022-01-28/
	;;
	rpi3-aarch64)
		RASPBIAN_IMAGE=2022-01-28-raspios-bullseye-arm64-lite
		RASPBIAN_URL=https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2022-01-28/
	;;
esac

## Set Clang as default compiler set
TOOLCHAIN=llvm

## Enable LTO both for kernel and applications
LTOENABLE=thin
KERNEL_LTOENABLE=thin

## Enable shared libraries (default) but disable static ones
BUILD_LIBSHARED=1
BUILD_LIBSTATIC=0

LLVM_POLLY_FEATURES=all

## Set default sysroot pkg-config library path
PKG_CONFIG_SYSROOT_DIR=${BIN_PATH}

mount_tag distos --url "${RASPBIAN_URL}${RASPBIAN_IMAGE}.zip" --imgfile "${RASPBIAN_IMAGE}.img" --mountlist "2:/ 1:/boot" --resize 2:3G
if [ -z ${SKIP_APTS} ]
then
	run_on_root_dir distos root "apt-get -y purge --autoremove raspberrypi-kernel rpi-eeprom firmware-* \
		libasound2 bluez wpasupplicant iw htop libnl-3-200 RPi.GPIO libcamera-apps-lite libsource-highlight4v5 \
		raspberrypi-sys-mods raspberrypi-net-mods"
	run_on_root_dir distos root "apt-get update --allow-releaseinfo-change"
	run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade"
	run_on_root_dir distos root "DEBIAN_FRONTEND=noninteractive apt-get -y install \
		libc6-dev libpython3-dev libsqlite3-dev \
		libusb-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev libdbus-1-dev \
		libbsd-dev libncurses5-dev libdw-dev libgirepository1.0-dev libpolkit-gobject-1-dev libparted-dev libatasmart-dev \
		\
		libcurl4-gnutls-dev libyajl-dev \
		libavahi-client-dev libsystemd-dev libwrap0-dev libicu-dev libglib2.0-dev \
		\
		libltdl3-dev libmagic-dev libopencore-amrnb-dev libopencore-amrwb-dev libpng-dev \
		\
		libpopt-dev libavahi-client-dev libssl-dev \
		libexpat1-dev libxml2-dev libxslt1-dev \
		libjpeg62-turbo-dev \
		\
		libpython3-dev swig \
		\
		zlib1g-dev libbz2-dev liblzma-dev \
		\
		libdbus-glib-1-dev \
		\
		python3-dbus python3-matplotlib python3-aiohttp python3-yaml"
	run_on_root_dir distos root "apt-get clean"
fi
prepare_sysroot

#create_sysroot http://<url>/<rootfs.tar.gz>
setup_sccache
setup_gcc
setup_llvm
setup_rust
setup_python 3.9.12

#create_key_sscertificate
generate_ssh_keys --install binaries

#clean_project
#pause

build raspberrypi/rpi-kernel_5.17
#build raspberrypi/rpi-kernel_5.15 --with_extra_modules moode/ax88179_178a,moode/rtl8812au_5.6.4.2
build raspberrypi/raspi-config
build raspberrypi/raspberrypi-sys-mods
build raspberrypi/raspberrypi-net-mods
build moode/alsa-utils_1.2
build raspbian/iw_5.16-1
build firmwares/wireless-regdb
build raspbian/hostapd_2.9.0
build raspbian/wpa_supplicant_2.9.0
build moode/mediainfo_22.03
build moode/alsacap
build moode/udisks-glue_1.3.5               	
build raspbian/udevil_0.4.4-2
build moode/bluez_5
build raspberrypi/pi-bluetooth_0
WITH_APTX=libopenaptx build moode/bluez-alsa_4
build moode/mpd_0.23
build moode/mpc_0.34
build raspbian/alsaequal_0.6-8
build moode/caps_0.9.26-eqfa12p+22ef349
build moode/camilladsp_1
build moode/alsa-cdsp_1
build moode/camillagui-backend_1
build moode/minidlna_1.3.0
build moode/ashuffle_3
WITH_ALAC=1 build moode/shairport-sync_3.3.9
build moode/librespot_0
build moode/squeezelite_master
build moode/upmpdcli_1.5
build moode/libupnpp-bindings_0.21
#build moode/libupnppsamples_moode
build firmwares/allo-piano-firmware-master
build firmwares/broadcom-bt-firmware-master
build raspbian/bs2b-ladspa_0.9.1-3
build raspbian/sox_14.4.2+git20190427-2
build raspbian/flac_1.3.3-2
build moode/trx_0.6
build raspbian/haveged_1.9.14-1
build moode/moode_8

# Uncomment it to navigate in the temp filesystem
# pause

unmount_tag distos

# Build common final Image to be used to deploy moode

if [ -z ${SKIP_FINAL_IMG} ]
then
	mount_tag final --url ${RASPBIAN_URL}${RASPBIAN_IMAGE}.zip --imgfile ${RASPBIAN_IMAGE}.img --mountlist "2:/ 1:/boot" --resize 2:3G
	if [ -z ${SKIP_APTS} ]
	then
		run_on_root_dir final root "apt-get -y purge --autoremove raspberrypi-kernel libraspberrypi-dev \
			gcc-10 build-essential libc6-dev dpkg-dev manpages-dev initramfs-tools-core RPi.GPIO bluez \
			wpasupplicant iw htop libnl-3-200 libcamera-apps-lite libsource-highlight4v5 \
			libasound2 raspberrypi-sys-mods raspberrypi-net-mods"
		run_on_root_dir final root "apt-get update --allow-releaseinfo-change"
		run_on_root_dir final root "DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade"
		run_on_root_dir final root "DEBIAN_FRONTEND=noninteractive apt-get -y install \
			libgomp1 triggerhappy libdw1 \
			php-fpm nginx sqlite3 php-sqlite3 php7.4-gd php-yaml \
			\
			telnet sysstat squashfs-tools shellinabox \
			samba smbclient exfat-fuse inotify-tools \
			avahi-utils winbind libnss-winbind djmount xfsprogs id3v2 \
			udisks2 libatasmart4 libdbus-glib-1-2 libgudev-1.0-0 libsgutils2-2 libdevmapper-event1.02.1 \
			\
			libyajl2 libavahi-client3 libcurl3-gnutls \
			\
			dnsmasq \
			\
			expect \
			\
			python3-dbus python3-matplotlib python3-aiohttp python3-yaml"

		if [ ${ENABLE_DISPLAY:-0} -eq 1 ]
		then
			run_on_root_dir final root "DEBIAN_FRONTEND=noninteractive apt-get -y install \
				xinit xorg xserver-xorg-legacy chromium-browser libgtk-3-0 libgles2"
		fi

		run_on_root_dir final root "apt-get -y purge --autoremove libcephfs2"
		run_on_root_dir final root "apt-get clean"
	fi
	if [ ${MOODEIMG_FS:-f2fs} == ext4 ]
	then
		unmount_tag final
		cp -v ${DISKIMAGES_PATH}/final.img ${DISKIMAGES_PATH}/temp.img
		mount_tag temp --mountlist "2:/ 1:/boot"
	else
		echo -n "Creating new temp image..."
		create_image temp --rootfstype ${MOODEIMG_FS:-f2fs} --size 3G
		echo -n "Mounting..."
		mount_tag temp --mountlist "2:/ 1:/boot"
		echo -n "Copying files..."

		( set -x; sudo rsync -av "${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/final/" "${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/temp" \
			-r --exclude dev --exclude proc --exclude tmp --exclude etc/fstab; set +x ) >> ${LOG_PATH}/images_temp.log 2>&1
		unmount_tag final
		echo -n "Tuning boot parameters for ${MOODEIMG_FS:-f2fs}..."
		PARTUUID=$(grep '/ ' ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/temp/etc/fstab | awk '{print $1}')
		run_on_root_dir temp root "sed -i \"s/rootfstype=ext4/rootfstype=${MOODEIMG_FS:-f2fs}/;s/root=PARTUUID=[^ ]*/root=${PARTUUID}/\" /boot/cmdline.txt"
		run_on_root_dir temp root "systemctl disable resize2fs_once.service"
		run_on_root_dir temp root "systemctl disable e2scrub_all"
		echo -n "Installing ${MOODEIMG_FS:-f2fs} utilities..."
		case ${MOODEIMG_FS:-f2fs} in
			f2fs)
				FSTOOL=f2fs-tools
				;;
		esac
		run_on_root_dir temp root "apt-get -y install ${FSTOOL}"
		run_on_root_dir temp root "cat /boot/cmdline.txt; cat /etc/fstab"
		echo "Done."
	fi

	inject_into_mount_tag temp binaries --remove_devfiles
	run_postinstall_scripts temp

	run_on_root_dir temp root "echo 'moode' >/etc/hostname"
	run_on_root_dir temp root "sed -i 's/raspberrypi/moode/' /etc/hosts"
	run_on_root_dir temp root "echo 'pi:moodeaudio' | chpasswd"

	# Overclock RaspberryPi 1
	case x${PLATFORM_NAME} in
		xrpi)
			run_on_root_dir temp root "cat >>/boot/config.txt <<-EOF
				arm_freq=800
				cpu_freq=275
			EOF"
		;;
	esac

	# Import backed up configuration
	if [ -f ~/moodecfg.ini ]
	then
		echo -n "Uploading custom moodecfg.ini configuration..."
		inject_into_mount_tag temp ~/moodecfg.ini /boot
		echo "Done."
	fi

	# Enable SSH at boot
	run_on_root_dir temp root "systemctl disable regenerate_ssh_host_keys"
	run_on_root_dir temp root "systemctl enable ssh"


	# Uncomment it to navigate in the temp filesystem
	#pause

	unmount_tag --finalize temp
fi

# Create QEMU run scripts

case ${PLATFORM_NAME} in
	rpi2)
		QEMU_MACHINE=raspi2b
		QEMU_CPU_CORES=4
		QEMU_MEMORY=1024
		DTB=${BIN_PATH}/boot/bcm2709-rpi-2-b.dtb
		;;
	rpi3|rpi3-aarch64)
		QEMU_MACHINE=raspi3b
		QEMU_CPU_CORES=4
		QEMU_MEMORY=1024
		DTB=${BIN_PATH}/boot/bcm2710-rpi-3-b.dtb
		;;
esac

if [ -n "${QEMU_MACHINE}" ]
then
	echo "Creating QEMU Script for: ${QEMU_MACHINE}"
	KERNEL=${BIN_PATH}/boot/${KERNEL_NAME}
	IMAGE=${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.img
	QEMU_ARCH=${HM}
	QEMU_CPU=${HMCPU}

	cat >${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.qemu <<-EOF
		#!/bin/sh

		qemu-img resize ${IMAGE} 4G

		qemu-system-${QEMU_ARCH} \\
			-machine ${QEMU_MACHINE} \\
			-cpu ${QEMU_CPU} \\
			-smp ${QEMU_CPU_CORES} \\
			-m ${QEMU_MEMORY} \\
			-dtb ${DTB} \\
			-kernel ${KERNEL} \\
			-nographic \\
			-monitor telnet:127.0.0.1:5020,server,nowait \\
			-usb \\
			-device usb-audio,audiodev=default -audiodev alsa,id=default \\
			-device usb-net,netdev=eth0 -netdev user,id=eth0,hostfwd=tcp::5022-:22,hostfwd=tcp::5080-:80 \\
			-device usb-serial,chardev=ttyS0 -chardev socket,id=ttyS0,port=5021,host=0.0.0.0,nodelay=on,server=on,wait=off,telnet=on \\
			-append "dwc_otg.fiq_fsm_enable=0 console=ttyAMA0,115200 root=/dev/mmcblk0p2 rootfstype=${MOODEIMG_FS:-f2fs} rootwait fsck.repair=yes" \\
			-device sd-card,drive=disk0 -drive file=${IMAGE},if=none,format=raw,id=disk0 \\
			--no-reboot
	EOF
	chmod +x ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.qemu
	echo "Run ${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.qemu to test it!!!"
fi