if [ -f ${PRJ_PATH}/lfs.conf ]
then
	. ${PRJ_PATH}/lfs.conf
fi

## Sets default values:
TOOLCHAIN=${LFS_TOOLCHAIN:-gnu}
LFS_SPLITUSR=${LFS_SPLITUSR:-0}
LFS_ENABLESSH=${LFS_ENABLESSH:-1}
LFS_ENABLEDEV=${LFS_ENABLEDEV:-0}
LFS_HOSTNAME=${LFS_HOSTNAME:-lfs}
LFS_FSTYPE=${LFS_FSTYPE:-ext4}
LFS_FSSIZE=${LFS_FSSIZE:-4G}
LFS_WLANDEV=${LFS_WLANDEV:-wlan0}

echo "Tool chain: ${TOOLCHAIN}"
echo "Architecture: ${HARCH}"
echo
echo "Is ssh enabled: $( [ ${LFS_ENABLESSH} -eq 1 ] && echo yes || no )"
echo "LFS hostname: ${LFS_HOSTNAME}"
echo "LFS filesystem type: ${LFS_FSTYPE}"
if [ ! -x ${LFS_LANDEV} ]
then
	echo "LAN device: ${LFS_LANDEV}"
fi
if [ ! -x ${LFS_WLANSSID} ] && [ ! -x ${LFS_WLANPSK} ] && [ ! -x ${LFS_WLANDEV} ]
then
	echo "WLAN device: ${LFS_WLANDEV}"
	echo "SSID: ${LFS_WLANSSID}"
fi
echo

## Enable shared libraries (default) but disable static ones
BUILD_LIBSHARED=1
BUILD_LIBSTATIC=0

## Enable LTO both for kernel and applications
LTOENABLE=thin
KERNEL_LTOENABLE=thin

### Basic filesystem
	build lfs/create-base-fs_1.0
	build lfs/create-base-config_1.0
### Basic toolchain and core libraries
	setup_full_toolchain --with-python --with-gnu-install --with-main-gcc
### Kernel core, boot loaders, utilities and firmwares
	case ${PLATFORM_NAME} in
		rpi*)
			build raspberrypi/rpi-kernel_$( echo ${KERNEL_VER} | cut -d'.' -f1,2 )
			build raspberrypi/rpi-firmware_1
			build raspberrypi/pi-bluetooth_0
		;;
		*)
			build lfs/kernel
			build lfs/GRUB
		;;
	esac
	build lfs/kmod
	build firmwares/linux-firmware
	build firmwares/wireless-regdb
### Core Libraries
	#build lfs/glibc
	build lfs/tzdata
	build lfs/shadow
	build lfs/Linux-PAM
### Core services
	build lfs/systemd
	build lfs/D-Bus
	build lfs/polkit
### Minimal
	build lfs/bash
	build lfs/man-pages
	build lfs/man-db
	build lfs/python3
	build perl/XML-Parser
	build lfs/perl5
### Filesystem progs
	build lfs/e2fsprogs
	build lfs/btrfs-progs
	build lfs/dosfstools
	build lfs/fuse
	build lfs/attr
	build lfs/acl
### System Utilities
	build lfs/file
	build lfs/bc
	build lfs/sed
	build lfs/psmisc
	build lfs/grep
	build lfs/coreutils
	build lfs/diffutils
	build lfs/gawk
	build lfs/findutils
	build lfs/groff
	build lfs/less
	build lfs/kbd
	build lfs/tar
	build lfs/vim
	build lfs/procps-ng
	build lfs/util-linux
	build lfs/elfutils
	build lfs/usb-utils
	build lfs/pciutils
	build lfs/lsof
	build lfs/which
	build lfs/intltool
### Network Utilities
	build lfs/iana-etc
	build lfs/inetutils
	build lfs/net-tools
	build lfs/iproute2
	build lfs/curl
	build lfs/wget2
	build lfs/tcpdump
### Wireless
	build lfs/wpa_supplicant
	build lfs/hostapd
	build lfs/iw
	#build lfs/wireless-tools
	build lfs/bluez
### Security
	build lfs/sudo
### Network Servers/Clients
	build lfs/bind9
	build lfs/dhcp
	#build lfs/dhcpcd
	build lfs/openssh
	build lfs/Avahi
### X11
### Multimedia
	build lfs/alsa-utils
### Development
	build lfs/strace
	if [ ${LFS_ENABLEDEV} -eq 1 ]
	then
		build lfs/binutils
		GCC_TARGETS="binaries" build lfs/gcc
		build lfs/gdb
		build lfs/make
		build lfs/bison
		build lfs/libtool
		build lfs/autoconf
		build lfs/automake
		build lfs/gettext
		build lfs/pkgconf
		build lfs/sccache
		build lfs/cmake
		build lfs/ninja
		build lfs/meson
	else
		LFS_REMOVE_DEVFILES="--remove_devfiles"
	fi

echo Configuring Host Name: ${LFS_HOSTNAME}
echo ${LFS_HOSTNAME} > ${BIN_PATH}/etc/hostname
if ! grep "127.0.1.1" ${BIN_PATH}/etc/hosts > /dev/null
then
	echo "127.0.1.1 ${LFS_HOSTNAME}. ${LFS_HOSTNAME}" >> ${BIN_PATH}/etc/hosts
fi
echo "LANG=en_US.UTF-8" > ${BIN_PATH}/etc/locale.conf

>${BIN_PATH}/postinst_scripts/99-lfs-configurations

if [ -n "${LFS_LANDEV}" ]
then
	echo Configuring LAN: ${LFS_LANDEV}
	cat > ${BIN_PATH}/etc/systemd/network/${LFS_LANDEV}.network <<-EOF
		[Match]
		Name=${LFS_LANDEV}

		[Network]
		DHCP=yes
	EOF
	echo
fi

if [ -n "${LFS_WLANSSID}" ] && [ -n "${LFS_WLANPSK}" ] && [ -n "${LFS_WLANDEV}" ]
then
	echo Configuring WiFi: ${LFS_WLANDEV}
	wpa_passphrase ${LFS_WLANSSID} ${LFS_WLANPSK} > ${BIN_PATH}/etc/wpa_supplicant/wpa_supplicant-${LFS_WLANDEV}.conf
	cat >>${BIN_PATH}/postinst_scripts/99-lfs-configurations <<-EOF
		systemctl enable wpa_supplicant@${LFS_WLANDEV}
	EOF
	cat > ${BIN_PATH}/etc/systemd/network/${LFS_WLANDEV}.network <<-EOF
		[Match]
		Name=${LFS_WLANDEV}
		SSID=${LFS_WLANSSID}

		[Network]
		DHCP=yes
	EOF
	echo
fi

if [ ${LFS_ENABLESSH} -eq 1 ]
then
	echo Enabling SSHd
	ssh-keygen -A -f ${BIN_PATH}
	cat >>${BIN_PATH}/postinst_scripts/99-lfs-configurations <<-EOF
		systemctl enable sshd
	EOF
	generate_ssh_keys --install binaries
	echo
fi

### Final configurations ###
case ${PLATFORM_NAME} in
	rpi*)
		if [ -f ${BIN_PATH}/boot/config.txt ] && ! grep "arm_64bit=" ${BIN_PATH}/boot/config.txt > /dev/null 2>&1
		then
			case ${PLATFORM_NAME} in
				rpi*-aarch64)
					echo "arm_64bit=1" >${BIN_PATH}/boot/config.txt
				;;
				*)
					echo "arm_64bit=0" >${BIN_PATH}/boot/config.txt
				;;
			esac
		fi
	;;
	*) ;;
esac

############################

function build_lfs_image () {
	set -e
	create_image lfs --rootfstype ${LFS_FSTYPE} --size ${LFS_FSSIZE}
	mount_tag lfs --mountlist "2:/ 1:/boot"

	### Boot configuration and support scripts
	echo
	echo -n "Configuring boot parameters... "
	LFS_LBROOT="$(findmnt -nu -o SOURCE ${DATA_PATH}/${PROJECT_NAME}/${PLATFORM_NAME}/lfs)"
	LFS_PARTUUID="$(blkid -o value --match-tag PARTUUID ${LFS_LBROOT})"
	KERNEL_BOOTPARAMS="root=PARTUUID=${LFS_PARTUUID} rootfstype=${LFS_FSTYPE} fsck.repair=yes rootwait cgroup_enable=memory"
	case ${PLATFORM_NAME} in
		rpi*)
			cat >${BIN_PATH}/boot/cmdline.txt <<-EOF
				${KERNEL_BOOTPARAMS} net.ifnames=0 console=tty1 systemd.gpt_auto=no
			EOF
		;;
		generic-x64)
			cat > ${BIN_PATH}/postinst_scripts/99-lfs-grub-configuration <<-EOF
				#grub-install --target=x86_64-efi --removable --efi-directory=/boot --boot-directory=/boot
				grub-install ${LFS_LBROOT/p2/}
			EOF
			mkdir -p ${BIN_PATH}/boot/grub
			cat > ${BIN_PATH}/boot/grub/grub.cfg <<-EOF
				# Begin /boot/grub/grub.cfg
				set default=1
				set timeout=5

				insmod part_gpt
				insmod ${LFS_FSTYPE}
				set root=(hd0,1)

				if loadfont /boot/grub/fonts/unicode.pf2; then
				   set gfxmode=auto
				   insmod all_video
				   terminal_output gfxterm
				fi

				menuentry "GNU/Linux, Linux ${KERNEL_VER}"  {
				   linux /vmlinuz-${KERNEL_VER} ${KERNEL_BOOTPARAMS} systemd.gpt_auto=no ro
				}

				menuentry "GNU/Linux, Linux ${KERNEL_VER} - Serial output"  {
				   linux /vmlinuz-${KERNEL_VER} ${KERNEL_BOOTPARAMS} systemd.gpt_auto=no ro console=ttyS0
				}

			EOF
		;;
	esac
	echo "Done."

	inject_into_mount_tag lfs binaries ${LFS_REMOVE_DEVFILES}
	run_postinstall_scripts lfs
	run_on_root_dir lfs root "systemctl enable console-getty"
	run_on_root_dir lfs root "systemctl get-default && systemctl set-default multi-user.target"
	run_on_root_dir lfs root "systemctl enable systemd-networkd"
	run_on_root_dir lfs root "systemctl enable systemd-resolved"
	run_on_root_dir lfs root "systemctl enable systemd-timesyncd"
	run_on_root_dir lfs root "systemctl mask tmp.mount"
	run_on_root_dir lfs root "useradd -G wheel -m lfs"
	#run_on_root_dir lfs root "echo root:changeme | chpasswd"
	run_on_root_dir lfs root "echo lfs:lfs | chpasswd"
	#pause
	unmount_tag --finalize lfs
	utilities/qemu_cmdgen --quiet --batchtype all \
		--rootdev PARTUUID=${LFS_PARTUUID} --rootfs ${LFS_FSTYPE} \
		--savecmd ${DATA_PATH}/${PROJECT_NAME}/${PLATFORM_NAME}/${PROJECT_NAME}.qemu \
		${PROJECT_NAME} ${PLATFORM_NAME} 
	set +e
}

build_lfs_image

#create_sfx_archive remove_devfiles
#zip_project remove_devfiles