#!/bin/bash
program_exit () {
	if [ ! "${ERROR_CODE}" -eq 0 ]
	then
		echo "Error ${ERROR_CODE}: ${ERROR_STRING}" >&2
	fi
	echo >&2
	set +e +o pipefail
	exit "${ERROR_CODE}"
}

set -e -o pipefail
ERROR_CODE=0
BB_HOME=$(realpath $(dirname ${0})/..)

# shellcheck source=core.functions
source "${BB_HOME}/core.functions"
check_core_functions

OPTS="" OPTS_WITH_VALUE="--rootpart --rootfs" param2value "${@}"


PRJ_NAME="${_param_1}"
PLATFORM_NAME="${_param_2:-generic_x64}"

if [ -z "${PRJ_NAME}" ]
then
	ERROR_STRING="No project name specified!!!"
	ERROR_CODE=255
	program_exit
fi

# shellcheck source=setenv
source "${BB_HOME}/setenv"

### QEMU exe specification
case ${HM} in
	x86) QEMU_ARCH=x86_64 ;;
	arm) QEMU_ARCH=aarch64 ;;
	*) QEMU_ARCH=${HM} ;;
esac

if [ -z "${QEMU_MACHINE}" ] || [ -z "${QEMU_STORAGE}" ]
then
	ERROR_STRING="Echo platform ${PLATFORM_NAME} does not support QEMU automation"
	ERROR_CODE=1
	program_exit
fi

QEMU_EXE="qemu-system-${QEMU_ARCH}"

### Machine specification
if ! QEMU_VERSION=$(${QEMU_EXE} --version 2>/dev/null | head -n1 | awk '{print $4}')
then
	ERROR_STRING="Error in ${QEMU_EXE}"
	ERROR_CODE=2
	program_exit
fi

if ! ${QEMU_EXE} -machine help | grep "^${QEMU_MACHINE}" > /dev/null
then
	ERROR_STRING="This QEMU version (${QEMU_VERSION}) does not support ${QEMU_MACHINE} machine"
	ERROR_CODE=3
	program_exit
fi

SPECS_HW="-machine ${QEMU_MACHINE}"

if [ -n "${QEMU_CPU}" ]
then
	SPECS_HW+=" -cpu ${QEMU_CPU}"
fi

SPECS_HW+=" -smp ${QEMU_SMP:-2} -m ${QEMU_RAM:-2048}"

### Disk device specification
IMAGE_FILE="${DATA_PATH}/${PRJ_NAME}/${PLATFORM_NAME}/${PRJ_NAME}.img"

if [ ! -f "${IMAGE_FILE}" ]
then
	ERROR_STRING="Image file ${IMAGE_FILE} does not exists"
	ERROR_CODE=4
	program_exit
else
	SPECS_STORAGE="-device ${QEMU_STORAGE},drive=disk0 -drive file='${IMAGE_FILE}',if=none,format=raw,id=disk0"
fi
KERN_ROOTPARTITION=${_param_rootpart:-2}
KERN_ROOTFS=${_param_rootfs:-ext4}
case "${QEMU_STORAGE}" in
	ide-hd)
		KERN_ROOT="root=/dev/hda${KERN_ROOTPARTITION}" ;;
	scsi-hd)
		KERN_ROOT="root=/dev/sda${KERN_ROOTPARTITION}" ;;
	virtio-blk-pci|virtio-blk)
		KERN_ROOT="root=/dev/vda${KERN_ROOTPARTITION}" ;;
	sd-card)
		KERN_ROOT="root=/dev/mmcblk0p${KERN_ROOTPARTITION}" ;;
esac
KERN_ROOT+=" rootfstype=${KERN_ROOTFS}"

### Network device specification
if [ -n "${QEMU_NETWORK}" ]
then
	SPECS_NETWORK="-device ${QEMU_NETWORK},netdev=eth0 -netdev user,id=eth0,hostfwd=tcp::5022-:22"
fi

### Graphics device specification
if [ -n "${QEMU_GRAPHIC}" ]
then
	SPECS_GRAPHIC="-device ${QEMU_GRAPHIC}"
	KERN_CONSOLE="console=${QEMU_CONSOLE:-tty1}"
else
	SPECS_GRAPHIC="-nographic"
	KERN_CONSOLE="console=${QEMU_CONSOLE:-ttyS0}"
fi

### Sound device specification
if [ -n "${QEMU_SOUND}" ]
then
	SPECS_SOUND="-device ${QEMU_SOUND},audiodev=default -audiodev dsound,id=default"
fi

### Other devices specification
IFS=,
for OTHERDEVICE in ${QEMU_OTHERDEVICES}
do
	SPECS_OTHERDEVICES+=" -device ${OTHERDEVICE}"
done
unset IFS

SPECS_KERNEL="-kernel \"${BIN_PATH}/boot/${KERNEL_NAME:-vmlinuz-${KERNEL_VER}}\" ${QEMU_DTB:+"-dtb \"${BIN_PATH}/boot/${QEMU_DTB}\""}"
KERN_APPEND="-append \"${KERN_CONSOLE} ${KERN_ROOT} rootwait cgroup_enable=memory systemd.gpt_auto=no ${QEMU_KERNCONFIG}\""

CMDLINE="${QEMU_EXE}"
CMDLINE+=" ${SPECS_HW}"
CMDLINE+=" -usb -device usb-kbd -device usb-mouse"
CMDLINE+=" ${SPECS_STORAGE}"
CMDLINE+=" ${SPECS_NETWORK}"
CMDLINE+=" ${SPECS_GRAPHIC}"
CMDLINE+=" ${SPECS_SOUND}"
CMDLINE+="${SPECS_OTHERDEVICES}"
CMDLINE+=" ${SPECS_KERNEL}"
CMDLINE+=" ${KERN_APPEND}"

echo "${CMDLINE}"
#${CMD_LINE}