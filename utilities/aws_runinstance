#!/bin/bash

describe-instances () {
    # shellcheck disable=SC2016,SC2046
    aws ec2 describe-instances \
                --query 'Reservations[].Instances[?!contains(State.Name, `terminated`)].InstanceId' \
                --filters "Name=tag:purpose,Values=bbcrossbuild" --output text
}

describe-running-instances () {
    # shellcheck disable=SC2016,SC2046
    aws ec2 describe-instances \
                --query 'Reservations[].Instances[?contains(State.Name, `running`)].InstanceId' \
                --filters "Name=tag:purpose,Values=bbcrossbuild" --output text
}

ec2_image_id=ami-08fea9e08576c443b
ec2_instance_type=t2.micro
ec2_key_name=Putty_Ireland
ec2_sg=sg-09061a5a9ef45d838
ec2_subnet=subnet-ad48f2db
ec2_ebs_vol=vol-0217321caf0e4e1a2

RUNNING_INSTANCES=$(describe-instances)

case ${1} in
    run)
        if [ -z "${RUNNING_INSTANCES}" ]
        then
            aws ec2 run-instances \
                --image-id "$ec2_image_id" \
                --count 1 \
                --instance-type "$ec2_instance_type" \
                --key-name "$ec2_key_name" \
                --security-group-ids "$ec2_sg" \
                --subnet-id "$ec2_subnet" \
                --associate-public-ip-address \
                --tag-specifications 'ResourceType=instance,Tags=[{Key=purpose,Value=bbcrossbuild}]'

            echo -e "\nWaiting for instance to spin up...\n"
            while [ -z "$(describe-running-instances)" ]
            do
                sleep 5
            done
            aws ec2 attach-volume --volume-id "${ec2_ebs_vol}" --instance-id "$(describe-instances)" --device /dev/sdf
        else
            echo "Those instance is still running: ${RUNNING_INSTANCES}"
        fi
    ;;
    terminate)
        # shellcheck disable=SC2046
        aws ec2 terminate-instances \
            --instance-ids $(describe-instances)
    ;;
    show|*)
        echo "Those instance is still running: ${RUNNING_INSTANCES}"
    ;;
esac