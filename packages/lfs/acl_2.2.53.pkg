# acl_2.2.53
PKG_URL="http://download.savannah.gnu.org/releases/acl/acl-2.2.53.tar.gz"
PKG_DEPS="lfs/attr_2.4.48"
BUILD_PROCESS=configmake
CONF_FLAGS=""
INST_CMD="install-strip"
PKG_PREBUILD="cat <<EOF | patch -s -p1 || true
 libacl/libacl.h |    3 +++
 1 file changed, 3 insertions(+)

--- a/libacl/libacl.h
+++ b/libacl/libacl.h
@@ -25,6 +25,9 @@
 #ifndef ENOATTR
 # define ENOATTR ENODATA
 #endif
+#ifndef ENODATA
+# define ENODATA ENOATTR
+#endif
 
 typedef unsigned int permset_t;
 
--- a/tools/parse.c
+++ b/tools/parse.c
@@ -413,11 +413,6 @@ read_acl_comments(
 	mode_t *flags)
 {
 	int c;
-	/*
-	  Max PATH_MAX bytes even for UTF-8 path names and additional 9
-	  bytes for \"# file: \". Not a good solution but for now it is the
-	  best I can do without too much impact on the code. [tw]
-	*/
 	char *line, *cp, *p;
 	int comments_read = 0;
 	
--- a/test/test_group.c
+++ b/test/test_group.c
@@ -9,12 +9,8 @@
 #include <grp.h>
 
 #define TEST_GROUP \"test/test.group\"
-static char grfile[PATH_MAX];
-static void setup_grfile() __attribute__((constructor));
+static char grfile[] = BASEDIR \"/\" TEST_GROUP;
 
-static void setup_grfile() {
-	snprintf(grfile, sizeof(grfile), \"%s/%s\", BASEDIR, TEST_GROUP);
-}
 
 #define ALIGN_MASK(x, mask)    (((x) + (mask)) & ~(mask))
 #define ALIGN(x, a)            ALIGN_MASK(x, (typeof(x))(a) - 1)
--- a/test/test_passwd.c
+++ b/test/test_passwd.c
@@ -9,12 +9,7 @@
 #include <pwd.h>
 
 #define TEST_PASSWD \"test/test.passwd\"
-static char pwfile[PATH_MAX];
-static void setup_pwfile() __attribute__((constructor));
-
-static void setup_pwfile() {
-	snprintf(pwfile, sizeof(pwfile), \"%s/%s\", BASEDIR, TEST_PASSWD);
-}
+static char pwfile[] = BASEDIR \"/\" TEST_PASSWD;
 
 #define ALIGN_MASK(x, mask)    (((x) + (mask)) & ~(mask))
 #define ALIGN(x, a)            ALIGN_MASK(x, (typeof(x))(a) - 1)
---

 LTO Building issues (broken aliases)

--- a/tools/getfacl.c
+++ b/tools/getfacl.c
@@ -380,6 +380,8 @@ int do_show(FILE *stream, const char *pa
 			show_line(stream, NULL, NULL, NULL, NULL,
 			          &dacl_names, dacl, &dacl_ent, dacl_mask);
 			continue;
+		} else if (!dacl && !acl) {
+			return -1;
 		} else {
 			if (acl_tag == ACL_USER || acl_tag == ACL_GROUP) {
 				int id_cmp = 0;
--- a/libacl/acl_create_entry.c
+++ b/libacl/acl_create_entry.c
@@ -26,7 +26,7 @@
 acl_entry_obj *
 __acl_create_entry_obj(acl_obj *acl_obj_p)
 {
-	acl_entry_obj *entry_obj_p;
+	acl_entry_obj *entry_obj_p, *prev;
 
 	if (acl_obj_p->aprealloc == acl_obj_p->aprealloc_end) {
 		entry_obj_p = new_obj_p(acl_entry);
@@ -39,10 +39,11 @@ __acl_create_entry_obj(acl_obj *acl_obj_p)
 	acl_obj_p->aused++;
 
 	/* Insert at the end of the entry ring */
-	entry_obj_p->eprev = acl_obj_p->aprev;
+	prev = acl_obj_p->aprev;
+	entry_obj_p->eprev = prev;
 	entry_obj_p->enext = (acl_entry_obj *)acl_obj_p;
-	entry_obj_p->eprev->enext = entry_obj_p;
-	entry_obj_p->enext->eprev = entry_obj_p;
+	prev->enext = entry_obj_p;
+	acl_obj_p->aprev = entry_obj_p;
 	
 	entry_obj_p->econtainer = acl_obj_p;
 	init_acl_entry_obj(*entry_obj_p);
EOF
"
